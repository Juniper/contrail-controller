# -*- mode: python; -*-

#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#
import os

Import('CfgmEnv')
env = CfgmEnv.Clone()

setup_sources = [
    'setup.py',
    'requirements.txt',
    'run_tests.sh',
    'test-requirements.txt',
    '.testr.conf',
    '.coveragerc',
    'MANIFEST.in',
]

setup_sources_rules = []
for file in setup_sources:
    setup_sources_rules.append(
        env.Install(Dir('.'), "#controller/src/container/kube-manager/" + file))

local_sources = [
    'kube_manager/__init__.py',
    'kube_manager/kube_manager.py',
    'kube_manager/common/__init__.py',
    'kube_manager/common/logger.py',
    'kube_manager/kube/__init__.py',
    'kube_manager/kube/kube_monitor.py',
    'kube_manager/kube/namespace_monitor.py',
    'kube_manager/kube/network_policy_monitor.py',
    'kube_manager/kube/pod_monitor.py',
    'kube_manager/kube/service_monitor.py',
    'kube_manager/vnc/__init__.py',
    'kube_manager/vnc/config_db.py',
    'kube_manager/vnc/db.py',
    'kube_manager/vnc/label_cache.py',
    'kube_manager/vnc/reaction_map.py',
    'kube_manager/vnc/vnc_kubernetes.py',
    'kube_manager/vnc/vnc_namespace.py',
    'kube_manager/vnc/vnc_network_policy.py',
    'kube_manager/vnc/vnc_pod.py',
    'kube_manager/vnc/vnc_service.py',
    'kube_manager/tests/__init__.py',
]

local_sources_rules = []
for file in local_sources:
    target = "/".join(file.split('/')[:-1])
    local_sources_rules.append(
        env.Install(target, "#controller/src/container/kube-manager/" + file))

cd_cmd = 'cd ' + Dir('.').path + ' && '
sdist_depends = []
sdist_depends.extend(setup_sources_rules)
sdist_depends.extend(local_sources_rules)
sdist_gen = env.Command('dist/kube_manager-0.1dev.tar.gz', 'setup.py',
                        cd_cmd + 'python setup.py sdist')

env.Depends(sdist_gen, sdist_depends)
env.Default(sdist_gen)

if 'install' in BUILD_TARGETS:
    install_cmd = env.Command(None, 'setup.py',
                              cd_cmd + 'python setup.py install %s' %
                              env['PYTHON_INSTALL_OPT'])
    env.Depends(install_cmd, sdist_depends)
    env.Alias('install', install_cmd)

buildspace_link = os.environ.get('CONTRAIL_REPO')
if buildspace_link:
    # in CI environment shebang limit exceeds for python
    # in easy_install/pip, reach to it via symlink
    top_path = buildspace_link + '/' + Dir('.').path
    top_dir = Dir(top_path)
else:
    top_dir = Dir('.')
