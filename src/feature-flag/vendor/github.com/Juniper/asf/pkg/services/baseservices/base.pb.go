// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base.proto

package baseservices

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UUIDs struct {
	UUIDs []string `protobuf:"bytes,1,rep,name=uuids,proto3" json:"uuids,omitempty"`
}

func (m *UUIDs) Reset()      { *m = UUIDs{} }
func (*UUIDs) ProtoMessage() {}
func (*UUIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{0}
}
func (m *UUIDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UUIDs.Unmarshal(m, b)
}
func (m *UUIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UUIDs.Marshal(b, m, deterministic)
}
func (m *UUIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UUIDs.Merge(m, src)
}
func (m *UUIDs) XXX_Size() int {
	return xxx_messageInfo_UUIDs.Size(m)
}
func (m *UUIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_UUIDs.DiscardUnknown(m)
}

var xxx_messageInfo_UUIDs proto.InternalMessageInfo

func (m *UUIDs) GetUUIDs() []string {
	if m != nil {
		return m.UUIDs
	}
	return nil
}

type ListSpec struct {
	Filters      []*Filter         `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Limit        int64             `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Marker       string            `protobuf:"bytes,3,opt,name=marker,proto3" json:"marker,omitempty"`
	Detail       bool              `protobuf:"varint,4,opt,name=detail,proto3" json:"detail,omitempty"`
	Count        bool              `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Shared       bool              `protobuf:"varint,6,opt,name=shared,proto3" json:"shared,omitempty"`
	ExcludeHrefs bool              `protobuf:"varint,7,opt,name=exclude_hrefs,json=excludeHrefs,proto3" json:"exclude_hrefs,omitempty"`
	ParentFQName []string          `protobuf:"bytes,8,rep,name=parent_fq_name,json=parentFqName,proto3" json:"parent_fq_name,omitempty"`
	ParentType   string            `protobuf:"bytes,9,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty"`
	ParentUUIDs  []string          `protobuf:"bytes,10,rep,name=parent_uuids,json=parentUuids,proto3" json:"parent_uuids,omitempty"`
	BackRefUUIDs []string          `protobuf:"bytes,11,rep,name=backref_uuids,json=backrefUuids,proto3" json:"backref_uuids,omitempty"`
	RefUUIDs     map[string]*UUIDs `protobuf:"bytes,12,rep,name=ref_uuids,json=refUuids,proto3" json:"ref_uuids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ObjectUUIDs  []string          `protobuf:"bytes,13,rep,name=object_uuids,json=objectUuids,proto3" json:"object_uuids,omitempty"`
	Fields       []string          `protobuf:"bytes,14,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (m *ListSpec) Reset()      { *m = ListSpec{} }
func (*ListSpec) ProtoMessage() {}
func (*ListSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{1}
}
func (m *ListSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSpec.Unmarshal(m, b)
}
func (m *ListSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSpec.Marshal(b, m, deterministic)
}
func (m *ListSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpec.Merge(m, src)
}
func (m *ListSpec) XXX_Size() int {
	return xxx_messageInfo_ListSpec.Size(m)
}
func (m *ListSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpec proto.InternalMessageInfo

func (m *ListSpec) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *ListSpec) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListSpec) GetMarker() string {
	if m != nil {
		return m.Marker
	}
	return ""
}

func (m *ListSpec) GetDetail() bool {
	if m != nil {
		return m.Detail
	}
	return false
}

func (m *ListSpec) GetCount() bool {
	if m != nil {
		return m.Count
	}
	return false
}

func (m *ListSpec) GetShared() bool {
	if m != nil {
		return m.Shared
	}
	return false
}

func (m *ListSpec) GetExcludeHrefs() bool {
	if m != nil {
		return m.ExcludeHrefs
	}
	return false
}

func (m *ListSpec) GetParentFQName() []string {
	if m != nil {
		return m.ParentFQName
	}
	return nil
}

func (m *ListSpec) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ListSpec) GetParentUUIDs() []string {
	if m != nil {
		return m.ParentUUIDs
	}
	return nil
}

func (m *ListSpec) GetBackRefUUIDs() []string {
	if m != nil {
		return m.BackRefUUIDs
	}
	return nil
}

func (m *ListSpec) GetRefUUIDs() map[string]*UUIDs {
	if m != nil {
		return m.RefUUIDs
	}
	return nil
}

func (m *ListSpec) GetObjectUUIDs() []string {
	if m != nil {
		return m.ObjectUUIDs
	}
	return nil
}

func (m *ListSpec) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Filter struct {
	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *Filter) Reset()      { *m = Filter{} }
func (*Filter) ProtoMessage() {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_db1b6b0986796150, []int{2}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Filter) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*UUIDs)(nil), "github.com.Juniper.asf.pkg.services.baseservices.UUIDs")
	proto.RegisterType((*ListSpec)(nil), "github.com.Juniper.asf.pkg.services.baseservices.ListSpec")
	proto.RegisterMapType((map[string]*UUIDs)(nil), "github.com.Juniper.asf.pkg.services.baseservices.ListSpec.RefUuidsEntry")
	proto.RegisterType((*Filter)(nil), "github.com.Juniper.asf.pkg.services.baseservices.Filter")
}

func init() { proto.RegisterFile("base.proto", fileDescriptor_db1b6b0986796150) }

var fileDescriptor_db1b6b0986796150 = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x3b, 0x73, 0xd3, 0x4a,
	0x14, 0x5e, 0xc5, 0xd7, 0xb2, 0xbd, 0x56, 0x72, 0x33, 0x9a, 0x5b, 0xe8, 0xa6, 0x58, 0x79, 0x5c,
	0xb9, 0x52, 0x18, 0x33, 0x40, 0x86, 0x52, 0x24, 0x26, 0x84, 0x84, 0xc7, 0x86, 0x50, 0xd0, 0x78,
	0x64, 0xf9, 0xc8, 0x11, 0x7e, 0x48, 0xd1, 0x4a, 0x19, 0xdc, 0xf1, 0x13, 0xf8, 0x09, 0x94, 0xfc,
	0x0c, 0x4a, 0xca, 0x94, 0xa9, 0x34, 0xf1, 0xba, 0xa0, 0xa5, 0xa4, 0x64, 0xf6, 0xe1, 0x38, 0x94,
	0xe9, 0x76, 0xbf, 0xd7, 0x39, 0x67, 0x77, 0x25, 0x8c, 0x07, 0x01, 0x03, 0x2f, 0xcd, 0x92, 0x3c,
	0xb1, 0x1f, 0x8c, 0xe2, 0xfc, 0xbc, 0x18, 0x78, 0x61, 0x32, 0xf5, 0x8e, 0x8a, 0x59, 0x9c, 0x42,
	0xe6, 0x05, 0x2c, 0xf2, 0xd2, 0xf1, 0xc8, 0x63, 0x90, 0x5d, 0xc6, 0x21, 0x30, 0x4f, 0xe8, 0x57,
	0x9b, 0x9d, 0xff, 0x46, 0xc9, 0x28, 0x91, 0xe6, 0x5d, 0xb1, 0x52, 0x39, 0xed, 0x0e, 0xae, 0x9e,
	0x9d, 0xbd, 0xd8, 0x67, 0xb6, 0x8b, 0xab, 0x45, 0x11, 0x0f, 0x99, 0x63, 0xb4, 0x2a, 0x9d, 0x86,
	0xdf, 0xe0, 0xa5, 0xab, 0x18, 0xaa, 0xf0, 0xf6, 0x4f, 0x13, 0xd7, 0x8f, 0x63, 0x96, 0x9f, 0xa6,
	0x10, 0xda, 0x7d, 0x5c, 0x8b, 0xe2, 0x49, 0x0e, 0x99, 0xd2, 0x37, 0xbb, 0x7b, 0xde, 0x7d, 0x1b,
	0xf2, 0x7a, 0x32, 0xc0, 0x6f, 0xf2, 0xd2, 0xad, 0xa9, 0x35, 0xa3, 0xab, 0x54, 0xd1, 0xce, 0x24,
	0x9e, 0xc6, 0xb9, 0xb3, 0xd1, 0x32, 0x3a, 0x15, 0xd5, 0xce, 0xb1, 0x00, 0xa8, 0xc2, 0xed, 0x36,
	0x36, 0xa7, 0x41, 0x36, 0x86, 0xcc, 0xa9, 0xb4, 0x8c, 0x4e, 0xc3, 0xc7, 0xbc, 0x74, 0xcd, 0x13,
	0x89, 0x50, 0xcd, 0x08, 0xcd, 0x10, 0xf2, 0x20, 0x9e, 0x38, 0xff, 0xb4, 0x8c, 0x4e, 0x5d, 0x69,
	0xf6, 0x25, 0x42, 0x35, 0x23, 0x0a, 0x85, 0x49, 0x31, 0xcb, 0x9d, 0xaa, 0x94, 0xc8, 0x42, 0xcf,
	0x04, 0x40, 0x15, 0x2e, 0x42, 0xd8, 0x79, 0x90, 0xc1, 0xd0, 0x31, 0xd7, 0x21, 0xa7, 0x12, 0xa1,
	0x9a, 0xb1, 0x1f, 0xe1, 0x4d, 0xf8, 0x14, 0x4e, 0x8a, 0x21, 0xf4, 0xcf, 0x33, 0x88, 0x98, 0x53,
	0x93, 0xd2, 0x6d, 0x5e, 0xba, 0xd6, 0x81, 0x22, 0x0e, 0x05, 0x4e, 0x2d, 0xb8, 0xb3, 0xb3, 0x1f,
	0xe3, 0xad, 0x34, 0xc8, 0x60, 0x96, 0xf7, 0xa3, 0x8b, 0xfe, 0x2c, 0x98, 0x82, 0x53, 0x97, 0x87,
	0x2f, 0x7d, 0x6f, 0x24, 0xd3, 0x7b, 0xfb, 0x2a, 0x98, 0x02, 0xb5, 0x94, 0xae, 0x77, 0x21, 0x76,
	0xf6, 0x2e, 0x6e, 0x6a, 0x5f, 0x3e, 0x4f, 0xc1, 0x69, 0xc8, 0x03, 0xd8, 0xe2, 0xa5, 0x8b, 0x95,
	0xe9, 0xdd, 0x3c, 0x05, 0x8a, 0xd3, 0xdb, 0xb5, 0xdd, 0xc5, 0x3a, 0xa0, 0xaf, 0xee, 0x18, 0xcb,
	0x32, 0xff, 0xf2, 0xd2, 0x6d, 0x2a, 0x87, 0xba, 0x69, 0x9d, 0x7a, 0x26, 0x34, 0x62, 0xa6, 0x41,
	0x10, 0x8e, 0x33, 0x88, 0xb4, 0xa9, 0xb9, 0xee, 0xcd, 0x0f, 0xc2, 0x31, 0x85, 0x48, 0xb9, 0x2c,
	0x2d, 0x53, 0x36, 0x86, 0x1b, 0x6b, 0x8b, 0x25, 0xdf, 0xc6, 0xe1, 0xfd, 0xdf, 0xc6, 0xea, 0xa1,
	0x79, 0x54, 0xe7, 0x1e, 0xcc, 0xf2, 0x6c, 0xee, 0x5b, 0xbc, 0x74, 0xeb, 0xb7, 0x85, 0xeb, 0xb7,
	0x45, 0xbb, 0xd8, 0x4a, 0x06, 0x1f, 0x21, 0x5c, 0xcd, 0xb7, 0xb9, 0x9e, 0xef, 0xb5, 0xc4, 0xf5,
	0x7c, 0x4a, 0xa4, 0x3c, 0x6d, 0x6c, 0x46, 0x31, 0x4c, 0x86, 0xcc, 0xd9, 0x92, 0x6a, 0x79, 0xaf,
	0x3d, 0x89, 0x50, 0xcd, 0xec, 0xe4, 0x78, 0xf3, 0xaf, 0x06, 0xec, 0x6d, 0x5c, 0x19, 0xc3, 0xdc,
	0x31, 0xc4, 0x89, 0x53, 0xb1, 0xb4, 0x4f, 0x70, 0xf5, 0x32, 0x98, 0x14, 0x20, 0x1f, 0x6a, 0xb3,
	0xfb, 0xe4, 0xfe, 0xb3, 0xea, 0xaf, 0x4c, 0xa6, 0x3c, 0xdd, 0xd8, 0x33, 0xda, 0xcf, 0xb1, 0xa9,
	0xbe, 0x07, 0xfb, 0xff, 0x3b, 0xe5, 0xfc, 0x1a, 0x2f, 0xdd, 0xca, 0x4b, 0x98, 0xab, 0xba, 0x6d,
	0x6c, 0x4a, 0x07, 0x73, 0x36, 0xd6, 0xed, 0xbf, 0x97, 0x08, 0xd5, 0x8c, 0x7f, 0x74, 0xb5, 0x20,
	0xe8, 0x7a, 0x41, 0xd0, 0xcd, 0x82, 0xa0, 0x5f, 0x0b, 0x82, 0x7e, 0x2f, 0x08, 0xfa, 0xcc, 0x89,
	0xf1, 0x8d, 0x13, 0xf4, 0x9d, 0x13, 0xf4, 0x83, 0x13, 0x74, 0xc5, 0x09, 0xba, 0xe1, 0xc4, 0xf8,
	0xb2, 0x24, 0xe8, 0xeb, 0x92, 0xa0, 0xab, 0x25, 0x41, 0xd7, 0x4b, 0x82, 0x3e, 0x58, 0x77, 0xbb,
	0x1c, 0x98, 0xf2, 0x7f, 0xf1, 0xf0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0x57, 0x96, 0xc6,
	0x85, 0x04, 0x00, 0x00,
}

func (m *UUIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UUIDs) > 0 {
		for _, s := range m.UUIDs {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *ListSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovBase(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovBase(uint64(m.Limit))
	}
	l = len(m.Marker)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Detail {
		n += 2
	}
	if m.Count {
		n += 2
	}
	if m.Shared {
		n += 2
	}
	if m.ExcludeHrefs {
		n += 2
	}
	if len(m.ParentFQName) > 0 {
		for _, s := range m.ParentFQName {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if len(m.ParentUUIDs) > 0 {
		for _, s := range m.ParentUUIDs {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	if len(m.BackRefUUIDs) > 0 {
		for _, s := range m.BackRefUUIDs {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	if len(m.RefUUIDs) > 0 {
		for k, v := range m.RefUUIDs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBase(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBase(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBase(uint64(mapEntrySize))
		}
	}
	if len(m.ObjectUUIDs) > 0 {
		for _, s := range m.ObjectUUIDs {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func sovBase(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UUIDs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UUIDs{`,
		`UUIDs:` + fmt.Sprintf("%v", this.UUIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForRefUUIDs := make([]string, 0, len(this.RefUUIDs))
	for k, _ := range this.RefUUIDs {
		keysForRefUUIDs = append(keysForRefUUIDs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRefUUIDs)
	mapStringForRefUUIDs := "map[string]*UUIDs{"
	for _, k := range keysForRefUUIDs {
		mapStringForRefUUIDs += fmt.Sprintf("%v: %v,", k, this.RefUUIDs[k])
	}
	mapStringForRefUUIDs += "}"
	s := strings.Join([]string{`&ListSpec{`,
		`Filters:` + strings.Replace(fmt.Sprintf("%v", this.Filters), "Filter", "Filter", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Marker:` + fmt.Sprintf("%v", this.Marker) + `,`,
		`Detail:` + fmt.Sprintf("%v", this.Detail) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Shared:` + fmt.Sprintf("%v", this.Shared) + `,`,
		`ExcludeHrefs:` + fmt.Sprintf("%v", this.ExcludeHrefs) + `,`,
		`ParentFQName:` + fmt.Sprintf("%v", this.ParentFQName) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUIDs:` + fmt.Sprintf("%v", this.ParentUUIDs) + `,`,
		`BackRefUUIDs:` + fmt.Sprintf("%v", this.BackRefUUIDs) + `,`,
		`RefUUIDs:` + mapStringForRefUUIDs + `,`,
		`ObjectUUIDs:` + fmt.Sprintf("%v", this.ObjectUUIDs) + `,`,
		`Fields:` + fmt.Sprintf("%v", this.Fields) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Filter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Filter{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBase(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
