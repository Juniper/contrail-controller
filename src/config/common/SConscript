# -*- mode: python; -*-

#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#
Import('CfgmEnv')
env = CfgmEnv.Clone()

setup_sources = [
           'setup.py',
           'requirements.txt',
           'MANIFEST.in',
          ]

setup_sources_rules = []
for file in setup_sources:
    setup_sources_rules.append(env.Install(Dir('.'), File(file).srcnode()))

local_sources = [
                  '__init__.py',
                  'zkclient.py',
                  'exceptions.py',
                  'imid.py',
                  'svc_info.py',
                  'vnc_cpu_info.py',
                  'rest.py',
                  'vnc_plugin_base.py',
                  'vnc_extensions.py',
                 ]


local_sources_rules = []
for file in local_sources:
    local_sources_rules.append(env.Install("cfgm_common", File(file).srcnode()))

ifmap_sources = [ 'ifmap' ]
ifmap_sources_rules = []
for file in ifmap_sources:
    ifmap_sources_rules.append(env.Install("cfgm_common/", "#/third_party/ifmap-python-client/" + file))

pkg = [env.SandeshGenPy('#controller/src/config/uve/service_instance.sandesh', 'cfgm_common/uve/', False),
       env.SandeshGenPy('#controller/src/config/uve/vnc_api.sandesh', 'cfgm_common/uve/', False),
       env.SandeshGenPy('#controller/src/config/uve/virtual_machine.sandesh', 'cfgm_common/uve/', False),
       env.SandeshGenPy('#controller/src/config/uve/virtual_network.sandesh', 'cfgm_common/uve/', False),
       env.SandeshGenPy('#controller/src/config/uve/acl.sandesh', 'cfgm_common/uve/', False),
       env.SandeshGenPy('#controller/src/config/uve/vrouter.sandesh', 'cfgm_common/uve/', False),
       env.SandeshGenPy('#controller/src/config/uve/cfgm_cpuinfo.sandesh', 'cfgm_common/uve/', False),
]

# Generate the sandesh cpuinfo from base
cpu_info_pkg = env.SandeshGenPy('#controller/src/base/sandesh/cpuinfo.sandesh', 'cfgm_common/uve/cfgm_cpuinfo/', False)
connection_info_pkg = env.SandeshGenPy('#controller/src/base/sandesh/connection_info.sandesh', 'cfgm_common/uve/cfgm_cpuinfo/', False)
env.Depends(cpu_info_pkg, pkg)
env.Depends(connection_info_pkg, pkg)

rel_path = Dir('cfgm_common').path
def BuildInfoAction(target, source, env):
    env.GenerateBuildInfoPyCode(path=rel_path)
    
build_info_rules = [env.Command(target='buildinfo.py', source = None, action=BuildInfoAction)]

sdist_depends = []
sdist_depends.extend(setup_sources_rules)
sdist_depends.extend(local_sources_rules)
sdist_depends.extend(ifmap_sources_rules)
sdist_depends.extend(pkg)
sdist_depends.extend(cpu_info_pkg)
sdist_depends.extend(connection_info_pkg)
sdist_depends.extend(build_info_rules)

# TODO: deprecate
sdist_gen = env.Command('dist/cfgm_common-0.1dev.tar.gz',
                        'setup.py', 'python setup.py sdist', chdir=Dir('.'))

env.Depends(sdist_gen, sdist_depends)
env.Default(sdist_gen)

if 'install' in BUILD_TARGETS:
    install_cmd = env.Command(None, 'setup.py',
                              'python setup.py install %s' %
                              env['PYTHON_INSTALL_OPT'],
                              chdir = 1)
    env.Depends(install_cmd, sdist_depends)
    env.Alias('install', install_cmd)

