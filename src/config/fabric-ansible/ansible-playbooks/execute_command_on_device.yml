---
- name: Generic Device Operations entry point

  hosts: localhost
  connection: local

  vars:
    input: "{{ playbook_input.input }}"
    device_op: "{{ playbook_input.job_template_fqname[-1].split("_template")[0] }}"
    device_family: "{{ playbook_input.device_family }}"
    device_vendor: "{{ playbook_input.vendor }}"
    device_management_ip: "{{playbook_input.device_management_ip}}"
    device_username: "{{playbook_input.device_username}}"
    device_password: "{{playbook_input.device_password}}"
    prouter_name: "{{playbook_input.device_fqname[-1]}}"
    results: {}
    command_output: {}
    command_dir: "generic_device_operations/{{device_op}}"

  pre_tasks:
    - set_fact:
        job_ctx: "{{job_ctx|combine({'total_task_count':2, 'task_weightage_array':[20, 80] })}}"

    - name: create folder for json results
      file:
        path: "{{ command_dir }}"
        state: directory

  tasks:

    - name: call the appropriate command role
      block:
        - include_role:
            name: "command_{{device_op}}"
          vars:
            device_family: "{{device_family}}"
            device_vendor: "{{device_vendor}}"
            device_management_ip: "{{device_management_ip}}"
            device_username: "{{device_username}}"
            device_password: "{{device_password}}"
            command_dir: "{{command_dir}}"
      rescue:
        - name: Perform the necessary error handling
          include_tasks: error_handler.yml
          when: "command_resp.failed == true"
          vars:
            op_err_message: "Error while trying to execute command: {{command_resp.msg}}"
            jl_err_message: "Error while trying to execute command: {{command_resp.msg}}"

    - set_fact:
        output: {
              "status": "Success",
              "message": "Generic Device Operation for device: {{prouter_name}} successful"
            }

    - set_fact:
        results: "{{results|combine({
          "device_name": prouter_name,
          "command_output": command_output
        })}}"

    - name: insert/update in /tmp/<exec-id> file
      set_fact:
        write_resp: "{{job_ctx | report_playbook_results(results)}}"


    - name: Update Job log with generic device job completed status
      job_objectlog:
        job_ctx: "{{ job_ctx }}"
        status: "{{ JOBLOG_STATUS.IN_PROGRESS }}"
        message: "Completed generic device operation for {{prouter_name}}"
        device_name: "{{prouter_name}}"

