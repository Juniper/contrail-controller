# Generic feature config tasks

    - name: Initialize variables
      set_fact:
        found_template: False
        feature_needed: True
        configured_roles: []
        role_list: []
        feature_list: []
        vf_feature: "{{ device_vendor }}_{{ device_family }}_{{ feature }}"
        feature_role_dir: "./roles/cfg_{{ feature }}"
        hardware: "{{ device_vendor }}-{{ device_model }}"
        cfg_group: "__contrail_{{ feature }}__"

    - name: Check whether ztp suffix needs to be added to config group name
      set_fact:
        cfg_group: "__contrail_{{ feature }}_ztp__"
      when: add_ztp_suffix is defined and add_ztp_suffix == True and is_ztp

    - name: Check whether Jinja file exists for this vendor/family/feature
      stat:
        path: "{{ feature_role_dir }}/templates/{{ vf_feature }}.j2"
      register: p

    - name: Mark if found
      block:
        - set_fact:
            found_template: True
      when: p.stat.exists

    - name: Calculate feature name specific to the vendor only
      block:
        - set_fact:
            vf_feature: "{{ device_vendor }}_{{ feature }}"
        - name: Check whether Jinja file exists for this vendor/feature
          stat:
            path: "{{ feature_role_dir }}/templates/{{ vf_feature }}.j2"
          register: p1
        - name: Mark if found
          block:
            - set_fact:
                found_template: True
          when: p1.stat.exists
      when: found_template == False

    - set_fact:
        feature_template: "{{ vf_feature }}.j2"

    - name: Handle the null rb_role case
      set_fact:
        device_rb_roles: ['null']
      when: device_rb_roles == []

#    - name: Get supported role list
#      set_fact:
#        supported_role_list: "{{ item.value }}"
#      when: item.key == hardware
#      with_dict: "{{ supported_roles }}"

    - name: Calculate configured device role list
      set_fact:
        configured_roles: "{{ configured_roles }} + ['{{ item }}@{{ device_phy_role }}']"
      with_items: "{{ device_rb_roles }}"

#    - name: Cross-check configured list with supported list
#      set_fact:
#        role_list: "{{ role_list }} + [ '{{ item }}' ]"
#      when: item in supported_role_list
#      with_items: "{{ configured_roles }}"

    - name: Get the union of all features for all configured/supported roles
      set_fact:
        feature_list: "{{ feature_list }} + {{ item.value }}"
      when: item.key is in configured_roles
      with_dict: "{{ role_to_feature_mapping }}"

    - name: Skip if feature not needed for this role
      block:
        - debug: msg="Feature {{ feature }} not found in role, so skipping..."
        - set_fact:
            feature_needed: False
      when: feature not in feature_list

    - name: Skip underlay feature if fabric is not ztp'ed
      block:
        - debug: msg="Fabric is not ztp'ed, so skipping feature {{ feature }}..."
        - set_fact:
            feature_needed: False
      when: "'underlay' in {{ feature }} and not {{ is_ztp }}"

    - name: Check whether feature is needed
      debug: msg="Feature {{ vf_feature }} not found, skipping..."
      when: found_template == False

    - name: Generate feature config
      block:
        - debug: msg="Generate '{{ feature }}' for {{ device_vendor }} {{ device_family }} {{ device_name }}" verbosity=1
        - template:
            src: "feature_config.j2"
            dest: "{{ conf_dir }}/build_config/{{ vf_feature }}.conf"
          register: cmd_res
        - name: print command response
          debug: var=cmd_res verbosity=1
      rescue:
        - set_fact:
            output: {
              "status": "Failure",
              "message": "{{cmd_res.msg}}"
            }
        - name: print output
          debug: var=output verbosity=1
        - name: Appending job log for reading necessary info from database
          job_objectlog:
            job_ctx: "{{ job_ctx }}"
            message: "Failed to generate configuration: {{ vf_feature }}\n{{ cmd_res.msg }}"
            status: "{{ JOBLOG_STATUS.IN_PROGRESS }}"
            device_name: "{{ device_name }}"
        - meta: end_play
      when: feature_needed == True and found_template == True
