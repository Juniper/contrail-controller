---
    - name: Begin create BGP router
      job_objectlog:
        message: "Begin creating BGP router in Contrail."

    - name: call vnc to create bgp-router
      vnc_db_mod:
        object_type: "bgp_router"
        object_op: "create"
        object_dict: |
          {
            "parent_type": "routing-instance",
            "display_name": "{{prouter_info.fq_name[1]}}-bgp",
            "name": "{{prouter_info.fq_name[1]}}-bgp",
            "fq_name": [
              "default-domain",
              "default-project",
              "ip-fabric",
              "__default__",
              "{{prouter_info.fq_name[1]}}-bgp"
            ],
            "bgp_router_parameters": {
              "vendor": "{{ prouter_info.physical_router_vendor_name | default('Juniper')}}",
              "router_type": "router",
              "address": "{{ prouter_info.physical_router_loopback_ip }}",
              "identifier": "{{ prouter_info.physical_router_loopback_ip }}",
              "address_families": {
                "family": ["inet-vpn", "inet6-vpn", "route-target", "e-vpn"]
              },
              "autonomous_system": {{as_numbers[0]}},
              "hold_time": 90
            }
          }
        auth_token: "{{auth_token}}"
      register: bgp_info

    - name: Error handling if create BGP router fails
      include_tasks: error_handler.yml
      when: "bgp_info.failed == true"
      vars:
        op_err_message: "{{bgp_info.msg}}"
        jl_err_message: "Create BGP router failed: {{prouter_info.fq_name[1]}}-bgp failed."

    - name: call vnc to update physical-router
      vnc_db_mod:
        object_type: "physical_router"
        object_op: "ref_update"
        object_dict: |
          {
            "obj_uuid": "{{ prouter_info.uuid }}",
            "ref_type": "bgp-router",
            "ref_fqname": [
              "default-domain",
              "default-project",
              "ip-fabric",
              "__default__",
              "{{prouter_info.fq_name[1]}}-bgp"
            ]
          }
        auth_token: "{{auth_token}}"
      register: ref_update_results

    - name: Error handling if ref update to router fails
      include_tasks: error_handler.yml
      when: "ref_update_results.failed == true"
      vars:
        op_err_message: "{{ref_update_results.msg}}"
        jl_err_message: "Failed to add ref to P-Router with uuid: {{prouter_info.fq_name[1]}}."

    - name: Create BGP router completed
      job_objectlog:
        message: "BGP router was created and ref was added to the Prouter object."
