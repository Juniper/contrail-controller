{% set sys_config = device_abstract_config.get('system', None) %}
{% set sys_roles = sys_config.get('routing_bridging_roles', []) %}
set groups {{cfg_group}} policy-options policy-statement EVPN-LB term term1 from protocol evpn
set groups {{cfg_group}} policy-options policy-statement EVPN-LB term term1 then load-balance per-packet
set groups {{cfg_group}} routing-options forwarding-table export EVPN-LB
{%     for ri in device_abstract_config.get('routing_instances', []) %}
{%         set ns = namespace(ri_name='') %}
{%         set ri_name = ri.get('name', '')[:127] %}
{%         if (ri.get('virtual_network_is_internal') == true) and ('vrf' in ri.get('routing_instance_type', '')) %}
{%             set ri_name = ri.get('description', '')[:127] %}
{%         endif %}
{%         if ((ri.get('routing_instance_type') == 'virtual-switch') and (ri.get('comment') != 'PNF-Service-Chaining')) or (ri.get('virtual_network_is_internal') == true) or ((ri.get('routing_instance_type') == 'vrf') and (ri.get('is_public_network') == true)) %}
{%             set vrf_import = ri_name+'-import' %}
{%             set vrf_export = ri_name+'-export' %}
{%             for import_target in ri.get('import_targets', []) %}
{%                 set community_target = import_target.replace(':', '_') %}
set groups {{cfg_group}} policy-options policy-statement {{vrf_import}} term t1 from community {{community_target}}
set groups {{cfg_group}} policy-options community {{community_target}} members {{import_target | rtfilter}}
{%             endfor %}
set groups {{cfg_group}} policy-options policy-statement {{vrf_import}} term t1 then accept
{%             for export_target in ri.get('export_targets', []) %}
{%                 set community_target = export_target.replace(':', '_') %}
{# We need to export the evpn family routes in case of non-public LR. For DC-GW we use public LR and we need the L3VPN routes. #}
{%                 if ri.get('virtual_network_is_internal') == true and ri.get('is_public_network') == false %}
set groups {{cfg_group}} policy-options policy-statement {{vrf_export}} term t1 to family evpn
{%                 endif %}
set groups {{cfg_group}} policy-options policy-statement {{vrf_export}} term t1 then community add {{community_target}}
set groups {{cfg_group}} policy-options community {{community_target}} members {{export_target | rtfilter}}
{%             endfor %}
set groups {{cfg_group}} policy-options policy-statement {{vrf_export}} term t1 then accept
{%         endif %}
{%     endfor %}
{%     for bgp_elem in device_abstract_config.get('features', {}).get('overlay-bgp',{}).get('bgp', []) %}
{%         set families = bgp_elem.get('families', []) %}
{%         for fam in families %}
{%             if fam == 'evpn' %}
{%                 set route_distinguisher = bgp_elem.get('ip_address') %}
{%                 set as_number = bgp_elem.get('autonomous_system') %}
{%                 if (as_number|int) <= 65535 %}
{%                     set esi_rt = (as_number|string) + ':7999999' %}
{%                 else %}
{%                     set esi_rt = (as_number|string) + 'L:7999' %}
{%                 endif %}
set groups {{cfg_group}} policy-options community community-esi-in members target:{{esi_rt}}
set groups {{cfg_group}} policy-options policy-statement import-evpn term esi-in from community community-esi-in
set groups {{cfg_group}} policy-options policy-statement import-evpn term esi-in then accept
set groups {{cfg_group}} policy-options policy-statement import-evpn term default-term then reject
{%                 for ri in device_abstract_config.get('routing_instances', []) %}
{%                     set ri_vn_mode = ri.get('virtual_network_mode', '') %}
{%                     if ri.get('routing_instance_type', '') == 'virtual-switch'  %}
{%                         set contrail_l2_ri = '_contrail-l2' %}
{%                         set l2_vrf_import = ri.name+'-import' %}
{%                         set l2_vrf_export = ri.name+'-export' %}
{%                         set bridge_domain_name = 'bd-'+(ri.vxlan_id|string) %}
{%                         set irb_interface = 'irb.'+(ri.virtual_network_id|string)  %}
{%                         set vxlan_id  = ri.get('vxlan_id') %}
{%                         set ri_type  = ri.get('routing_instance_type')  %}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} vtep-source-interface lo0.0
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} instance-type {{ri_type}}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} route-distinguisher {{route_distinguisher}}:7999
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} vrf-target target:{{esi_rt}}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} vrf-import import-evpn
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} protocols evpn encapsulation vxlan
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} protocols evpn extended-vni-list all
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} protocols evpn default-gateway no-gateway-community
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} bridge-domains {{bridge_domain_name}} routing-interface {{irb_interface}}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} vrf-import {{l2_vrf_import}}
{%                         for vlan in device_abstract_config.get('vlans', []) %}
{%                             set vlan_vxlan_id = vlan.get('vxlan_id','') %}
{%                             set vlan_name = vlan.get('name','') %}
{%                             set vlan_id = vlan.get('vlan_id','none') %}
{%                             if vxlan_id|int() == vlan_vxlan_id|int() %}
{%                                 set l2_ifs = vlan.get('interfaces', []) %}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} bridge-domains {{vlan_name}} vlan-id {{vlan_id}}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} bridge-domains {{vlan_name}} description "{{vlan.description}}"
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} bridge-domains {{vlan_name}} vxlan vni {{vxlan_id}}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} protocols evpn extended-vni-list {{vxlan_id}}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} bridge-domains {{vlan_name}} vxlan ingress-node-replication
{%                                 for l2_if in l2_ifs %}
{%                                     if not l2_if.name.startswith('irb') %}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} bridge-domains {{vlan_name}} interface {{l2_if.name}}
{%                                     endif %}
{%                                 endfor %}
{%                             endif %}
{%                         endfor %}
{%                         if ('CRB-MCAST-Gateway' in sys_roles) %}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} bridge-domains {{bridge_domain_name}} protocols igmp-snooping proxy
{%                         endif %}
{%                         if (vxlan_id != '') and (ri.get('routing_instance_type', '') == 'virtual-switch') %}
{%                             for export_target in ri.get('export_targets', []) %}
set groups {{cfg_group}} routing-instances {{contrail_l2_ri}} protocols evpn vni-options vni {{vxlan_id}} vrf-target {{export_target | rtfilter}}
{%                             endfor %}
{%                         endif %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endfor %}
