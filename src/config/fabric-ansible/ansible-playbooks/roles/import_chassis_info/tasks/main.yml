- name: Encapsulate all the operations in a block rescue for error handling
  block:
    - name: check to see if the ansible file for the vendor and family exists
      stat:
        path: "{{role_path}}/tasks/{{prouter_vendor}}_{{prouter_family}}.yml"
      register: p

    - name: Execute commands on device
      block:
        - include_tasks: "{{prouter_vendor}}_{{prouter_family}}.yml"
        - name: set the jinja template file path
          set_fact:
            jinja_file_path: "../templates/{{prouter_vendor}}_{{prouter_family}}.j2"
      when: p.stat.exists == True

    # this is assuming device family does not matter
    - name: Execute commands on device from default location
      block:
        - include_tasks: "{{prouter_vendor}}.yml"
        - name: set the jinja template file path
          set_fact:
            jinja_file_path: "../templates/{{prouter_vendor}}.j2"
      when: p.stat.exists == False

    # validate schema including to check if the device_info is set as part of the ansible file
    - name: Validate Input Schema -- device_info
      set_fact:
        schema_validation_resp: "{{'input_schema' | validate_schema(schema_file, device_info, prouter_name)}}"

    - name: Perform the necessary error handling when there is a schema validation error
      include_tasks: error_handler.yml
      when: "'status' in schema_validation_resp and schema_validation_resp.status == 'failure'"
      vars:
        op_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"
        jl_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"

    - name: parse output info obtained to get appropriate chassis payload format. Ensure Jinja template does not have any new lines
      set_fact:
        chassis_payload: "{{lookup('template', jinja_file_path)}}"
      register: parser_output

    # validate schema to check if the interfaces payload is of the correct output schema
    - name: Validate Output Schema -- chassis_payload
      set_fact:
        schema_validation_resp: "{{'output_schema' | validate_schema(schema_file, chassis_payload, prouter_name)}}"

    - name: Perform the necessary error handling when there is a schema validation error
      include_tasks: error_handler.yml
      when: "'status' in schema_validation_resp and schema_validation_resp.status == 'failure'"
      vars:
        op_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"
        jl_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"

    # Call the vnc filter plugin for chassis import
    - name: Call the vnc filter plugin for chassis import
      set_fact:
        chassis_info_import_result: "{{job_ctx | import_chassis_info(prouter_name, chassis_payload, prouter_vendor) }}"

    - name: Set the chassis_import response
      set_fact:
        chassis_import_resp: "{{chassis_info_import_result.chassis_import_resp}}"

    - name: Handle any exception or error cases
      include_tasks: error_handler.yml
      when: "'status' in chassis_info_import_result and chassis_info_import_result.status == 'failure'"
      vars:
        op_err_message: "Unable to import chassis info due to the following error: {{ chassis_info_import_result.error_msg }}"
        jl_err_message: "Failed to import chassis info due to error: {{ chassis_info_import_result.error_msg }}. Here is the chassis_import_log: {{chassis_info_import_result.chassis_import_log}}"

    - name: Update job log with percentage
      include_tasks: percentage_update.yml
      vars:
        current_index: 3
        jl_message: "Imported chassis mac address(es) for {{prouter_vendor}} device, {{prouter_name}}:\n   - {{chassis_import_resp.chassis_mac_ids }} "
        jl_details: {
                      "warning_info": "{{chassis_import_resp.warning_info}}"
                    }

  rescue:
    - name: Perform the necessary error handling while trying to execute command
      include_tasks: error_handler.yml
      when: "'failed' in execute_command_resp and execute_command_resp.failed == true"
      vars:
        op_err_message: "Error while trying to execute command on {{prouter_vendor}} device, {{prouter_name}}: {{execute_command_resp.msg}}"
        jl_err_message: "Error while trying to execute command on {{prouter_vendor}} device, {{prouter_name}}: {{execute_command_resp.msg}}"

    - name: Perform the necessary error handling when parsing the device_info
      include_tasks: error_handler.yml
      when: "'failed' in parser_output and parser_output.failed == true"
      vars:
        op_err_message: "Error while parsing the chassis information on {{prouter_vendor}} device, {{prouter_name}}: {{parser_output.msg}}"
        jl_err_message: "Error while parsing the chassis information on {{prouter_vendor}} device, {{prouter_name}}: {{parser_output.msg}}"

    # this is when the playbook has to end for other unhandled failures
    - meta: end_play
