- name: Execute commands on a Juniper Device
  block:
    - juniper_junos_config:
        retrieve: 'committed'
        format: xml
        filter: interfaces
        provider:
          host: "{{junos_host}}"
          user: "{{junos_username}}"
          passwd: "{{junos_password}}"
          port: 22
          timeout: "{{JUNOS_COMMAND_TIMEOUT|int}}"
      register: interface_info
  rescue:
    - name: Perform the necessary error handling
      include_tasks: error_handler.yml
      when: "interface_info.failed == true"
      vars:
        op_err_message: "{{interface_info.msg}}"
        jl_err_message: "Execute 'show configuration interfaces' command on Juniper Device: {{prouter_name}} failed; see result for more details"

- name: settings facts
  set_fact:
    interface_list: "{{interface_info|json_query('config_parsed.configuration.interfaces.interface')}}"

- name: Update Job log with 'show configuration interfaces' command successs
  job_objectlog:
    job_ctx: "{{ job_ctx }}"
    status: "{{ JOBLOG_STATUS.IN_PROGRESS }}"
    message: "Execute 'show configuration interfaces' command on Juniper Device {{prouter_name}} succeeded"

- name: Execute commands on a Juniper Device
  block:
    - juniper_junos_command:
        commands: "show interfaces"
        formats: xml
        provider:
          host: "{{junos_host}}"
          user: "{{junos_username}}"
          passwd: "{{junos_password}}"
          port: 22
          timeout: "{{JUNOS_COMMAND_TIMEOUT|int}}"
      register: interface_info
  rescue:
    - name: Perform the necessary error handling
      include_tasks: error_handler.yml
      when: "interface_info.failed == true"
      vars:
        op_err_message: "{{interface_info.msg}}"
        jl_err_message: "Execute 'show interfaces' command on Juniper Device: {{prouter_name}} failed; see result for more details"

- set_fact:
    interface_list_new: "{{interface_info|json_query('parsed_output.\"interface-information\".\"physical-interface\"')}}"

- name: Update Job log with 'show interfaces' command successs
  job_objectlog:
    job_ctx: "{{ job_ctx }}"
    status: "{{ JOBLOG_STATUS.IN_PROGRESS }}"
    message: "Execute 'show interfaces' command on Juniper Device {{prouter_name}} succeeded; Obtained {{interface_list_new|length}} physical interfaces from device; starting import ..."

- name: Sample physical and logical interfaces payload from runtime interfaces
  set_fact:
    runtime_interface_payloads: |
      {%- set phy_interfaces_payloads = []                                              %}
      {%- set log_interfaces_payloads = []                                              %}
      {%- for phy_interface in interface_list_new                                       %}
      {%-     set phy_interface_payload = {}                                            %}
      {%-     set phy_interface_name = phy_interface.name|replace(':', '_')             %}
      {%-     set x=phy_interface_payload.update({"parent_type": "physical-router",
                                                  "fq_name": ["default-global-system-config",
                                                              "{{prouter_name}}",
                                                              phy_interface_name
                                                             ],
                                                  "display_name": phy_interface.name})  %}
      {%-     set y=phy_interfaces_payloads.append(phy_interface_payload)               %}
      {%-     if 'logical-interface' in phy_interface                                   %}
      {%-         if phy_interface['logical-interface'] is mapping                      %}
      {%-             set log_units = [phy_interface['logical-interface']]              %}
      {%-         else                                                                  %}
      {%-             set log_units = phy_interface['logical-interface']                %}
      {%-         endif                                                                 %}
      {%-         for log_unit in log_units                                             %}
      {%-             set log_interface_payload = {}                                    %}
      {%-             set x=log_interface_payload.update({"parent_type":"physical-interface",
                                                          "fq_name": ["default-global-system-config",
                                                                      "{{prouter_name}}",
                                                                      phy_interface_name,
                                                                      log_unit.name|replace(':', '_')
                                                                     ],
                                                          "display_name": log_unit.name})%}
      {%-             if 'address-family' in log_unit                                   %}
      {%-                 set x=log_interface_payload.update({"logical_interface_type": "l3"}) %}
      {%-                 if log_unit['address-family'] is mapping                      %}
      {%-                     set address_fmly_list = [log_unit['address-family']]      %}
      {%-                 else                                                          %}
      {%-                     set address_fmly_list = log_unit['address-family']        %}
      {%-                 endif                                                         %}
      {%-                 for address_fmly in address_fmly_list                         %}
      {%-                     if address_fmly['address-family-name'] == 'eth-switch'    %}
      {%-                         set x=log_interface_payload.update({"logical_interface_type": "l2"}) %}
      {%-                     endif                                                     %}
      {%-                 endfor                                                        %}
      {%-             endif                                                             %}
      {%-             set y=log_interfaces_payloads.append(log_interface_payload)       %}
      {%-         endfor                                                                %}
      {%-     endif%}
      {%- endfor%}
      {
       "phy_interfaces_payload": {{phy_interfaces_payloads|to_json}},
       "log_interfaces_payload": {{log_interfaces_payloads|to_json}}
      }


- name: Sample physical and logical interfaces payload from configured interfaces
  set_fact:
    conf_interface_payloads: |
      {%- set init_dict = {"lo0_ip_add": "", "lo0_found": False}                        %}
      {%- set phy_interfaces_payloads = []                                              %}
      {%- set log_interfaces_payloads = []                                              %}
      {%- for phy_interface in interface_list                                           %}
      {%-     set phy_interface_payload = {}                                            %}
      {%-     set phy_interface_name = phy_interface.name|replace(':', '_')             %}
      {%-     set x=phy_interface_payload.update({"parent_type": "physical-router",
                                                  "fq_name": ["default-global-system-config",
                                                              "{{prouter_name}}",
                                                              phy_interface_name
                                                             ],
                                                  "display_name": phy_interface.name})  %}
      {%-     set y=phy_interfaces_payloads.append(phy_interface_payload)               %}
      {%-     if 'unit' in phy_interface                                                %}
      {%-         if phy_interface.unit is mapping                                      %}
      {%-             set log_units = [phy_interface.unit]                              %}
      {%-         else                                                                  %}
      {%-             set log_units = phy_interface.unit                                %}
      {%-         endif                                                                 %}
      {%-         for log_unit in log_units                                             %}
      {%-             set log_interface_payload = {}                                    %}
      {%-             set x=log_interface_payload.update({"parent_type":"physical-interface",
                                                          "fq_name": ["default-global-system-config",
                                                                      "{{prouter_name}}",
                                                                      phy_interface_name,
                                                                      phy_interface_name+"."+log_unit.name
                                                                     ],
                                                          "display_name": phy_interface.name+"."+log_unit.name})%}
      {%-             if 'family' in log_unit                                           %}
      {%-                 if 'ethernet-switching' in log_unit.family                    %}
      {%-                     set x=log_interface_payload.update({"logical_interface_type": "l2"})%}
      {%-                 else                                                          %}
      {%-                     set x=log_interface_payload.update({"logical_interface_type": "l3"})%}
      {%-                     if 'inet' in log_unit.family and 'address' in log_unit.family.inet and phy_interface_name == 'lo0'%}
      {%-                         if log_unit.family.inet.address is mapping            %}
      {%-                             set lo0_add_list = [log_unit.family.inet.address] %}
      {%-                         else                                                  %}
      {%-                             set lo0_add_list = log_unit.family.inet.address   %}
      {%-                         endif                                                 %}
      {%-                         for lo0_add in lo0_add_list                           %}
      {%-                             if lo0_add.name != "127.0.0.1/32" and not init_dict.lo0_found %}
      {%-                                 set x=init_dict.update({"lo0_found": True, "lo0_ip_add": lo0_add.name.split('/')[0]}) %}
      {%-                             endif                                             %}
      {%-                         endfor                                                %}
      {%-                     endif                                                     %}
      {%-                 endif                                                         %}
      {%-             endif                                                             %}
      {%-             if 'vlan-id' in log_unit                                          %}
      {%-                 set x=log_interface_payload.update({"logical_interface_vlan_tag": log_unit['vlan-id']})%}
      {%-             endif                                                             %}
      {%-             set y=log_interfaces_payloads.append(log_interface_payload)       %}
      {%-         endfor                                                                %}
      {%-     endif                                                                     %}
      {%- endfor                                                                        %}
      {
       "phy_interfaces_payload": {{phy_interfaces_payloads|to_json}},
       "log_interfaces_payload": {{log_interfaces_payloads|to_json}},
       "lo_interface_ip": {{init_dict|to_json}}
      }

- set_fact:
    phy_int_payload: "{{runtime_interface_payloads.phy_interfaces_payload}}+{{conf_interface_payloads.phy_interfaces_payload}}"

- set_fact:
    log_int_payload: "{{runtime_interface_payloads.log_interfaces_payload}}+{{conf_interface_payloads.log_interfaces_payload}}"

- set_fact:
    dataplane_ip_dict: "{{conf_interface_payloads.lo_interface_ip}}"

- name: Bulk Create Phy interfaces first
  vnc_db_mod:
    job_ctx: "{{ job_ctx }}"
    object_type: "physical_interface"
    object_op: "bulk_create"
    object_list: "{{phy_int_payload}}"
  register: bulk_create_phy_int_resp

- name: Bulk Create Log interfaces now
  vnc_db_mod:
    job_ctx: "{{ job_ctx }}"
    object_type: "logical_interface"
    object_op: "bulk_create"
    object_list: "{{log_int_payload}}"
  register: bulk_create_log_int_resp

- set_fact:
    bulk_create_phy_int_resp_set: "{{bulk_create_phy_int_resp.list_uuids|unique}}"
    bulk_create_log_int_resp_set: "{{bulk_create_log_int_resp.list_uuids|unique}}"

- name: update the dataplane ip
  vnc_db_mod:
    job_ctx: "{{ job_ctx }}"
    object_type: "physical_router"
    object_op: "update"
    object_dict: |
      {
        "uuid": "{{playbook_input.device_id}}",
        "physical_router_dataplane_ip": "{{dataplane_ip_dict.lo0_ip_add}}",
        "physical_router_loopback_ip": "{{dataplane_ip_dict.lo0_ip_add}}"
      }
  register: upd_resp_lo0
  when: dataplane_ip_dict.lo0_found

