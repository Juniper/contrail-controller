- name: Execute commands on a Juniper Device
  block:
    - junos_command:
        commands:
          - show configuration interfaces
          - show interfaces 
        display: xml
        provider:
          host: "{{junos_host}}"
          username: "{{junos_username}}"
          password: "{{junos_password}}"
          port: 22
          timeout: "{{JUNOS_COMMAND_TIMEOUT|int}}"
      register: interface_info
  rescue:
    - name: Perform the necessary error handling
      include_tasks: error_handler.yml
      when: "interface_info.failed == true"
      vars:
        op_err_message: "{{interface_info.msg}}"
        jl_err_message: "Error while obtaining interface information from Juniper device: {{interface_info.msg}}"

- name: settings facts
  set_fact:
    interface_list: "{{interface_info|json_query('output[0].\"rpc-reply\".\"configuration\".\"interfaces\".\"interface\"[*]')}}"
    interface_list_new: "{{interface_info|json_query('output[1].\"rpc-reply\".\"interface-information\".\"physical-interface\"[*]')}}"

- name: Update job log with percentage
  include_tasks: percentage_update.yml
  vars:
    current_index: 2
    jl_message: "Obtained interface information from the Juniper device [#PhysicalInterfaces: {{interface_list_new|length}}]; starting import ..."

- name: Get the pattern object
  set_fact:
    pattern_obj: |
      {%- set regex_list = []                                                           %}
      {%- for filter in pb_input.get('interface_filters', {})                           %}
      {%-     if filter.get('op') == "regex"                                            %}
      {%-         set x=regex_list.append(filter.get('expr', None))                     %}
      {%-     endif                                                                     %}
      {%- endfor                                                                        %}
      {
       "regex_list": {{regex_list|to_json}}
      }

- name: get the regex str separated by |
  set_fact:
    regex_str: "{{pattern_obj.regex_list|join('|')}}"

- set_fact:
    rt_interfaces: "{{interface_list_new | junos_interface_info(prouter_name, regex_str)}}"
    cf_interfaces: "{{interface_list | junos_conf_interface_info(prouter_name, regex_str)}}"

- set_fact:
    phy_int_payload: "{{rt_interfaces.phy_interfaces_payload}}+{{cf_interfaces.phy_interfaces_payload}}"
    log_int_payload: "{{rt_interfaces.log_interfaces_payload}}+{{cf_interfaces.log_interfaces_payload}}"

- name: Get the existing physical interfaces under the prouter
  vnc_db_mod:
    job_ctx: "{{job_ctx}}"
    object_type: "physical_interface"
    object_op: "list"
    object_dict: {"parent_fq_name": "{{prouter_fqname}}"}
  register: existing_phy_interface_list

- set_fact:
    existing_phy_intf_fqname_list: "{{existing_phy_interface_list | json_query('obj.\"physical-interfaces\"[*].fq_name')}}"

- name: Get the existing logical interfaces under the prouter
  vnc_db_mod:
    job_ctx: "{{job_ctx}}"
    object_type: "logical_interface"
    object_op: "bulk_query"
    object_list: "{{existing_phy_intf_fqname_list}}"
  register: existing_log_interface_list

- set_fact:
    interfaces_to_delete: "{{existing_phy_intf_fqname_list | compare_and_return_payload_for_del(existing_log_interface_list, phy_int_payload, log_int_payload)}}"

- set_fact:
    dataplane_ip: "{{cf_interfaces.lo_interface_ip}}"

- name: Bulk Create Phy interfaces first
  vnc_db_mod:
    job_ctx: "{{ job_ctx }}"
    object_type: "physical_interface"
    object_op: "bulk_create"
    object_list: "{{phy_int_payload}}"
  register: bulk_create_phy_int_resp

- name: Bulk Create Log interfaces now
  vnc_db_mod:
    job_ctx: "{{ job_ctx }}"
    object_type: "logical_interface"
    object_op: "bulk_create"
    object_list: "{{log_int_payload}}"
  register: bulk_create_log_int_resp

- set_fact:
    bulk_create_phy_int_resp_set: "{{bulk_create_phy_int_resp.list_uuids|unique}}"
    bulk_create_log_int_resp_set: "{{bulk_create_log_int_resp.list_uuids|unique}}"

- debug:
    msg: "{{interfaces_to_delete}}"

- name: Bulk Delete log interfaces first
  vnc_db_mod:
    job_ctx: "{{ job_ctx }}"
    object_type: "logical_interface"
    object_op: "bulk_delete"
    object_list: "{{interfaces_to_delete.log_int_payload}}"

- name: Bulk Delete Phy interfaces now
  vnc_db_mod:
    job_ctx: "{{ job_ctx }}"
    object_type: "physical_interface"
    object_op: "bulk_delete"
    object_list: "{{interfaces_to_delete.phy_int_payload}}"

- name: update the dataplane ip
  block:
    - vnc_db_mod:
        job_ctx: "{{ job_ctx }}"
        object_type: "physical_router"
        object_op: "update"
        object_dict: |
          {
            "uuid": "{{playbook_input.device_id}}",
            "physical_router_dataplane_ip": "{{dataplane_ip}}",
            "physical_router_loopback_ip": "{{dataplane_ip}}"
          }
      register: upd_resp_lo0
    - set_fact:
        upd_dataplane_ip_mesg: "; Updated device with dataplane ip [{{dataplane_ip}}]"
  when: dataplane_ip != ''

- name: Update job log with percentage
  include_tasks: percentage_update.yml
  vars:
    current_index: 3
    jl_message: "Imported {{bulk_create_phy_int_resp_set|length}} physical interfaces and {{bulk_create_log_int_resp_set|length}} logical interfaces{{upd_dataplane_ip_mesg}}"
