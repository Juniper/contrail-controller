---

- name: Determine whether insert/update/delete operation
  set_fact:
    dhcp_state: "{{ 'present' if ztp_create else 'absent' }}"

- name: Check whether dhcpd directory exists
  stat:
    path: "{{ DHCPD_CONFIG_DIR }}"
  register: dhcp_dir

- name: Check whether dhcpd conf file exists
  stat:
    path: "{{ DHCPD_CONFIG_PATH }}"
  register: dhcp_file

- name: If DHCP directory does not exist, just bail
  block:
    - debug: msg="dhcpd directory does not exist, skipping..."
    - set_fact:
        dhcp_output: {
          "status": "{{ 'Failure' if ztp_create else 'Success' }}",
          "results": {"jl_message": "Warning: dhcpd server not installed"}
        }
    - meta: end_play
  when: dhcp_dir.stat.exists == False

- name: Insert/update global section in DHCP config file on remote host
  block:
    - name: Insert/update global section in config file on remote host
      blockinfile:
        block: "{{ lookup('file', dhcp_gconf_path) if dhcp_gconf_path else '' }}"
        dest: "{{ DHCPD_CONFIG_PATH }}"
        marker: '########## {mark} GLOBAL BLOCK ##########'
        state: "{{ dhcp_state }}"
        create: yes
      register: cmd_res
  rescue:
    - set_fact:
        dhcp_output: {
          "status": "Failure",
          "results": {"jl_message": "Failed to insert/update global dhcp config"},
          "message": "{{cmd_res.msg}}"
        }
    - name: print output
      debug: var=dhcp_output verbosity=1
    - meta: end_play
  when: dhcp_state == 'present'

- name: Insert/update/delete subsection in DHCP config file on remote host
  block:
    - name: Insert/update/delete subsection in DHCP config file on remote host
      blockinfile:
        block: "{{ lookup('file', dhcp_conf_path) if dhcp_conf_path else '' }}"
        dest: "{{ DHCPD_CONFIG_PATH }}"
        marker: "{{['########## {mark} SUBSECTION BLOCK', fabric_fq_name[-1], '##########']|join(' ')}}"
        state: "{{ dhcp_state }}"
        create: yes
      register: cmd_res
  rescue:
    - set_fact:
        dhcp_output: {
          "status": "Failure",
          "results": {"jl_message": "Failed to insert/update/delete dhcp config"},
          "message": "{{cmd_res.msg}}"
        }
    - name: print output
      debug: var=dhcp_output verbosity=1
    - meta: end_play
  when: dhcp_file.stat.exists == True

- name: Check for absence of subsections
  block:
    - name: read the dhcp config file
      shell: "cat {{ DHCPD_CONFIG_PATH }}"
      register: config_file
    - set_fact:
        subsections_present: True
      when: config_file.stdout.find('SUBSECTION BLOCK') != -1
  rescue:
    - set_fact:
        dhcp_output: {
          "status": "Failure",
          "results": {"jl_message": "Failed to read dhcp config"},
          "message": "{{cmd_res.msg}}"
        }
    - name: print output
      debug: var=dhcp_output verbosity=1
    - meta: end_play
  when: dhcp_file.stat.exists == True

- name: Delete global section in DHCP config file on remote host if no more subsections
  block:
    - name: Delete global section in config file on remote host
      blockinfile:
        block: "{{ lookup('file', dhcp_gconf_path) if dhcp_gconf_path else '' }}"
        dest: "{{ DHCPD_CONFIG_PATH }}"
        marker: '########## {mark} GLOBAL BLOCK ##########'
        state: "{{ dhcp_state }}"
        create: yes
      register: cmd_res
  rescue:
    - set_fact:
        dhcp_output: {
          "status": "Failure",
          "results": {"jl_message": "Failed to delete global dhcp config"},
          "message": "{{cmd_res.msg}}"
        }
    - name: print output
      debug: var=dhcp_output verbosity=1
    - meta: end_play
  when: dhcp_file.stat.exists == True and subsections_present is undefined

- name: Clear contents of dhcp leases file
  block:
    - copy:
        content: ""
        dest: "{{ DHCPD_LEASES_PATH }}"
        force: yes
      register: cmd_res
  rescue:
    - set_fact:
        dhcp_output: {
          "status": "Failure",
          "results": {"jl_message": "Failed to clear DHCP leases file"},
          "message": "{{cmd_res.msg}}"
        }
    - name: print output
      debug: var=dhcp_output verbosity=1
    - meta: end_play

- name: Restart or stop dhcpd docker
  block:
    - name: Restart/stop dhcpd docker
      docker_service:
        project_src: /etc/contrail/dhcp
        state: present
        restarted: "{{ 'True' if subsections_present is defined else 'False' }}"
        stopped: "{{ 'False' if subsections_present is defined else 'True' }}"
      register: cmd_res
  rescue:
    - set_fact:
        dhcp_output: {
          "status": "Failure",
          "results": {"jl_message": "Failed to restart/stop dhcpd"},
          "message": "{{cmd_res.msg}}"
        }
    - name: print output
      debug: var=dhcp_output verbosity=1
    - meta: end_play
  when: dhcp_file.stat.exists == True

- name: Read DHCP lease table and return addresses of devices contained in IPAM subnets
  block:
    - name: Read DHCP lease table and return addresses of devices contained in IPAM subnets
      dhcp_leases:
        device_count: "{{ device_count }}"
        ztp_config: "{{ ztp_config }}"
        file_path: "{{ DHCPD_LEASES_PATH }}"
      register: cmd_res
    - name: Save device ip table
      set_fact:
        dhcp_output: {
          "status": "Success",
          "results": "{{cmd_res}}",
          "device_list": "{{cmd_res.device_list}}"
        }
  rescue:
    - set_fact:
        dhcp_output: {
          "status": "Failure",
          "results": {"jl_message": "Failed to generate IP table from DHCP lease table"},
          "message": "{{cmd_res.msg}}"
        }
    - name: print output
      debug: var=dhcp_output verbosity=1
    - meta: end_play
  when: dhcp_state == 'present'

