#Playbook to deactivate maintenance mode on device.

- name: Deactivate maintenance mode on device {{pr_name}}
  set_fact:
    device_maintenance_mode: "deactivate"

# Push deactivation config

- include_role:
    name: "maintenance_mode_config_push"

- name: Check health of the device after deactivation of maintenance mode
  include_role:
    name: device_health_check
  vars:
    snap_test_pfx: "{{pr_vendor}}_snapshot_1"
    snap_action: "snap_post"

- name: Update job logs with health report
  job_objectlog:
    job_ctx: "{{ job_ctx }}"
    message: "Health report for {{prouter_name}} : {{device_health_report}}"
    status: "{{ JOBLOG_STATUS.IN_PROGRESS }}"

- name: Compare the snapshots  # add retry logic, set fact to use appropriate templates for health check
  include_role:
    name: device_health_check
  vars:
    snap_test_pfx: "{{pr_vendor}}_health_check_1"
    snap_action: "snapcheck"

- name: Update job log with percentage
  include_tasks: percentage_update.yml
  vars:
    jl_message: "Hitless image upgrade workflow completed on device {{prouter_name}}."

- name: Update prouter logs with maintenance mode status
  prouter_objectlog:
    prouter_fqname: "{{pr_fqname}}"
    onboarding_state: "{{DEVICE_STATE.HITLESS_IMAGE_UPGRADE_SUCCESSFUL}}"
    job_ctx: "{{job_ctx}}"
  when: deactivate_due_to_errors is not defined

- name: Get next batch of devices and return to job manager
  set_fact:
    next_batch: "{{ job_ctx | hitless_next_batch(upgrade_plan, pr_uuid)}}"
