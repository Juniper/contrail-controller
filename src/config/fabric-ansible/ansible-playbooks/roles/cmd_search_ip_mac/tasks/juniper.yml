- import_role:
    name: Juniper.junos

- name: Read physcial router to get loopback ip
  vnc_db_mod:
    job_ctx: "{{ job_ctx }}"
    object_type: "physical_router"
    object_op: "read"
    object_dict: {"uuid": "{{device_uuid}}"}
  register: prouter_obj

- name: Set the loopback ip
  set_fact:
    device_loopback_ip: "{{prouter_obj.obj.physical_router_loopback_ip}}"

- name: Execute commands on a Juniper Device to get interfaces for ERB usecase
  juniper_junos_command:
    commands:
      - show evpn database
    display: xml
    provider:
      host: "{{device_management_ip}}"
      username: "{{device_username}}"
      password: "{{device_password}}"
      port: 22
      timeout: "{{JUNOS_COMMAND_TIMEOUT|int}}"
  register: evpn_database_command_resp

- name: settings facts
  set_fact:
    mgmt_ips: []
    evpn_database_command_resp: "{{evpn_database_command_resp|json_query('parsed_output.\"evpn-database-information\".\"evpn-database-instance\"')}}"

- name: Generate maintenance mode config to be pushed on device {{prouter_name}}
  block:
    - name: Generate script file on local host
      template:
        src: '../templates/juniper_active_source_details.j2'
        dest: "{{ command_dir }}/{{device_management_ip}}.json"
      register: active_source_details
  rescue:
    - name: Perform necessary error handling
      include_tasks: error_handler.yml
      vars:
        op_err_message: "{{cmd_res.msg}}"
        jl_err_message: "Failed to generate info"

- name: Set the source_details from template
  set_fact:
    source_details: "{{lookup('template', '../templates/juniper_active_source_details.j2')}}"

- name: print
  debug: var=source_details verbosity=1

- name: Set variable if source detail is set
  set_fact:
    info_acquired: true
  when: source_details is defined and (source_details.get('interface_names')|length>0)

- block:
    - name: Execute commands on a Juniper Device to get interfaces
      juniper_junos_command:
        commands:
          - show evpn database extensive
        display: xml
        provider:
          host: "{{device_management_ip}}"
          username: "{{device_username}}"
          password: "{{device_password}}"
          port: 22
          timeout: "{{JUNOS_COMMAND_TIMEOUT|int}}"
      register: evpn_command_resp

    - name: settings facts
      set_fact:
        mgmt_ips: []
        evpn_command_resp: "{{evpn_command_resp|json_query('parsed_output.\"evpn-database-information\".\"evpn-database-instance\"')}}"

    - name: set the source_details from template
      set_fact:
        source_details: "{{lookup('template', '../templates/juniper_source_details.j2')}}"

    - block:
        - name: set the source lo0 ip and the mac address
          set_fact:
            source_lo0_ips: "{{source_details.active_source['source_lo0_ips'] | unique}}"
            mac_address: "{{source_details.active_source['mac_addr']}}"

        - name: Todo get the loopback ips to management ips list
          set_fact:
            mgmt_ip_resp: "{{job_ctx | get_mgmt_ips_frm_lo_ips(source_lo0_ips, device_name)}}"

        - name: Warning message in case mgmt ip is not found
          debug:
            msg: " Warning: Management IPs could not be found"
            verbosity: 0
          when: mgmt_ip_resp.get_mgmt_ips == []

        - name: Warning message with traceback in case of any other exception
          debug:
            msg: "Here is the error: {{mgmt_ip_resp.error_msg}} and trace of events: {{mgmt_ip_resp.get_mgmt_ip_log}}"
            verbosity: 0
          when: mgmt_ip_resp.status == 'failure'

        - name: Set the management ip
          set_fact:
            mgmt_ips: "{{mgmt_ip_resp.get_mgmt_ips}}"

        - name: SSH into this device to locate the interface
          juniper_junos_command:
            commands:
              - show ethernet-switching table
            display: xml
            provider:
              host: "{{item.keys()[0]}}"
              username: "{{device_username}}"
              password: "{{device_password}}"
              port: 22
              timeout: "{{JUNOS_COMMAND_TIMEOUT|int}}"
          with_items: "{{mgmt_ips}}"
          register: command_resp
      when: source_details.active_source.source_lo0_ips != []
  when: info_acquired is not defined

