---
# vendor agnostic tasks file for import_asn_info
- name: Encapsulate all the operations in a block rescue for error handling
  block:
    - name: check to see if the ansible file for the vendor and family exists
      stat:
        path: "{{role_path}}/tasks/{{prouter_vendor}}_{{prouter_family}}.yml"
      register: p

    - name: Execute commands on device
      block:
        - include_tasks: "{{prouter_vendor}}_{{prouter_family}}.yml"
        - name: set the jinja template file path
          set_fact:
            jinja_file_path: "../templates/{{prouter_vendor}}_{{prouter_family}}.j2"
      when: p.stat.exists == True

    # this is assuming device family does not matter
    - name: Execute commands on device from default location
      block:
        - include_tasks: "{{prouter_vendor}}.yml"
        - name: set the jinja template file path
          set_fact:
            jinja_file_path: "../templates/{{prouter_vendor}}.j2"
      when: p.stat.exists == False

    # validate schema including to check if the device_info is set as part of the ansible file
    - name: Validate Input Schema -- device_info
      set_fact:
        schema_validation_resp: "{{'input_schema' | validate_schema(schema_file, device_info, prouter_name)}}"

    - name: Perform the necessary error handling when there is a schema validation error
      include_tasks: error_handler.yml
      when: "'status' in schema_validation_resp and schema_validation_resp.status == 'failure'"
      vars:
        op_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"
        jl_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"

    - name: parse device asn info obtained to get asn into appropriate format. Ensure Jinja template does not have any new lines
      set_fact:
        device_asn_payload: "{{lookup('template', jinja_file_path)}}"
      register: parser_output

    # validate schema to check if the device_asn_payload is of the correct output schema
    - name: Validate Output Schema -- device_asn_payload
      set_fact:
        schema_validation_resp: "{{'output_schema' | validate_schema(schema_file, device_asn_payload, prouter_name)}}"

    - name: Perform the necessary error handling when there is a schema validation error
      include_tasks: error_handler.yml
      when: "'status' in schema_validation_resp and schema_validation_resp.status == 'failure'"
      vars:
        op_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"
        jl_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"

    # Instead of calling vnc to update prouter object, we set the facts appropriately to be
    # later used for prouter update.
    - set_fact:
        device_asn: "{{device_asn_payload.device_asn}}"

    - name: Update Job log with device_asn successs with percentage
      include_tasks: percentage_update.yml
      when: "'failed' in execute_command_resp and execute_command_resp.failed == false"
      vars:
        current_index: 3
        jl_message: "Imported asn info for {{prouter_vendor}} device, {{prouter_name}}:\n   ASN: {{device_asn}}"

    - name: Update Job log with device_asn warning with percentage
      block:
        - set_fact:
            output: {
              "status": "Warning",
              "message": "ASN Read Error: Following error while executing the command to read asn on the device: {{execute_command_resp.msg}}"
            }
        - include_tasks: percentage_update.yml
          vars:
            current_index: 3
            jl_message: "ASN Read Error: Following error while executing the command to read asn on {{prouter_vendor}} device, {{prouter_name}}: {{execute_command_resp.msg}}"
      when: "'failed' in execute_command_resp and execute_command_resp.failed == true"
  rescue:
    - name: Perform the necessary error handling when parsing the device_info
      include_tasks: error_handler.yml
      when: "'failed' in parser_output and parser_output.failed == true"
      vars:
        op_err_message: "Error while parsing the device asn information on {{prouter_vendor}} device, {{prouter_name}}: {{parser_output.msg}}"
        jl_err_message: "Error while parsing the device asn information on {{prouter_vendor}} device, {{prouter_name}}: {{parser_output.msg}}"

    # this is when the playbook has to end for other unhandled failures
    - meta: end_play
