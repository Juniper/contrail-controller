- import_role:
    name: Juniper.junos

- set_fact:
    commands_list: []

- set_fact:
    commands_list: "{{commands_list}} + ['show interfaces {{item}}']"
  with_items: "{{input_params.interface_names}}"
  when: "'interface_names' in input_params"

- name: Execute commands on a Juniper Device to get specific interfaces information (by names)
  juniper_junos_command:
    commands: "{{commands_list}}"
    display: xml
    provider:
      host: "{{device_management_ip}}"
      username: "{{device_username}}"
      password: "{{device_password}}"
      port: 22
      timeout: "{{JUNOS_COMMAND_TIMEOUT|int}}"
  register: command_resp

- name: get the physical or logical interfaces info for multiple matching interfaces
  set_fact:
    command_resp_phy_intf: "{{command_resp['results']|json_query('[*].parsed_output.\"interface-information\".\"physical-interface\"')}}"
    command_resp_log_intf: "{{command_resp['results']|json_query('[*].parsed_output.\"interface-information\".\"logical-interface\"')}}"
  when: "'results' in command_resp"

- name: get the physical and logical interfaces info if it is a single matching interface
  set_fact:
    command_resp_phy_intf: "{{command_resp | json_query('parsed_output.\"interface-information\".\"physical-interface\"') | default([], true)}}"
    command_resp_log_intf: "{{command_resp | json_query('parsed_output.\"interface-information\".\"logical-interface\"') | default([], true)}}"
  when: "'results' not in command_resp"

- name: convert dict back into list
  set_fact:
    command_resp_phy_intf: ["{{command_resp_phy_intf}}"]
    command_resp_log_intf: ["{{command_resp_log_intf}}"]
  when: command_resp_phy_intf is mapping or command_resp_log_intf is mapping

- name: set the command_resp
  set_fact:
    command_resp: {
                   "physical_intf_list": "{{command_resp_phy_intf}}",
                   "logical_intf_list": "{{command_resp_log_intf}}"
                  }

