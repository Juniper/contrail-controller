- name: Read swift conf info
  include_tasks: read_swift_conf_info.yml

- name: Define filename
  set_fact:
    filename: "{{playbook_input.input.filename}}"
  when: playbook_input.input.filename is defined

- name: Clean up swift container before upload
  swift_container_cleanup:
    authtoken: "{{auth_token}}"
    authurl: "{{auth_url}}"
    user: "{{user}}"
    key: "{{key}}"
    tenant_name: "{{tenant_name}}"
    auth_version: "{{auth_version}}"
    temp_url_key: "{{temp_url_key}}"
    temp_url_key_2: "{{temp_url_key_2}}"
    chosen_temp_url_key: "{{chosen_temp_url_key}}"
    container_name: "{{container_name}}"
    filename: "{{filename}}"
  register: swift_results

- name: Print the complete response.
  debug:
    var: swift_results
    verbosity: 1

- name: Construct image fq name
  set_fact:
    image_fq_name: ["default-global-system-config", "{{filename}}"]

- name: Delete the image object from the database
  vnc_db_mod:
    job_ctx: "{{job_ctx}}"
    object_type: "device_image"
    object_op: "delete"
    object_dict: {"fq_name": "{{image_fq_name}}"}
  register: image_uuid

# handle error/exception from swift and set output
- name: Fail if swift module returned error
  include_tasks: error_handler.yml
  when: "swift_results.error_msg != None and swift_results.error_msg != ''"
  vars:
    op_err_message: "Unable to cleanup swift container. {{swift_results.error_msg}}"
    results: |
      {
        "msg": "Unable to clean swift container."
      }
    jl_err_message: "Unable to clean swift container. {{swift_results.error_msg}}"
