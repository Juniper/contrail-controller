#Vendor specific playbook for config push
---

    - name: Get the bgp group names with config groups
      block:
        - juniper_junos_config:
            provider:
              host: "{{pr_host}}"
              username: "{{pr_user}}"
              password: "{{pr_password}}"
              port: 22
              timeout: "{{JUNOS_COMMAND_TIMEOUT|int}}"
            retrieve: 'committed'
            filter: 'groups'
            diff: true
            check: false
            commit: false
            config_mode: 'private'
            format: xml
          register: group_info_cfg
      rescue:
        - name: Perform the necessary error handling
          include_tasks: error_handler.yml
          when: "group_info_cfg.failed == true"
          vars:
            op_err_message: "{{group_info_cfg.msg}}"
            jl_err_message: "Error while obtaining group information from Juniper device: {{group_info_cfg.msg}}"

    - name: Get the group information
      set_fact:
        results_json_cfg: "{{group_info_cfg|json_query('config_parsed.configuration')}}"

    - name: Get the required groups from results
      set_fact:
        valid_groups_cfg: "{{results_json_cfg.groups| selectattr('protocols','defined')| selectattr('protocols.bgp','defined')| list}}"

    - name: Print valid groups
      debug: msg="{{valid_groups_cfg}}" verbosity=1

    # Bgp group names without a config group

    - name: Get bgp group names without config groups
      block:
        - juniper_junos_config:
            provider:
              host: "{{pr_host}}"
              username: "{{pr_user}}"
              password: "{{pr_password}}"
              port: 22
              timeout: "{{JUNOS_COMMAND_TIMEOUT|int}}"
            retrieve: 'committed'
            filter: 'protocols/bgp'
            diff: true
            check: false
            commit: false
            config_mode: 'private'
            format: xml
          register: group_info
      rescue:
        - name: Perform the necessary error handling
          include_tasks: error_handler.yml
          when: "group_info.failed == true"
          vars:
            op_err_message: "{{group_info.msg}}"
            jl_err_message: "Error while obtaining group information (without config groups) from Juniper device: {{group_info.msg}}"

    - name: Get bgp group info without cfg group
      set_fact:
        bgp_group_info: "{{group_info|json_query('config_parsed.configuration')}}"

    - name: Print group_info
      debug: msg="{{bgp_group_info}}" verbosity=1

