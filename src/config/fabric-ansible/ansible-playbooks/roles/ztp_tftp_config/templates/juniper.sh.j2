#!/bin/sh
serial_number=$(echo "show system information | display xml" | cli | grep serial-number | awk -F">" '{print $2}' | awk -F"<" '{print $1}')
family=$(echo "show system information | display xml" | cli | grep hardware-model | awk -F">" '{print $2}' | awk -F"<" '{print $1}'| cut -c1-2)

# Below function generates the initial configuration
generate_basic_config()
{
    # Below is the basic configuration common for Juniper
    cat <<EOF > /tmp/juniper.config
    system {
        host-name "$serial_number";
        root-authentication {
            encrypted-password "{{ ztp_tftp_config.password | encrypt | shell_escape }}";
        }
        services {
            ssh {
                root-login allow;
            }
            telnet;
            netconf {
                ssh;
            }
        }
    }
    protocols {
        lldp {
            advertisement-interval 5;
            interface all;
        }
    }
EOF
}

add_dual_re_specific_config(){
    # Dual RE case, add commit synchronize
    cat <<EOF >> /tmp/juniper.config
    system {
        commit synchronize;
    }
    chassis {
        redundancy {
            graceful-switchover;
        }
    }
    routing-options {
        nonstop-routing;
    }
    groups {
        re0 {
            system {
                host-name "$serial_number-re0";
            }
        }
        re1 {
            system {
                host-name "$serial_number-re1";
            }
        }
    }
    apply-groups [ re0 re1 ];

EOF
}

execute_script()
{
    cli <<EOF
    configure
    load merge /tmp/juniper.config relative
    commit and-quit
EOF
}

execute_script_re2()
{
    cli <<EOF
    configure
    load merge /tmp/juniper.config relative
    set groups re1 interfaces fxp0 disable
    commit synchronize and-quit
EOF
}

# Actual execution happens here

if [ "$family" = "mx" ]; then
    res=$(echo "show chassis routing-engine" | cli | grep "Routing Engine status" | wc -l | xargs)

    if [ "$res" = "2" ]; then
        # MX dual RE case only we will add the "commit synchronize"

        generate_basic_config
        add_dual_re_specific_config
        execute_script_re2
    else
        # MX with single RE

        generate_basic_config
        execute_script
    fi
else
    # Other than MX family

    generate_basic_config
    execute_script
fi