---
# tasks file for fabric_namespace_read
    - name: get fabric fq name
      vnc_db_mod:
         object_type: "fabric"
         object_op: "id_to_fq_name"
         object_dict: |
           {
              "uuid": "{{ fabric_uuid }}"
           }
         auth_token: "{{ auth_token }}"
         api_server_host: "{{ api_server_host }}"
      register: fq_name
      when: fabric_uuid is defined

    - name: if vnc failed end play
      include_tasks: error_handler.yml
      vars:
        op_err_message: "{{ fq_name.msg }}"
        results: ""
        jl_err_message: "VNC error while reading fabric uuid  + {{ fq_name.msg }}"
      when: "fq_name.failure == true"

    - set_fact:
         fabric_fq_name: "{{ fq_name.fq_name }}"
      when: fabric_uuid is defined

    - name: get credentials
      vnc_db_mod:
         object_type: "fabric"
         object_op: "read"
         object_dict: |
           {
              "fq_name": "{{ fabric_fq_name }}"
           }
         auth_token: "{{ auth_token }}"
         api_server_host: "{{ api_server_host }}"
      register: device_credentials

    - name: if vnc failed end play
      include_tasks: error_handler.yml
      vars:
        op_err_message: "{{ device_credentials.msg }}"
        results: ""
        jl_err_message: "VNC error while reading the creds from fabric + {{ device_credentials.msg }}"
      when: "device_credentials.failure == true"

    - set_fact:
         credentials: "{{ device_credentials.obj.fabric_credentials.device_credential }}"

    - debug: var=credentials

    - name: get tag uuid
      vnc_db_mod:
         object_type: "tag"
         object_op: "fq_name_to_id"
         object_dict: |
           {
              "fq_name": ["{{ tag_fq_name }}"]
           }
         auth_token: "{{ auth_token }}"
         api_server_host: "{{ api_server_host }}"
      register: tag_uuid

    - name: if vnc failed end play
      include_tasks: error_handler.yml
      vars:
        op_err_message: "{{ tag_uuid.msg }}"
        results: ""
        jl_err_message: "VNC error while readin the tag obj  + {{ tag_uuid.msg }}"
      when: "tag_uuid.failure == true"

    - set_fact:
         tag_uuid: "{{ tag_uuid.uuid }}"

    - debug: var=tag_uuid

    - name: get fabric namespaces for a tag
      vnc_db_mod:
         object_type: "fabric_namespace"
         object_op: "list"
         object_dict: |
           {
              "detail": "True",
              "back_ref_id": "{{ tag_uuid }}"
           }
         auth_token: "{{ auth_token }}"
         api_server_host: "{{ api_server_host }}"
      register: fabric_namespaces_for_given_tag


    - name: get subnet from namespaces that match the fabric fq_name
      set_fact:
         subnets: "{{ subnets|default([]) + [ item.fabric_namespace_value.ipv4_cidr.subnet ] }}"
      when:
        - item.fq_name[1] == "{{ fabric_fq_name[1] }}"
        - item.fabric_namespace_type == "IPV4-CIDR"
      with_items: "{{ fabric_namespaces_for_given_tag.obj }}"
#      no_log: True


    - name: one list for all subnets across namespaces
      set_fact:
          host_subnets: "{{ host_subnets|default([]) + [ item ] }}"
      with_items: "{{ subnets }}"
      when: subnets is defined
#      no_log: True

    - name: ip/cidr
      set_fact:
          host_prefix: "{{ host_prefix + [ item.ip_prefix  + '/' + item.ip_prefix_len|string ] }}"
      with_items: "{{ host_subnets }}"
      when: host_subnets is defined
#      no_log: True

    - debug: var=host_prefix
      when: host_subnets is defined

    - name: get as numbers from namespaces that match the fabric fq_name
      set_fact:
         all_asn: "{{ all_asn|default([]) + [ item.fabric_namespace_value.asn.asn ] }}"
      when:
        - item.fq_name[1] == "{{ fabric_fq_name[1] }}"
        - item.fabric_namespace_type == "ASN"
      with_items: "{{ fabric_namespaces_for_given_tag.obj }}"
#      no_log: True


    - name: one list for all as numbers across namespaces
      set_fact:
          as_numbers: "{{ as_numbers|default([]) + [ item ] }}"
      with_items: "{{ all_asn }}"
      when: all_asn is defined
#      no_log: True

