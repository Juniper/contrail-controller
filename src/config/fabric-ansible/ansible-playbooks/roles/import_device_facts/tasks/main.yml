---
# vendor agnostic tasks file for import_device_facts
- set_fact:
    job_ctx: "{{job_ctx|combine(percent_init_dict)}}"

- name: Encapsulate all the operations in a block rescue for error handling
  block:
    - name: check to see if the ansible file for the vendor and family exists
      stat:
        path: "{{prouter_vendor}}_{{prouter_family}}.yml"
      register: p

    - name: Execute commands on device
      block:
        - include_tasks: "{{prouter_vendor}}_{{prouter_family}}.yml"
        - name: set the jinja template file path
          set_fact:
            jinja_file_path: "../templates/{{prouter_vendor}}_{{prouter_family}}.j2"
      when: p.stat.exists == True

    # this is assuming device family does not matter
    - name: Execute commands on device from default location
      block:
        - include_tasks: "{{prouter_vendor}}.yml"
        - name: set the jinja template file path
          set_fact:
            jinja_file_path: "../templates/{{prouter_vendor}}.j2"
      when: p.stat.exists == False

    # validate schema including to check if the device_info is set as part of the ansible file
    - name: Validate Input Schema -- device_info
      set_fact:
        schema_validation_resp: "{{'input_schema' | validate_schema('/opt/contrail/fabric_ansible_playbooks/schema/import_device_facts_schema.json', device_info, prouter_name)}}"

    - name: Perform the necessary error handling when there is a schema validation error
      include_tasks: error_handler.yml
      when: "'status' in schema_validation_resp and schema_validation_resp.status == 'failure'"
      vars:
        op_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"
        jl_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"

    - name: parse device facts info obtained to get facts into appropriate format. Ensure Jinja template does not have any new lines
      set_fact:
        device_facts_payload: "{{lookup('template', jinja_file_path)}}"
      register: parser_output

    # validate schema to check if the device_facts payload is of the correct output schema
    - name: Validate Output Schema -- device_facts_payload
      set_fact:
        schema_validation_resp: "{{'output_schema' | validate_schema('/opt/contrail/fabric_ansible_playbooks/schema/import_device_facts_schema.json', device_facts_payload, prouter_name)}}"

    - name: Perform the necessary error handling when there is a schema validation error
      include_tasks: error_handler.yml
      when: "'status' in schema_validation_resp and schema_validation_resp.status == 'failure'"
      vars:
        op_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"
        jl_err_message: "Error while trying to validate the schema on {{prouter_vendor}} device, {{prouter_name}}: {{schema_validation_resp.error_msg}}"

    # Instead of calling vnc to create db objects, we set the facts appropriately to be
    # later written to the prouter log.
    - set_fact:
        hardware_model: "{{device_facts_payload.model}}"
        serial_number: "{{device_facts_payload.serialnumber}}"
        os_version: "{{device_facts_payload.version}}"
        hostname: "{{device_facts_payload.hostname}}"

    - name: Update Job log with device_facts successs with percentage
      include_tasks: percentage_update.yml
      vars:
        current_index: 1
        jl_message: "Imported system info for {{prouter_vendor}} device, {{prouter_name}}:\n   Serial number: {{serial_number}}\n   OS version: {{os_version}}\n   Model: {{hardware_model}}\n   Host name: {{hostname}}"

  rescue:
    - name: Perform the necessary error handling while trying to execute command
      include_tasks: error_handler.yml
      when: "'failed' in execute_command_resp and execute_command_resp.failed == true"
      vars:
        op_err_message: "Error while trying to execute command on {{prouter_vendor}} device, {{prouter_name}}: {{execute_command_resp.msg}}"
        jl_err_message: "Error while trying to execute command on {{prouter_vendor}} device, {{prouter_name}}: {{execute_command_resp .msg}}"

    - name: Perform the necessary error handling when parsing the device_info
      include_tasks: error_handler.yml
      when: "'failed' in parser_output and parser_output.failed == true"
      vars:
        op_err_message: "Error while parsing the device facts information on {{prouter_vendor}} device, {{prouter_name}}: {{parser_output.msg}}"
        jl_err_message: "Error while parsing the device facts information on {{prouter_vendor}} device, {{prouter_name}}: {{parser_output.msg}}"

    # this is when the playbook has to end for other unhandled failures
    - meta: end_play