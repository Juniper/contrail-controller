---
# tasks file for probe_device
    - name: ping check
      ping_sweep:
        subnets: "{{ host_prefix }}"
      register: hosts

    - debug: var=hosts

    - name: get snmp info
      snmp_facts:
        host: '{{ item }}'
        version: v2c
        community: public
      with_items: "{{ hosts.reachable_hosts }}"
      register: snmp_output
      ignore_errors: yes

    - name: pingable host list
      set_fact:
        pingable_hosts: "{{ hosts.reachable_hosts }}"

    - name: identify vendor and device family from OID
      oid_to_vendor_family:
        oid:  "{{ item.ansible_facts.ansible_sysobjectid }}"
        host: "{{ item.item }}"
        hostname: "{{ item.ansible_facts.ansible_sysname }}"
      when: item.ansible_facts is defined
      with_items: "{{ snmp_output.results }}"
      register: vendor_family

    - name: assign vendor family mapping
      set_fact:
        host_vendor_mapping: "{{ host_vendor_mapping|default([]) + [ item.oid_mapping ] }}"
      when: item.oid_mapping is defined
      with_items: "{{ vendor_family.results }}"

    - debug: var=host_vendor_mapping

    - name: call vnc to create physical-router
      vars:
        physical_router_uuids: {"failed" : False}
      vnc_db_mod:
        job_ctx: "{{ job_ctx }}"
        object_type: "physical_router"
        object_op: "create"
        object_dict: |
          {
            "parent_type": "global-system-config",
            "fq_name": ["default-global-system-config", "{{ item.hostname }}"],
            "physical_router_management_ip": "{{ item.host }}",
            "physical_router_vendor_name": "{{ item.vendor }}",
            "physical_router_product_name": "{{ item.product }}",
            "physical_router_device_family": "{{ item.family }}",
            "physical_router_vnc_managed": True
          }
      register: physical_router_uuids
      when:
        - "physical_router_uuids.failed == false"
      with_items: "{{ host_vendor_mapping }}"

    - debug: var=physical_router_uuids

    - name: if vnc failed end play
      include_tasks: error_handler.yml
      vars:
        op_err_message: "{{ item.msg }}"
        results: ""
        jl_err_message: "VNC error while creating PR Router  + {{ item.msg }}"
      when: "item.failed == true"
      with_items: "{{ physical_router_uuids.results }}"

    - name: PR objectlog update to set the onboarding state
      prouter_objectlog:
        prouter_fqname: ["default-global-system-config", "{{ item.hostname }}"]
        onboarding_state: "{{ DEVICE_STATE.DISCOVERED }}"
        job_ctx: "{{ job_ctx }}"
      with_items: "{{ host_vendor_mapping }}"

    - name: call vnc to update fabric
      vars:
        fabric_ref_update: {"failed" : False}
      vnc_db_mod:
        job_ctx: "{{ job_ctx }}"
        object_type: "fabric"
        object_op: "ref_update"
        object_dict: |
          {
            "obj_uuid": "{{ fabric_uuid }}",
            "ref_type": "physical_router",
            "ref_uuid": "{{ item.uuid }}"
          }
      register: fabric_ref_update
      when:
        - "fabric_ref_update.failed == false"
      with_items: "{{ physical_router_uuids.results }}"

    - name: collating list of PR uuids
      set_fact:
        list_uuid: "{{ list_uuid|default([]) + [ item.uuid ] }}"
      with_items: "{{ physical_router_uuids.results }}"

    - name: set to device_uuid
      set_fact:
        results: "{{ results|default({}) | combine({'device_uuid': '{{ list_uuid }}' })}}"
