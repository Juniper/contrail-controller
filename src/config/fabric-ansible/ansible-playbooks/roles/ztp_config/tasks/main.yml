---

- name: Save fabric UUID
  set_fact: fabric_uuid="{{fabric_uuid}}"

- name: Save device count
  set_fact: device_count="{{device_count}}"

- name: get fabric fq name
  vnc_db_mod:
    enable_job_ctx: False
    job_ctx: "{{ job_ctx }}"
    object_type: "fabric"
    object_op: "id_to_fq_name"
    object_dict: |
      {
        "uuid": "{{ fabric_uuid }}"
      }
  register: fabric_fq_name
  when: fabric_uuid is defined

- name: Save fabric name
  set_fact:
     fabric_name: "{{ fabric_fq_name.fq_name[-1] }}"
  when: fabric_uuid is defined

- name: Get ZTP config
  set_fact:
     ztp_config: "{{ job_ctx | ztpcfg(fabric_uuid) }}"

- name: Create subdirectories for calculating config
  include_tasks: create_subdirs.yml

- name: Save ZTP DNSMASQ conf file name
  set_fact:
     ztp_dnsmasq_conf_file: "{{ fabric_name }}.conf"

- name: Save ZTP script file name
  set_fact:
     ztp_script_file: "{{ fabric_name }}_juniper.sh"

- name: Generate dnsmasq config file on local host
  block:
    - name: Generate dnsmasq config file on local host
      template:
        src: dnsmasq.conf.j2
        dest: "{{ ztp_dnsmasq_dir }}/{{ ztp_dnsmasq_conf_file }}"
      register: cmd_res
  rescue:
    - name: Perform necessary error handling
      include_tasks: error_handler.yml
      vars:
        op_err_message: "{{cmd_res.msg}}"
        jl_err_message: "Failed to generate dnsmasq config file"

- name: Generate script file on local host
  block:
    - name: Generate script file on local host
      template:
        src: juniper.sh.j2
        dest: "{{ ztp_tftp_dir }}/{{ ztp_script_file }}"
      register: cmd_res
  rescue:
    - name: Perform necessary error handling
      include_tasks: error_handler.yml
      vars:
        op_err_message: "{{cmd_res.msg}}"
        jl_err_message: "Failed to generate script"

