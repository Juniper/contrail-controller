set groups {{cfg_group}} routing-options forwarding-table chained-composite-next-hop ingress evpn
set groups {{cfg_group}} policy-options policy-statement type5_policy term 1 from protocol direct
set groups {{cfg_group}} policy-options policy-statement type5_policy term 1 then accept
set groups {{cfg_group}} policy-options policy-statement type5_policy term 2 from protocol static
set groups {{cfg_group}} policy-options policy-statement type5_policy term 2 then accept
set groups {{cfg_group}} policy-options policy-statement type5_policy term 3 from protocol evpn
set groups {{cfg_group}} policy-options policy-statement type5_policy term 3 from route-filter 0.0.0.0/0 prefix-length-range /32-/32
set groups {{cfg_group}} policy-options policy-statement type5_policy term 3 then accept
{% set dummy_ip = device_abstract_config.get('system', {}).get('dummy_ip') %}
{% set ns = namespace(public_network='') %}
{%     for ri in device_abstract_config.get('routing_instances', []) %}
{%         set vxlan_id = ri.get('vxlan_id', '') %}
{%         set router_external = ri.get('is_public_network', '') %}
{%         if vxlan_id == 'None' %}
{%             set vxlan_id = ri.get('virtual_network_id') %}
{%         endif %}
{%         if (ri.get('virtual_network_is_internal') == true) and ('vrf' in ri.get('routing_instance_type', '')) %}
{%             set name = ri.get('description', '')[:127] %}
{%             for lo_int in ri.get('loopback_interfaces', []) %}
{%                 set int_name = lo_int.get('name', '') %}
{%                 set unit_num = int_name.split('.')[-1] %}
set groups {{cfg_group}} interfaces lo0 unit {{unit_num}} family inet address 127.0.0.1/32
set groups {{cfg_group}} routing-instances {{name}} interface {{int_name}}
{%             endfor %}
set groups {{cfg_group}} routing-instances {{name}} routing-options multipath
set groups {{cfg_group}} routing-instances {{name}} routing-options rib {{name}}.inet6.0 multipath
set groups {{cfg_group}} routing-instances {{name}} routing-options static route {{dummy_ip}}/32 discard
{%             if (vxlan_id != '') %}
set groups {{cfg_group}} protocols evpn default-gateway no-gateway-community
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes advertise direct-nexthop
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes encapsulation vxlan
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes vni {{vxlan_id}}
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes export type5_policy
{%             endif %}
set groups {{cfg_group}} routing-instances {{name}} instance-type vrf
{%             set vrf_import = name+'-import' %}
{%             set vrf_export = name+'-export' %}
set groups {{cfg_group}} routing-instances {{name}} vrf-import {{vrf_import}}
set groups {{cfg_group}} routing-instances {{name}} vrf-export {{vrf_export}}
{%             if ri.get('virtual_network_is_shared', '') == true %}
set groups {{cfg_group}} routing-instances {{name}} routing-options auto-export
{%             endif %}
{%             for irb_int in ri.get('routing_interfaces', []) %}
{%                 set irb_name = irb_int.get('name') %}
set groups {{cfg_group}} routing-instances {{name}} interface {{irb_name}}
{%             endfor %}
{%             for route in ri.get('static_routes', []) %}
{%                 set cidr = route.get('prefix') %}
{%                 set next_hop = route.get('next_hop') %}
set groups {{cfg_group}} routing-instances {{name}} routing-options static route {{cidr}} next-hop {{next_hop}}
{%             endfor %}
{%             for protocols in ri.get('protocols', []) %}
{%                 for bgp in protocols.get('bgp', []) %}
{%                     set bgp_name = bgp.get('name') %}
{%                     set bgp_local_as = bgp.get('autonomous_system') %}
{%                     set bgp_auth_key = bgp.get('authentication_key', '') %}
{%                     if bgp_auth_key != '' %}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} authentication-key {{bgp_auth_key}}
{%                     endif %}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp path-selection external-router-id
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} type external
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} local-as {{bgp_local_as}}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} multipath
{%                     for peer in bgp.get('peers', []) %}
{%                         set peer_ip = peer.get('ip_address') %}
{%                         set peer_as = peer.get('autonomous_system') %}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} neighbor {{peer_ip}} peer-as {{peer_as}}
{%                     endfor %}
{%                     set bfd = bgp.get('bfd', {}) %}
{%                     if bfd|length > 0 %}
{%                         set rx_tx_interval = bfd.get('rx_tx_interval') %}
{%                         set detection_time_multiplier  = bfd.get('detection_time_multiplier') %}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} bfd-liveness-detection minimum-interval {{rx_tx_interval}}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} bfd-liveness-detection multiplier {{detection_time_multiplier}}
{%                     endif %}
{%                     set rp = bgp.get('routing_policies', {}) %}
{%                     if rp|length > 0 %}
{%                         for import_rp in rp.get('import_routing_policies', []) %}
{%                             if import_rp != '' %}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} import {{import_rp}}
{%                             endif %}
{%                         endfor %}
{%                         for export_rp in rp.get('export_routing_policies', []) %}
{%                             if export_rp != '' %}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} export {{export_rp}}
{%                             endif %}
{%                         endfor %}
{%                     endif %}{# /* bgp has routing policies */ #}
{%                 endfor %}{# /* end of bgp for loop */ #}
{%             endfor %}{# /* end of protocols for loop */ #}
{%             set sys_config = device_abstract_config.get('system', None) %}
{%             set sys_roles = sys_config.get('routing_bridging_roles', []) %}
{%             if (router_external == true and ('DC-Gateway' in sys_roles or 'DCI-Gateway' in sys_roles)) %}
{%                 set ns.public_network = true %}
set groups {{cfg_group}} routing-instances {{name}} routing-options static route 0.0.0.0/0 next-table inet.0
set groups {{cfg_group}} forwarding-options family inet filter input redirect_to_public_vrf_filter
{%                 for subnet in ri.get('prefixes', []) %}
{%                     set cidr = subnet.get('prefix') + '/' + (subnet.get('prefix_len')|string) %}
set groups {{cfg_group}} firewall family inet filter redirect_to_public_vrf_filter term term-{{vxlan_id}} from destination-address {{cidr}}
{%                 endfor %}
set groups {{cfg_group}} firewall family inet filter redirect_to_public_vrf_filter term term-{{vxlan_id}} then routing-instance {{name}}
{%             endif %}{# /* router_external */ #}
{%         endif %}{# /* virtual_network_is_internal */ #}
{%     endfor %}
{%     if ns.public_network == true %}
set groups {{cfg_group}} firewall family inet filter redirect_to_public_vrf_filter term default-term then accept
{%     endif %}
{%     for rp in device_abstract_config.get('routing_policies', []) %}
{%         set rp_name = rp.get('name', '') %}
{%         set rp_entery = rp.get('routing_policy_entries', {}) %}
{%         if rp_entery|length > 0 %}
{%             for term in rp_entery.get('terms', []) %}
{%                 set tname = 'T' + loop.index|string %}
{%                 set tcond = term.get('term_match_condition', {}) %}
{%                 set taction = term.get('term_action_list', {}) %}
{%                 if ((tcond|length > 0) and (taction|length > 0)) %}
{%                     for protocol in tcond.get('protocol', []) %}
{%                         if ((protocol == 'interface') or (protocol == 'interface-static')) %}
set groups {{cfg_group}} policy-options policy-statement {{rp_name}} term {{tname}} from protocol direct
{%                         endif %}
{%                         if (protocol == 'bgp') %}
set groups {{cfg_group}} policy-options policy-statement {{rp_name}} term {{tname}} from protocol bgp
{%                         endif %}
{%                         if (protocol == 'static') %}
set groups {{cfg_group}} policy-options policy-statement {{rp_name}} term {{tname}} from protocol static
{%                         endif %}
{%                         for extcom in tcond.get('extcommunity_list', []) %}
{%                             set cname = rp_name + '-' + tname + '-C' + loop.index|string %}
set groups {{cfg_group}} policy-options community {{cname}} members {{extcom}}
set groups {{cfg_group}} policy-options policy-statement {{rp_name}} term {{tname}} from community {{cname}}
{%                         endfor %}{# /* extcommunity_list */ #}
{%                         for prefix in tcond.get('prefix', []) %}
{%                             set ptype = prefix.get('prefix_type', '') %}
{%                             set pvalue = prefix.get('prefix', '') %}
{%                             if pvalue != '' %}
set groups {{cfg_group}} policy-options policy-statement {{rp_name}} term {{tname}} from route-filter {{pvalue}} {{ptype}}
{%                             endif %}
{%                         endfor %}{# /* prefix */ #}
{%                     endfor %}{# /* protocol */ #}
{%                     set term_action = taction.get('action', '') %}
{%                     set tupdate = taction.get('update', '') %}
{%                     if tupdate != '' %}
{%                         set localpref = tupdate.get('local_pref', '') %}
{%                         set as_path = tupdate.get('as_path', '') %}
{%                         if localpref != '' %}
set groups {{cfg_group}} policy-options policy-statement {{rp_name}} term {{tname}} then local-preference {{localpref}}
{%                         endif %}
{%                         if as_path != '' %}
{%                             set expand = as_path.get('expand', '') %}
{%                             if expand != '' %}
{%                                 for asn in expand.get('asn_list', []) %}
set groups {{cfg_group}} policy-options policy-statement {{rp_name}} term {{tname}} then as-path-prepend {{asn}}
{%                                 endfor %}
{%                             endif %}
{%                         endif %}{# /* as_path in update of term_action_list */ #}
{%                     endif %}{# /* update in term_action_list */ #}
{%                     if term_action != '' %}
set groups {{cfg_group}} policy-options policy-statement {{rp_name}} term {{tname}} then {{term_action}}
{%                     endif %}{# /* action in term_action_list */ #}
{%                 endif %}{# /* term_match_condition and term_action_list valid */ #}
{%             endfor %}{# /* for each terms */ #}
{%         endif %}{# /* valid routing_policies */ #}
{%     endfor %}{# /* routing_policies */ #}
