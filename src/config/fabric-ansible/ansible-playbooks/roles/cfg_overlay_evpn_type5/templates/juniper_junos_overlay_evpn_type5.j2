set groups {{cfg_group}} routing-options forwarding-table chained-composite-next-hop ingress evpn
set groups {{cfg_group}} policy-options policy-statement type5_policy term 1 from protocol direct
set groups {{cfg_group}} policy-options policy-statement type5_policy term 1 then accept
set groups {{cfg_group}} policy-options policy-statement type5_policy term 2 from protocol static
set groups {{cfg_group}} policy-options policy-statement type5_policy term 2 then accept
set groups {{cfg_group}} policy-options policy-statement type5_policy term 3 from protocol evpn
set groups {{cfg_group}} policy-options policy-statement type5_policy term 3 from route-filter 0.0.0.0/0 prefix-length-range /32-/32
set groups {{cfg_group}} policy-options policy-statement type5_policy term 3 then accept
{%     set dummy_ip = device_abstract_config.get('system', {}).get('dummy_ip') %}
{%     set ns = namespace(public_network='') %}
{%         for ri in device_abstract_config.get('routing_instances', []) %}
{%             set vxlan_id = ri.get('vxlan_id', '') %}
{%             set router_external = ri.get('is_public_network', '') %}
{%             if vxlan_id == 'None' %}
{%                 set vxlan_id = ri.get('virtual_network_id') %}
{%             endif %}
{%             if (ri.get('virtual_network_is_internal') == true) and ('vrf' in ri.get('routing_instance_type', '')) %}
{%                 set name = ri.get('description', '')[:127] %}
set groups {{cfg_group}} routing-instances {{name}} routing-options multipath
set groups {{cfg_group}} routing-instances {{name}} routing-options rib {{name}}.inet6.0 multipath
set groups {{cfg_group}} routing-instances {{name}} routing-options static route {{dummy_ip}}/32 discard
{%                 if (vxlan_id != '') %}
{%                    if (router_external != true %}
{# This is for the DC-GW on MX - we are seeing issues with the VXLAN so moving to MPLSoGRE below protocol is reqired for the VXLAN only. We will revisit later
 #}
set groups {{cfg_group}} protocols evpn 
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes advertise direct-nexthop
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes encapsulation vxlan
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes vni {{vxlan_id}}
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes export type5_policy
{%                    endif %}
{%                 endif %}
set groups {{cfg_group}} routing-instances {{name}} instance-type vrf
{%                 set vrf_import = name+'-import' %}
{%                 set vrf_export = name+'-export' %}
set groups {{cfg_group}} routing-instances {{name}} vrf-import {{vrf_import}}
set groups {{cfg_group}} routing-instances {{name}} vrf-export {{vrf_export}}
{%                 if ri.get('virtual_network_is_shared', '') == true %}
set groups {{cfg_group}} routing-instances {{name}} routing-options auto-export
{%                 endif %}
{%                 set sys_config = device_abstract_config.get('system') %}
{%                 set sys_roles = sys_config.get('routing_bridging_roles', []) %}
{%                 if (router_external == true and ('DC-Gateway' in sys_roles or 'DCI-Gateway' in sys_roles)) %}
set groups {{cfg_group}} routing-instances {{name}} routing-options static route 0.0.0.0/0 next-table inet.0
set groups {{cfg_group}} forwarding-options family inet filter input redirect_to_public_vrf_filter
{%                     for subnet in ri.get('prefixes', []) %}
{%                         set cidr = subnet.get('prefix') + '/' + (subnet.get('prefix_len')|string) %}
{%                         if (':' in cidr) %}
set groups {{cfg_group}} firewall family inet6 filter redirect_to_public_vrf_filter term term-{{vxlan_id}} from destination-address {{cidr}}
{%                         else %}
set groups {{cfg_group}} firewall family inet filter redirect_to_public_vrf_filter term term-{{vxlan_id}} from destination-address {{cidr}}
{%                         endif %}
{%                     endfor %}
set groups {{cfg_group}} firewall family inet filter redirect_to_public_vrf_filter term term-{{vxlan_id}} then routing-instance {{name}}
set groups {{cfg_group}} firewall family inet filter redirect_to_public_vrf_filter term default-term then accept
{%                 endif %}
{%             endif %}{# /* virtual_network_is_internal */ #}
{%         endfor %}

