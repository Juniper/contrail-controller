- name: Encapsulate all the operations in a block rescue for error handling
  block:
    - set_fact:
        prouter_dynamic_ip: "{{dynamic_mgmt_ip_tbl[prouter_uuid].dynamic_mgmt_ip}}"
      when: dynamic_mgmt_ip_tbl != ''
    - set_fact:
        prouter_dynamic_ip: "{{prouter_mgmt_ip}}"
      when: dynamic_mgmt_ip_tbl == ''

    - name: check to see if the ansible file for the vendor and family exists
      stat:
        path: "{{role_path}}/tasks/{{prouter_vendor}}_{{prouter_family}}.yml"
      register: p

    - name: Execute commands from vendor and family specific template
      block:
        - include_tasks: "{{prouter_vendor}}_{{prouter_family}}.yml"
      when: p.stat.exists == True

    # this is assuming device family does not matter
    - name: Execute commands from vendor specific template
      block:
        - include_tasks: "{{prouter_vendor}}.yml"
      when: p.stat.exists == False

    - name: Validate hardware types are the same
      include_tasks: error_handler.yml
      when: device_hardware_model != prouter_product
      vars:
        op_err_message: "New device hardware type {{device_hardware_model}} does not match old device hardware type {{prouter_product}}"
        jl_err_message: "New device hardware type {{device_hardware_model}} does not match old device hardware type {{prouter_product}}"

  rescue:
    - name: Perform the necessary error handling while trying to execute command
      include_tasks: error_handler.yml
      when: "'failed' in show_system_resp and show_system_resp.failed == true"
      vars:
        op_err_message: "Error while trying to execute command on {{prouter_vendor}} device, {{prouter_name}}: {{show_system_resp.msg}}"
        jl_err_message: "Error while trying to execute command on {{prouter_vendor}} device, {{prouter_name}}: {{show_system_resp.msg}}"

    # this is when the playbook has to end for other unhandled failures
    - meta: end_play
