{# Config for the configuring eBGP on a /29 subnet on QFX routing instances as endpoint to SRX #}
{% for ri in device_abstract_config.get('routing_instances', []) %}
{%     set ns = namespace(name='') %}
{%     if ri.get('description', '') %}
{%         set ns.name = ri.get('description')[:128] %}
{%     else %}
{%         set ns.name = ri.get('name') %}
{%     endif %}
{%     for protocol in ri.get('protocols', []) %}
{%         for bgp in protocol.get('bgp', []) %}
{%             set sys_config = device_abstract_config.get('system', None) %}
{%             set sys_roles = sys_config.get('routing_bridging_roles', []) %}
{%             if 'PNF-Servicechain' in sys_roles %}
set groups {{cfg_group}} routing-instances {{ns.name}} protocols evpn ip-prefix-routes export PL-ITR-DEFAULT
set groups {{cfg_group}} policy-options policy-statement PL-ITR-DEFAULT term DEFAULT-ITR1 from protocol bgp
set groups {{cfg_group}} policy-options policy-statement PL-ITR-DEFAULT term DEFAULT-ITR1 from route-filter 0.0.0.0/0 exact
set groups {{cfg_group}} policy-options policy-statement PL-ITR-DEFAULT term DEFAULT-ITR1 then accept
set groups {{cfg_group}} policy-options policy-statement PL-ITR-DEFAULT then reject
{%             endif %}
set groups {{cfg_group}} routing-instances {{ns.name}} protocols bgp group {{bgp.name}} type {{bgp.type_}}
set groups {{cfg_group}} routing-instances {{ns.name}} protocols bgp group {{bgp.name}} export {{bgp.name}}-export
{%             for peer in bgp.peers %}
set groups {{cfg_group}} routing-instances {{ns.name}} protocols bgp group {{bgp.name}} peer-as {{peer.autonomous_system}}
set groups {{cfg_group}} routing-instances {{ns.name}} protocols bgp group {{bgp.name}} neighbor {{peer.ip_address}}
{%             endfor %}
set groups {{cfg_group}} policy-options policy-statement {{bgp.name}}-export term DIRECT from protocol direct
set groups {{cfg_group}} policy-options policy-statement {{bgp.name}}-export term DIRECT then accept
{%         endfor %}
{%     endfor %}
{% endfor %}

{# Config for the interfaces of QFX to be in trunk mode #}
{% for ifd in device_abstract_config.get('physical_interfaces',[]) %}
{%    for ifl in ifd.get('logical_interfaces',[]) %}
{%        if ifl.get('comment','') == 'PNF-Service-Chaining' %}
set groups {{cfg_group}} interfaces {{ifd.get('name')}} unit {{ifl.get('unit')}} family {{ifl.get('family')}} interface-mode trunk
{%            for vlan in ifl.get('vlans',[]) %}
set groups {{cfg_group}} interfaces {{ifd.get('name')}} unit {{ifl.get('unit')}} family {{ifl.get('family')}} vlan members {{vlan.get('name')}}
{%            endfor %}
{%        endif %}
{%    endfor %}
{% endfor %}
