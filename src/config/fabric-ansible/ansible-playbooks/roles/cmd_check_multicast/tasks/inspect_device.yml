---

- name: "Read physical router properties: {{ item }}"
  vnc_db_mod:
    job_ctx: "{{ job_ctx }}"
    object_type: "physical_router"
    object_op: "read"
    object_dict: {"uuid": "{{ item }}"}
  register: physical_router_response

- name: "Fetch user and password for current device"
  set_fact:
    inspected_device_user: "" #TODO
    inspected_device_password: "" #TODO

- name: "Check if device {{ item }} is border leaf or server leaf"
  set_fact:
    border_leaf: "{{ 'CRB-MCAST-Gateway' in physical_router_response.obj.routing_bridging_roles.rb_roles }}"
    server_leaf: "{{ physical_router_response.obj.physical_router_role == 'leaf' }}"

- name: "Is it border leaf?"
  debug:
    var: border_leaf

- name: "Is it server leaf?"
  debug:
    var: server_leaf

- name: "Execute 'show igmp snooping membership {{ group }}' and 'show multicast snooping route extensive {{ group }}'"
  juniper_junos_command:
    commands:
      - "show igmp snooping membership {{ group }}"
      - "show multicast snooping route extensive group {{ group }}"
    display: xml
    provider:
      host: "{{ physical_router_response.obj.physical_router_management_ip }}"
      username: "{{ inspected_device_user }}"
      password: "{{ inspected_device_password }}"
      port: 22
      timeout: "{{ JUNOS_COMMAND_TIMEOUT|int }}"
  when: server_leaf == true
  register: server_leaf_query_response

- name: Print server_leaf_query_response
  debug:
    var: server_leaf_query_response
  when: server_leaf_query_response

- name: "Execute 'show route instance'"
  juniper_junos_command:
    commands:
      - "show route instance"
    display: xml
    provider:
      host: "{{ physical_router_response.obj.physical_router_management_ip }}"
      username: "{{ inspected_device_user }}"
      password: "{{ inspected_device_password }}"
      port: 22
      timeout: "{{ JUNOS_COMMAND_TIMEOUT|int }}"
  when: border_leaf == true
  register: show_route_instance_response

- name: Print show_route_instance_response
  debug:
    var: show_route_instance_response
  when: show_route_instance_response is defined

- name: Fetch routing intances from show_route_instance_response
  set_fact:
    routing_instances: "{{ show_route_instance_response | json_query('parsed_output.\"instance-information\".\"instance-core\"[*].\"instance-name\"') }}"
  when: show_route_instance_response is defined

- name: Print routing_instances
  debug:
    var: routing_instances
  when: routing_instances is defined

- name: "Execute 'show pim join instance <<instance>> extensive {{ group }}' and 'show multicast route instance <<instance>> group {{ group }} extensive'"
  juniper_junos_command:
    commands:
      - "show pim join instance {{ routing_instance }} extensive {{ group }}"
      - "show multicast route instance {{ routing_instance }} group {{ group }} extensive"
    display: xml
    provider:
      host: "{{ physical_router_response.obj.physical_router_management_ip }}"
      username: "{{ inspected_device_user }}"
      password: "{{ inspected_device_password }}"
      port: 22
      timeout: "{{ JUNOS_COMMAND_TIMEOUT|int }}"
  with_items: "{{ routing_instances }}"
  loop_control:
    loop_var: routing_instance
  when: border_leaf == true
  register: border_leaf_query_response

- name: "Extract information about upstream interfaces from border leaf query response"
  include_tasks: parse_border_leaf_response.yml
  with_items: "{{ border_leaf_query_response.results }}"
  loop_control:
    loop_var: border_leaf_results
  when: border_leaf == true

- name: Print border_leaf_query_response
  debug:
    var: border_leaf_query_response
  when: border_leaf_query_response is defined
