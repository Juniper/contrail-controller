- name: settings facts
  set_fact:
    phy_interface: "{{item}}"
- set_fact:
    phy_interface_name: "{{phy_interface.name|replace(':', '_')}}"
    log_interface_list: []

- set_fact:
    log_interface_list:
      - "{{phy_interface.unit}}"
  when: "'unit' in phy_interface"

- set_fact:
    log_interface_list:
      - "{{phy_interface['logical-interface']}}"
  when: "'logical-interface' in phy_interface"

- name: call vnc to create the physical-interface
  vnc_db_mod:
    object_type: "physical_interface"
    object_op: "create"
    object_dict: |
      {
        "parent_type": "physical-router",
        "fq_name": ["default-global-system-config", "{{prouter_name}}", "{{phy_interface_name}}"],
        "display_name": "{{phy_interface.name}}"
      }
    auth_token: "{{keystone.x_subject_token}}"
  register: post_resp_phy

#- debug:
#    msg: "{{post_resp_phy}}"

- set_fact:
    output: {
              "status": "Failure",
              "message": "{{post_resp_phy.msg}}",
              "results": "{{results}}"
            }
  when: "post_resp_phy.failed == true"

- meta: end_play
  when: "post_resp_phy.failed == true"

- set_fact:
    phy_uuid: {"physical_interface_uuid": "{{post_resp_phy.obj | from_json | json_query('\"physical-interface\".uuid')}}"}
  when: "'obj' in post_resp_phy"

- set_fact:
    phy_uuid: {"physical_interface_uuid": "{{post_resp_phy.uuid}}"}
  when: "'uuid' in post_resp_phy"
  
- set_fact:
    log_uuid_list: []

- name: create the configured log interface
  include_tasks: logical_interface_configured.yaml
  when: "'family' in item"
  with_items: "{{log_interface_list}}"

- name: create the runtime log interface
  include_tasks: logical_interface_runtime.yaml
  when: "'family' not in item"
  with_items: "{{log_interface_list}}"

- set_fact: 
    log_uuids: {"logical_interface_uuids": "{{log_uuid_list}}" }

- set_fact:
    result: "{{phy_uuid | combine(log_uuids)}}"

- set_fact:
    results: "{{results}}+[{{result}}]"
