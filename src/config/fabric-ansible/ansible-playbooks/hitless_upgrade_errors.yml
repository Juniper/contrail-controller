- set_fact:
    deactivate_due_to_errors: true

- name: Deactivate maintenance mode if config is pushed
  include_role:
    name: "maintenance_mode_deactivate"
  when: device_push_response is defined and device_push_response.failed == false and device_maintenance_mode == "activate"

- block:
  - block:
    - name: Get the next batch of devices and return to job manager
      set_fact:
        next_batch: "{{ job_ctx | hitless_next_batch(upgrade_plan, pr_uuid)}}"
    when: device_push_response is undefined

  - name: Set next_set
    set_fact:
      next_set: "{{next_batch.next.batch_devices}}"
    when: next_batch is defined
  when: upgrade_mode == 'upgrade'

- set_fact:
    output: {
       "status": "success",
       "retry_devices": "{{next_set if next_set is defined else {} }}",
       "message": "{{op_err_message}}",
       "results": "{{ results if results is defined else {} }}"
    }
  when: upgrade_mode == 'upgrade'

- name: Update prouter logs with failed status
  prouter_objectlog:
    prouter_fqname: "{{pr_fqname}}"
    onboarding_state: "{{ upgrade_error_state if upgrade_error_state is defined else DEVICE_STATE.HITLESS_IMAGE_UPGRADE_FAILED }}"
    job_ctx: "{{job_ctx}}"

- name: Get the previous error list if defined
  set_fact:
    failed_list: "{{playbook_input.input.failed_list}}"
  when: playbook_input.input.failed_list is defined

- name: Set the failed list for the first time
  set_fact:
    updated_list: "{{[pr_name]}}"

- name: Set failed list in output for the first time
  set_fact:
     output: "{{ output|combine({'failed_list': updated_list })}}"
  when: failed_list is not defined

- name: Length of retry devices
  set_fact:
    remaining_devices: "{{ next_set|length }}"
  when: next_set is defined

- block:
    - name: Grab the failed_list and append the new router name
      set_fact:
        updated_list: "{{ job_ctx | hitless_failure_update(failed_list, pr_name)}}"

    - name: Set the new output parameter to append the failed device
      set_fact:
         output: "{{ output|combine({'failed_list': updated_list })}}"
  when: failed_list is defined

- set_fact:
    output: {
       "status": "failure",
       "retry_devices": "{{next_set if next_set is defined else {} }}",
       "message": "The upgrade workflow has failed on one more devices. The list of failed devices is {{updated_list}}",
       "results": "{{ results if results is defined else {} }}"
    }
  when: upgrade_mode == 'upgrade' and remaining_devices=="0"

- name: Print output
  debug: var=output verbosity=1
