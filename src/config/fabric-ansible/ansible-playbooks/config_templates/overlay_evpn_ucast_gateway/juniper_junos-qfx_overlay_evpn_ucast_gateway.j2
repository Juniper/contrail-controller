set groups {{cfg_group}} protocols igmp-snooping vlan all proxy
set groups {{cfg_group}} protocols evpn multicast-mode ingress-replication
set groups {{cfg_group}} protocols evpn default-gateway do-not-advertise
set groups {{cfg_group}} forwarding-options multicast-replication evpn irb local-remote
{%     set sys_config = device_abstract_config.get('system', None) %}
{%     set is_ucast_gateway = sys_config.get('is_ucast_gateway_only', false) %}
{%     if device_model.startswith('qfx51') %}
set groups {{cfg_group}} forwarding-options vxlan-routing overlay-ecmp
{%     endif %}
{%     for phy_int in device_abstract_config.get('features', {}).get('l3-gateway', {}).get('physical_interfaces', []) %}
set groups {{cfg_group}} interfaces irb gratuitous-arp-reply
{%         for li in phy_int.get('logical_interfaces', []) %}
{%             set name = li.get('name') %}
{%             set unit = li.get('unit') %}
{%             for ip_addr in li.get('ip_addresses', []) %}
{%                 set address = ip_addr.get('address') %}
{%                 set family = ip_addr.get('family') %}
{%                 set gw = ip_addr.get('gateway') %}
{%                 set prefix = address.split('/') %}
set groups {{cfg_group}} protocols igmp interface {{name}}
set groups {{cfg_group}} interfaces irb unit {{unit}} family {{family}} address {{address}}
{%                 if (li.is_virtual_router == True) and (prefix[0] != gw) %}
set groups {{cfg_group}} interfaces irb unit {{unit}} family {{family}} address {{address}} preferred
set groups {{cfg_group}} interfaces irb unit {{unit}} family {{family}} address {{address}} virtual-gateway-address {{gw}}
{%                 endif %}
{%                 if is_ucast_gateway == true %}
set groups {{cfg_group}} interfaces irb unit {{unit}} mac 00:00:5e:01:00:01
{%                 endif %}
{%             endfor %}
{%             if li.is_virtual_router == True %}
set groups {{cfg_group}} protocols router-advertisement interface irb.{{unit}} virtual-router-only
{%             endif %}
{%         endfor %}
{%     endfor %}
{%     for vlan in device_abstract_config.get('features', {}).get('l3-gateway', {}).get('vlans', []) %}
{%         set vlan_name = vlan.get('name') %}
{%         set vni = vlan.get('vxlan_id') %}
{%         set vlanid = vlan.get('vlan_id', 'none') %}
set groups {{cfg_group}} vlans {{vlan_name}} description "{{vlan.get('description')}}"
{%         for intf in vlan.get('interfaces', []) %}
{%             set int_name = intf.get('name') %}
set groups {{cfg_group}} vlans {{vlan_name}} l3-interface {{int_name}}
{%             set ns_vlan = namespace(is_none=true) %}
{%             for ri in device_abstract_config.features.get('vn-interconnect').get('routing_instances', []) %}
{%                 set master = ri.get('is_master', false) %}
{%                 for int in ri.get('routing_interfaces', []) %}
{%                     if (master == true) and int.get('name') == int_name %}{# /* skipp if vlan=routing_instace irb belong to master LR */ #}
{%                         set ns_vlan.is_none = false %}
{%                     endif %}
{%                 endfor %}
{%             endfor %}
{%             if ns_vlan.is_none == true %}
set groups {{cfg_group}} vlans {{vlan_name}} vlan-id {{vlanid}}
set groups {{cfg_group}} vlans {{vlan_name}} vxlan vni {{vni}}
{%             endif %}
{%         endfor %}
{%     endfor %}
