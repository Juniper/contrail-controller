{%     set loopback_ip_list = device_abstract_config.get('system', {}).get('loopback_ip_list', []) %}
{%     set bf_global_asn = device_abstract_config.get('system', {}).get('brownfield_global_asn', '') %}
{%     set tunnel_destinations = device_abstract_config.get('features', {}).get('overlay-bgp',{}).get('tunnel_destination_networks', []) %}
{%     if loopback_ip_list|length > 0 %}
{%         set loopback_ip = loopback_ip_list[0] %}
{%         if loopback_ip %}
set groups {{cfg_group}} routing-options router-id {{loopback_ip}}
set groups {{cfg_group}} routing-options route-distinguisher-id {{loopback_ip}}
{%         endif %}
{%     endif %}

{%     set sys_config = device_abstract_config.get('system', None) %}
{%     set sys_roles = sys_config.get('routing_bridging_roles', []) %}
{%     for bgp in device_abstract_config.get('features', {}).get('overlay-bgp',{}).get('bgp', []) %}
set groups {{cfg_group}} routing-options resolution rib bgp.rtarget.0 resolution-ribs inet.0
set groups {{cfg_group}} routing-options autonomous-system {{bf_global_asn}} loops 2
{%         set bgp_group_name = bgp.get('name') %}
{%         set bgp_group_type = bgp.get('type_') %}
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} local-as {{bgp.autonomous_system}} loops 2
{%         set encap_priorities = device_abstract_config.get('system', {}).get('encapsulation_priorities', []) %}
{%         set mode = [] %}
{%         for encap_mode in encap_priorities %}
{%             if encap_mode != 'VXLAN' %}
{%                 do mode.append(encap_mode) %}
{%                 break %}
{%             endif %}
{%         endfor %}
{%         set dynamic_tunnels = false %}
{%         if mode|length > 0 and mode[0] == 'MPLSoUDP' and tunnel_destinations|length > 0 %}
{%             set tunnel_type = '_contrail_udp_tunnel' %}
set groups {{cfg_group}} routing-options dynamic-tunnels {{tunnel_type}} udp
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} export mpls_over_udp
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} vpn-apply-export
set groups {{cfg_group}} policy-options policy-statement mpls_over_udp term 1 then community add encap-udp
set groups {{cfg_group}} policy-options policy-statement mpls_over_udp term 1 then accept
set groups {{cfg_group}} policy-options community encap-udp members 0x030c:64512:13
{%             set dynamic_tunnels = true %}
{%         elif mode[0] == 'MPLSoGRE' and tunnel_destinations|length > 0 %}
{%             set tunnel_type = '_contrail_gre_tunnel' %}
set groups {{cfg_group}} routing-options dynamic-tunnels {{tunnel_type}} gre
{%             set dynamic_tunnels = true %}
{%         endif %}
{%         if dynamic_tunnels == true %}
set groups {{cfg_group}} routing-options dynamic-tunnels {{tunnel_type}} source-address {{bgp.get('ip_address')}}
{%             for net in tunnel_destinations %}
set groups {{cfg_group}} routing-options dynamic-tunnels {{tunnel_type}} destination-networks {{net.get('prefix')}}/{{net.get('prefix_len')}}
{%             endfor %}
{%         endif %}
{%         for peer in bgp.get('peers', []) %}
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} neighbor {{peer.get('ip_address')}} peer-as {{peer.get('autonomous_system')}}
{%         endfor %}
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} type {{bgp_group_type}}
{%         set cluster_id = bgp.get('cluster_id') %}
{%         if cluster_id != None %}
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} cluster {{cluster_id}}
{%         endif %}
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} local-address {{bgp.get('ip_address')}}
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} hold-time {{bgp.get('hold_time')}}
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} multipath
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} vpn-apply-export
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} bfd-liveness-detection minimum-interval 1000
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} bfd-liveness-detection multiplier 3
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} bfd-liveness-detection session-mode automatic
{%         for family in bgp.get('families', []) %}
{%             if family == 'inet-labeled' %}
{%                   set family = 'inet' %}
{%                   set mode = 'labeled-unicast' %}
{%             elif family.startswith('inet') %}
{%                   set mode='unicast' %}
{%             elif family == 'evpn' %}
{%                   set mode='signaling' %}
{%             else %}
{%                   set mode='' %}
{%             endif %}
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} family {{family}} {{mode}}
{%             if ('Route-Reflector' in sys_roles) and family.startswith('inet') %}
set groups {{cfg_group}} routing-options resolution rib bgp.l3vpn.0 resolution-ribs [inet.3 inet.0]
{%             endif %}
{%         endfor %}
{%         if bgp_group_type == 'external' %}
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} multihop no-nexthop-change
{%         endif %}
{%         if ('DC-Gateway' in sys_roles and bgp_group_type == 'internal') or (bgp_group_type == 'external') %}
{%             if bgp_group_type == 'internal' %}
{%                 set policy_name = '_contrail_ibgp_export_policy' %}
{%             else %}
{%                 set policy_name = '_contrail_ebgp_export_policy' %}
{%             endif %}
{%             for family in bgp.get('families', []) %}
{%                 if family.startswith('inet') %}
{%                     set family_input = family %}
{%                     if family == 'inet-labeled' %}
{%                         set family_input='inet' %}
{%                     endif %}
set groups {{cfg_group}} policy-options policy-statement {{ policy_name }} term {{family}} from family {{family_input}}
{%                     if 'Route-Reflector' in sys_roles %}
set groups {{cfg_group}} policy-options policy-statement {{ policy_name }} term {{family}} from route-type external
{%                     endif %}
set groups {{cfg_group}} policy-options policy-statement {{ policy_name }} term {{family}} then next-hop self
set groups {{cfg_group}} protocols bgp group {{bgp_group_name}} export {{ policy_name }}
{%                 endif %}
{%             endfor %}
{%         endif %}
{%     endfor %}
