{# This is to remove any existing storm control config as part of cluster upgrades #}
{# purge storm control config before creating port profile config #}
delete apply-groups __contrail_overlay_storm_control__
delete groups __contrail_overlay_storm_control__
{% set port_profiles = device_abstract_config.get('features', {}).get('port-profile',{}).get('port_profile', []) %}
{% set device_product_name = device_abstract_config.get('system', {}).get('product_name', '') %}
{% set pp_map = {} %}
{% for port_profile in port_profiles %}
{%     set pp_name = port_profile.get('name') %}
{%     set x= pp_map.update({pp_name: {}}) %}
{%     set port_params = port_profile.get('port_params', {}) %}
{%     set lacp_params = port_profile.get('lacp_params', {}) %}
{%     set flow_control = port_profile.get('flow_control')%}
{%     set loop_protection = port_profile.get('bpdu_loop_protection') %}
{%     set cos_untrust = port_profile.get('port_cos_untrust') %}
{%     set y= pp_map.get(pp_name, {}).update({
                                          'port_params': port_params,
                                          'lacp_params': lacp_params,
                                          'flow_control': flow_control,
                                          'loop_protection': loop_protection,
                                          'cos_untrust': cos_untrust
                                             }) %}
{% endfor %}
{% for phy_int in device_abstract_config.get('features', {}).get('port-profile', {}).get('physical_interfaces', []) %}
{% set cmd_fmt = namespace(command_format='gigether-options') %}
{%     if phy_int.get('name').startswith('ae') %}
{%         set cmd_fmt.command_format = 'aggregated-ether-options' %}
{%     endif %}
{%     set port_profile_name = phy_int.get('port_profile') %}
{%     set port_params = pp_map.get(port_profile_name, {}).get('port_params', {})%}
{%     set lacp_params = pp_map.get(port_profile_name, {}).get('lacp_params', {})%}
{%     set flow_control = pp_map.get(port_profile_name, {}).get('flow_control') %}
{%     set loop_protection = pp_map.get(port_profile_name, {}).get('loop_protection') %}
{%     set cos_untrust = pp_map.get(port_profile_name, {}).get('cos_untrust') %}
{%     if flow_control == True %}
set groups {{cfg_group}} interfaces {{phy_int.name}} {{cmd_fmt.command_format}} flow-control
{%     endif %}
{%     if loop_protection == True %}
set groups {{cfg_group}} protocols rstp interface {{phy_int.name}} edge
set groups {{cfg_group}} protocols rstp bpdu-block-on-edge
{%     endif %}
{%     if cos_untrust == True %}
set groups {{cfg_group}} class-of-service classifiers ieee-802.1 IP-UNTRUST forwarding-class best-effort loss-priority low code-points [000 001 010 011 100 101 110 111]
set groups {{cfg_group}} class-of-service interfaces {{phy_int.name}} unit 0 classifiers ieee-802.1 IP-UNTRUST
{%     endif %}
{%     if port_params %}
{%         if port_params.get('port_disable') == True %}
set groups {{cfg_group}} interfaces {{phy_int.name}} disable
{%         endif %}
{%         if port_params.get('port_mtu') %}
{%             if port_params.get('port_mtu') <= 9192 %}
set groups {{cfg_group}} interfaces {{phy_int.name}} mtu {{port_params.get('port_mtu')}}
{%             endif %}
{%         endif %}
{%         if port_params.get('port_description') %}
set groups {{cfg_group}} interfaces {{phy_int.name}} description "{{port_params.get('port_description')}}"
{%         endif %}
{%     endif %}
{%     if lacp_params and phy_int.get('name').startswith('ae') %}
{%         if lacp_params.get('lacp_enable') == True %}
set groups {{cfg_group}} interfaces {{phy_int.name}} {{cmd_fmt.command_format}} lacp
{%         endif %}
{%         if lacp_params.get('lacp_interval') %}
set groups {{cfg_group}} interfaces {{phy_int.name}} {{cmd_fmt.command_format}} lacp periodic {{lacp_params.get('lacp_interval')}}
{%         endif %}
{%         if lacp_params.get('lacp_mode') %}
set groups {{cfg_group}} interfaces {{phy_int.name}} {{cmd_fmt.command_format}} lacp {{lacp_params.get('lacp_mode')}}
{%         endif %}
{%     endif %}
{% endfor %}
