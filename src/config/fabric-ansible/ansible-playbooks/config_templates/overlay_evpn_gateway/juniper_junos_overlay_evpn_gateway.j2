{% set sys_config = device_abstract_config.get('system', None) %}
{% set sys_roles = sys_config.get('routing_bridging_roles', []) %}
{%     for phy_int in device_abstract_config.get('features', {}).get('l3-gateway', {}).get('physical_interfaces', []) %}
{%         if phy_int.get('interface_type') == 'irb' %}
set groups {{cfg_group}} interfaces irb gratuitous-arp-reply
{%             for li in phy_int.get('logical_interfaces', []) %}
{%                 set unit = li.get('unit') %}
{%                 for ip_addr in li.get('ip_addresses', []) %}
{%                     set address = ip_addr.get('address') %}
{%                     set family = ip_addr.get('family', 'inet') %}
{%                     set gw = ip_addr.get('gateway', '') %}
{%                     if 'PublicVN: True' in li.get('comment', '') %}
{%                         set irb_mac = '00:00:5e:01:00:02' %}
{%                     else %}
{%                         set irb_mac = '00:00:5e:01:00:01' %}
{%                     endif %}
set groups {{cfg_group}} interfaces irb unit {{unit}} family {{family}} address {{address}} preferred
{%                     if family == 'inet' %}
set groups {{cfg_group}} interfaces irb unit {{unit}} virtual-gateway-v4-mac {{ irb_mac }}
{%                     elif family == 'inet6' %}
set groups {{cfg_group}} interfaces irb unit {{unit}} virtual-gateway-v6-mac {{ irb_mac }}
{%                     endif %}
{%                     if gw != '' %}
set groups {{cfg_group}} interfaces irb unit {{unit}} family {{family}} address {{address}} virtual-gateway-address {{gw}}
{%                     endif %}
{%                 endfor %}
{%                 if li.is_virtual_router == True %}
set groups {{cfg_group}} protocols router-advertisement interface irb.{{unit}} virtual-router-only
{%                 endif %}
set groups {{cfg_group}} interfaces irb unit {{unit}} proxy-macip-advertisement
set groups {{cfg_group}} interfaces irb unit {{unit}} virtual-gateway-accept-data
{%             endfor %}
{%         endif %}
{%     endfor %}
{# TODO: This is not required - we can take care in the evpn type5 template #}
{#     for phy_int in device_abstract_config.get('features', {}).get('vn-interconnect', {}).get('physical_interfaces', []) %}
{%         if 'nat' in ri.get('name', '') %}
{%             continue %}
{%         endif %}
{%         set ri_vn_mode = ri.get('virtual_network_mode', '') %}
{%         if ('l3' == ri_vn_mode) and ('l3' in ri.name) and ri.get('virtual_network_is_internal') == true %}
{%             set contrail_l3_ri = ri.get('description', '')[:127] %}
{%             set vn_id  = ri.get('virtual_network_id') | int %}
{%             set vn_id_num_l3  = vn_id + 30000 %}
{%             set router_external = ri.get('is_public_network', '') %}
{%             for bgp_elem in device_abstract_config.get('features', {}).get('overlay-bgp',{}).get('bgp', []) %}
{%                 set families = bgp_elem.get('families', []) %}
{%                 for fam in families %}
{%                     if fam == 'evpn' %}
{%                         set route_distinguisher = bgp_elem.get('ip_address') %}
{%                         set as_number = bgp_elem.get('autonomous_system') %}
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} instance-type vrf
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} route-distinguisher {{route_distinguisher}}:{{vn_id_num_l3}}
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} vrf-target target:{{as_number | asnfilter}}:{{vn_id_num_l3}}
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} routing-options auto-export
{%                         if ('DC-Gateway' in sys_roles or 'DCI-Gateway' in sys_roles) %}
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} vrf-import REJECT-MAINTENANCE-MODE
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} vrf-table-label
{%                         endif %}
{%                     endif %}
{%                 endfor %}
{%             endfor %}
{%             if ('DC-Gateway' in sys_roles or 'DCI-Gateway' in sys_roles) %}
{%                 set inet_vars = namespace(inet4='no', inet6='no') %}
{%                 for subnet in ri.get('prefixes', []) %}
{%                     set cidr = subnet.get('prefix') + '/' + (subnet.get('prefix_len')|string) %}
{%                     if (':' in cidr) %}
{%                         if inet_vars.inet6 == 'no' %}
{%                             set inet_vars.inet6 = 'yes' %}
{%                         endif %}
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} routing-options rib {{contrail_l3_ri}}.inet6.0 static route {{cidr}} discard
{%                         if ri.get('is_public_network') == true  %}
set groups {{cfg_group}} routing-options rib inet6.0 static route {{cidr}} discard
{%                         endif %}
{%                     else %}
{%                         if inet_vars.inet4 == 'no' %}
{%                             set inet_vars.inet4 = 'yes' %}
{%                         endif %}
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} routing-options static route {{cidr}} discard
{%                         if ri.get('is_public_network') == true  %}
set groups {{cfg_group}} routing-options static route {{cidr}} discard
{%                         endif %}
{%                     endif %}
{%                 endfor %}
{%                 if inet_vars.inet4 == 'yes' %}
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} routing-options auto-export family inet unicast
{%                 endif %}
{%                 if inet_vars.inet6 == 'yes' %}
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} routing-options auto-export family inet6 unicast
{%                 endif %}
{%             endif %}
{%             for lo_int in ri.get('loopback_interfaces', []) %}
{%                 set int_name = lo_int.get('name', '') %}
{%                 set unit_num = int_name.split('.')[-1] %}
set groups {{cfg_group}} interfaces lo0 unit {{unit_num}} family inet address 127.0.0.1/32
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} interface {{int_name}}
{%             endfor %}
{%             for irb_int in ri.get('routing_interfaces', []) %}
{%                 set irb_name = irb_int.get('name') %}
set groups {{cfg_group}} routing-instances {{contrail_l3_ri}} interface {{irb_name}}
{%             endfor %}
{%         endif %}
{%      endfor #}
