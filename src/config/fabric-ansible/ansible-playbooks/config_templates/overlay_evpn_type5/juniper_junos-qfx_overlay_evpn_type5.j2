set groups {{cfg_group}} routing-options forwarding-table chained-composite-next-hop ingress evpn
set groups {{cfg_group}} policy-options policy-statement type5_policy term 1 from protocol direct
set groups {{cfg_group}} policy-options policy-statement type5_policy term 1 then accept
set groups {{cfg_group}} policy-options policy-statement type5_policy term 2 from protocol static
set groups {{cfg_group}} policy-options policy-statement type5_policy term 2 then accept
set groups {{cfg_group}} policy-options policy-statement type5_policy term 3 from protocol evpn
set groups {{cfg_group}} policy-options policy-statement type5_policy term 3 from route-filter 0.0.0.0/0 prefix-length-range /32-/32
set groups {{cfg_group}} policy-options policy-statement type5_policy term 3 then accept
{% set dummy_ip = device_abstract_config.get('system', {}).get('dummy_ip') %}
{%     for ri in device_abstract_config.features.get('vn-interconnect').get('routing_instances', []) %}
{%         set name = ri.get('name', '')[:127] %}
{%         set vxlan_id = ri.get('vxlan_id') %}
{%         set router_external = ri.get('is_public_network', '') %}
{%         for lo_int in ri.get('loopback_interfaces', []) %}
{%             set int_name = lo_int.get('name', '') %}
{%             set unit_num = int_name.split('.')[-1] %}
set groups {{cfg_group}} interfaces lo0 unit {{unit_num}} family inet address 127.0.0.1/32
set groups {{cfg_group}} routing-instances {{name}} interface {{int_name}}
{%         endfor %}
set groups {{cfg_group}} routing-instances {{name}} routing-options multipath
set groups {{cfg_group}} routing-instances {{name}} routing-options rib {{name}}.inet6.0 multipath
set groups {{cfg_group}} routing-instances {{name}} routing-options static route {{dummy_ip}}/32 discard
set groups {{cfg_group}} protocols evpn default-gateway no-gateway-community
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes advertise direct-nexthop
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes encapsulation vxlan
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes vni {{vxlan_id}}
set groups {{cfg_group}} routing-instances {{name}} protocols evpn ip-prefix-routes export type5_policy
set groups {{cfg_group}} routing-instances {{name}} instance-type vrf
{%         set vrf_import = name+'-import' %}
{%         set vrf_export = name+'-export' %}
set groups {{cfg_group}} routing-instances {{name}} vrf-import {{vrf_import}}
set groups {{cfg_group}} routing-instances {{name}} vrf-export {{vrf_export}}
{%         for irb_int in ri.get('routing_interfaces', []) %}
{%             set irb_name = irb_int.get('name') %}
set groups {{cfg_group}} routing-instances {{name}} interface {{irb_name}}
{%         endfor %}
{%         for route in ri.get('static_routes', []) %}
{%             set cidr = route.get('prefix') %}
{%             set next_hop = route.get('next_hop') %}
set groups {{cfg_group}} routing-instances {{name}} routing-options static route {{cidr}} next-hop {{next_hop}}
{%         endfor %}
{%         for protocols in ri.get('protocols', []) %}
{%             for bgp in protocols.get('bgp', []) %}
{%                 set bgp_name = bgp.get('name') %}
{%                 set bgp_local_as = bgp.get('autonomous_system') %}
{%                 set bgp_auth_key = bgp.get('authentication_key', '') %}
{%                 if bgp_auth_key != '' %}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} authentication-key {{bgp_auth_key}}
{%                 endif %}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} type external
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} local-as {{bgp_local_as}}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} multipath
{%                 for peer in bgp.get('peers', []) %}
{%                     set peer_ip = peer.get('ip_address') %}
{%                     set peer_as = peer.get('autonomous_system') %}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} neighbor {{peer_ip}} peer-as {{peer_as}}
{%                 endfor %}
{%                 set bfd = bgp.get('bfd', {}) %}
{%                 if bfd|length > 0 %}
{%                      set rx_tx_interval = bfd.get('rx_tx_interval') %}
{%                      set detection_time_multiplier = bfd.get('detection_time_multiplier') %}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} bfd-liveness-detection minimum-interval {{rx_tx_interval}}
set groups {{cfg_group}} routing-instances {{name}} protocols bgp group {{bgp_name}} bfd-liveness-detection multiplier {{detection_time_multiplier}}
{%                 endif %}
{%             endfor %}
{%         endfor %}
{%         set sys_config = device_abstract_config.get('system') %}
{%         set sys_roles = sys_config.get('routing_bridging_roles', []) %}
{%         if (router_external == true and ('DC-Gateway' in sys_roles or 'DCI-Gateway' in sys_roles)) %}
set groups {{cfg_group}} routing-instances {{name}} routing-options static route 0.0.0.0/0 next-table inet.0
set groups {{cfg_group}} forwarding-options family inet filter input redirect_to_public_vrf_filter
{%             for subnet in ri.get('prefixes', []) %}
{%                 set cidr = subnet.get('prefix') + '/' + (subnet.get('prefix_len')|string) %}
set groups {{cfg_group}} firewall family inet filter redirect_to_public_vrf_filter term term-{{vxlan_id}} from destination-address {{cidr}}
{%             endfor %}
set groups {{cfg_group}} firewall family inet filter redirect_to_public_vrf_filter term term-{{vxlan_id}} then routing-instance {{name}}
set groups {{cfg_group}} firewall family inet filter redirect_to_public_vrf_filter term default-term then accept
{%         endif %}
{%     endfor %}
