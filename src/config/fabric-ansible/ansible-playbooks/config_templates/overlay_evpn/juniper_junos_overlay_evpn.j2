{% set sys_config = device_abstract_config.get('system', None) %}
{% set sys_roles = sys_config.get('routing_bridging_roles', []) %}
set groups {{cfg_group}} policy-options policy-statement EVPN-LB term term1 from protocol evpn
set groups {{cfg_group}} policy-options policy-statement EVPN-LB term term1 then load-balance per-packet
set groups {{cfg_group}} routing-options forwarding-table export EVPN-LB
{% set ris = device_abstract_config.get('features', {}).get('l2-gateway',{}).get('routing_instances', []) %}
{% set ris = ris + device_abstract_config.get('features', {}).get('vn-interconnect',{}).get('routing_instances', []) %}
{% for ri in device_abstract_config.get('features', {}).get('l3-gateway',{}).get('routing_instances', []) %}
{%     if ri.get('is_public_network') == true %}
{%         do ris.append(ri) %}
{%     endif %}
{% endfor %}
{% for ri in ris %}
{%     set name = ri.get('name', '')[:127] %}
{%     if (ri.get('virtual_network_is_internal') == true) and ('vrf' in ri.get('routing_instance_type', '')) %}
{%         set name = ri.get('description', '')[:127] %}
{%     endif %}
{%     set vrf_import = name+'-import' %}
{%     set vrf_export = name+'-export' %}
{%     for import_target in ri.get('import_targets', []) %}
{%         set community_target = import_target.replace(':', '_') %}
set groups {{cfg_group}} policy-options policy-statement {{vrf_import}} term t1 from community {{community_target}}
set groups {{cfg_group}} policy-options community {{community_target}} members {{import_target  | rtfilter}}
{%     endfor %}
set groups {{cfg_group}} policy-options policy-statement {{vrf_import}} term t1 then accept
{%     for export_target in ri.get('export_targets', []) %}
{%         set community_target = export_target.replace(':', '_') %}
{# We need to export the evpn family routes in case of non-public LR. For DC-GW we use public LR and we need the L3VPN routes. #}
{%         if ri.get('virtual_network_is_internal') == true and ('vrf' in ri.get('routing_instance_type', '')) and ri.get('is_public_network') == false %}
set groups {{cfg_group}} policy-options policy-statement {{vrf_export}} term t1 to family evpn
{%         endif %}
set groups {{cfg_group}} policy-options policy-statement {{vrf_export}} term t1 then community add {{community_target}}
set groups {{cfg_group}} policy-options community {{community_target}} members {{export_target  | rtfilter}}
{%     endfor %}
set groups {{cfg_group}} policy-options policy-statement {{vrf_export}} term t1 then accept
{% endfor %}
{% for bgp_elem in device_abstract_config.get('features', {}).get('overlay-bgp', {}).get('bgp', []) %}
{%     set families = bgp_elem.get('families', []) %}
{%     for fam in families %}
{%         if fam == 'evpn' %}
{%             set route_distinguisher = bgp_elem.get('ip_address') %}
{%             set as_number = bgp_elem.get('autonomous_system') %}
{%             if (as_number|int) <= 65535 %}
{%                 set esi_rt = (as_number|string) + ':7999999' %}
{%             else %}
{%                 set esi_rt = (as_number|string) + 'L:7999' %}
{%             endif %}


set groups {{cfg_group}} policy-options community community-esi-in members target:{{esi_rt}}
set groups {{cfg_group}} policy-options policy-statement import-evpn term esi-in from community community-esi-in
set groups {{cfg_group}} policy-options policy-statement import-evpn term esi-in then accept
set groups {{cfg_group}} policy-options policy-statement import-evpn term default-term then reject

{%             for ri in device_abstract_config.get('features', {}).get('l2-gateway',{}).get('routing_instances', []) %}
{%                 set ri_name = ri.get('name', '')[:127] %}
{%                 set vxlan_id = ri.get('vxlan_id', '') %}
{%                 set vn_id  = ri.get('virtual_network_id') %}
{%                 set vrf_import = ri_name+'-import' %}
{%                 set vrf_export = ri_name+'-export' %}
set groups {{cfg_group}} routing-instances {{ri_name}} protocols evpn encapsulation vxlan
set groups {{cfg_group}} routing-instances {{ri_name}} instance-type virtual-switch
set groups {{cfg_group}} routing-instances {{ri_name}} protocols evpn extended-vni-list all
set groups {{cfg_group}} routing-instances {{ri_name}} protocols evpn default-gateway do-not-advertise
set groups {{cfg_group}} routing-instances {{ri_name}} vtep-source-interface lo0.0
set groups {{cfg_group}} routing-instances {{ri_name}} route-distinguisher {{route_distinguisher}}:{{vn_id}}
set groups {{cfg_group}} routing-instances {{ri_name}} vrf-target target:{{esi_rt}}
set groups {{cfg_group}} routing-instances {{ri_name}} vrf-import {{vrf_import}}
set groups {{cfg_group}} routing-instances {{ri_name}} vrf-export {{vrf_export}}
{%                 for vlan in device_abstract_config.get('features', {}).get('l2-gateway',{}).get('vlans', []) %}
{%                     set vlan_vxlan_id = vlan.get('vxlan_id','') %}
{%                     set vlan_name = vlan.get('name','') %}
{%                     set vlan_id = vlan.get('vlan_id','none') %}
{%                     if vxlan_id|int() == vlan_vxlan_id|int() %}
{%                        set l2_ifs = vlan.get('interfaces', []) %}
set groups {{cfg_group}} routing-instances {{ri_name}} bridge-domains {{vlan_name}} vlan-id {{vlan_id}}
set groups {{cfg_group}} routing-instances {{ri_name}} bridge-domains {{vlan_name}} description "{{vlan.description}}"
{%                        if ('CRB-MCAST-Gateway' in sys_roles) %}
set groups {{cfg_group}} routing-instances {{ri_name}} bridge-domains {{vlan_name}} protocols igmp-snooping proxy
{%                        endif %}
set groups {{cfg_group}} routing-instances {{ri_name}} bridge-domains {{vlan_name}} vxlan vni {{vxlan_id}}
set groups {{cfg_group}} routing-instances {{ri_name}} protocols evpn extended-vni-list {{vxlan_id}}
set groups {{cfg_group}} routing-instances {{ri_name}} bridge-domains {{vlan_name}} vxlan ingress-node-replication
{%                        for l2_if in l2_ifs %}
set groups {{cfg_group}} routing-instances {{ri_name}} bridge-domains {{vlan_name}} interface {{l2_if.name}}
{%                        endfor %}
{%                     endif %}
{%                 endfor %}
{%                 for vlan in device_abstract_config.get('features', {}).get('l3-gateway',{}).get('vlans', []) %}
{%                     set vlan_vxlan_id = vlan.get('vxlan_id','') %}
{%                     set vlan_name = vlan.get('name','') %}
{%                     if vxlan_id|int() == vlan_vxlan_id|int() %}
{%                         set l3_ifs = vlan.get('interfaces', []) %}
{%                         for l3_if in l3_ifs %}
set groups {{cfg_group}} routing-instances {{ri_name}} bridge-domains {{vlan_name}} routing-interface {{l3_if.name}}
{%                         endfor %}
{%                     endif %}
{%                 endfor %}
{%             endfor %}
{%         endif %}
{%     endfor %}
{% endfor %}
