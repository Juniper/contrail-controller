---
- name: Determine upgrade strategy and start sending upgrade batches

  hosts: localhost
  gather_facts: no
  connection: local

  vars:
    image_upgrade_list: "{{playbook_input.input.image_devices}}"
    upgrade_mode: "{{playbook_input.input.upgrade_mode}}"
    output: {"status":"", "message":""}

  tasks:
    - name: Include global variables
      include_vars: group_vars/all.yml

    - set_fact:
        job_ctx: "{{job_ctx|combine({'total_task_count':1, 'task_weightage_array':[100] })}}"

    - name: Create hitless upgrade plan
      set_fact:
        upgrade_plan: "{{ job_ctx | hitless_upgrade_plan(image_upgrade_list) }}"

    - name: Check for errors
      block:
        - name: Perform the necessary error handling
          include_tasks: error_handler.yml
          vars:
            op_err_message: "{{upgrade_plan.error_msg}}"
            jl_err_message: "Failed creating upgrade plan: {{upgrade_plan.error_msg}}"
      when: upgrade_plan.status == 'failure'

    - name: Print upgrade_plan
      debug: var=upgrade_plan verbosity=1

    - name: Exit if nothing to do
      set_fact:
         output: "{{ output|combine({'early_exit': True})}}"
      when: upgrade_plan.device_count == 0

    - name: Update prouter state on skipped devices
      prouter_objectlog:
        prouter_fqname: "{{item.value.basic.device_fqname}}"
        onboarding_state: "{{DEVICE_STATE.SKIPPED}}"
        job_ctx: "{{job_ctx}}"
      with_dict: "{{upgrade_plan.skipped_device_table}}"
      when: upgrade_plan.skipped_device_table|length>0

    - name: If test run, return all devices to job manager
      set_fact:
        first_batch: "{{ job_ctx | hitless_all_devices(upgrade_plan) }}"
      when: upgrade_mode == 'test_run'

    - name: Get first batch of devices and return to job manager
      set_fact:
        first_batch: "{{ job_ctx | hitless_next_batch(upgrade_plan, '') }}"
      when: upgrade_mode == 'upgrade'

    - name: Check for errors
      block:
        - name: Perform the necessary error handling
          include_tasks: error_handler.yml
          vars:
            op_err_message: "{{first_batch.error_msg}}"
            jl_err_message: "Failed getting first batch: {{first_batch.error_msg}}"
      when: first_batch.status == 'failure'

    - name: Update job log with percentage
      include_tasks: percentage_update.yml
      vars:
        current_index: 1
        jl_message: "Successfully created upgrade plan:\n {{upgrade_plan.results}}"

    - name: set output parameter
      set_fact:
         output: "{{ output|combine({'status':'SUCCESS', 'message':'Created upgrade plan', 'results': upgrade_plan.results, 'upgrade_plan': upgrade_plan, 'total_job_task_count': upgrade_plan.device_count, 'advanced_parameters': upgrade_plan.advanced_parameters})}}"

    - name: set output parameter
      set_fact:
         output: "{{ output|combine({'device_json': first_batch.next.batch_devices })}}"
      when: first_batch.next.batch_devices

    - name: Print output
      debug: var=output verbosity=1
