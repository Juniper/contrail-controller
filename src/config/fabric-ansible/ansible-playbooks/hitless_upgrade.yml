---

- name: Hitless image upgrade workflow
  hosts: localhost
  gather_facts: no
  connection: local
  roles:
    - Juniper.junos
  vars:
    upgrade_mode: "{{playbook_input.input.upgrade_mode}}"
    pr_name: "{{playbook_input.device_fqname[-1]}}"
    pr_uuid: "{{playbook_input.device_id}}"
    image_upgrade_list: "{{playbook_input.input.image_devices}}"
    upgrade_plan: "{{playbook_input.input.upgrade_plan}}"
    current_index: 0
    is_hitless_upgrade: "{{playbook_input.device_hitless_upgrade}}" #assuming this will be a boolean value
    hitless_dict:
      total_task_count: 9
      task_weightage_array: [5, 10, 5, 25, 25, 10, 5, 10, 5]
    non_hitless_dict:
      total_task_count: 5
      task_weightage_array: [5, 35, 40, 10, 10]

  tasks:
    - name: Include global variables
      include_vars: group_vars/all.yml

    - name: Set auto increment
      set_fact:
        percentage_auto_increment: true

    - set_fact:
        final_task_array: "{% if is_hitless_upgrade -%}{{hitless_dict}}{%else-%}{{non_hitless_dict}}{%- endif %}"

    - set_fact:
        job_ctx: "{{job_ctx|combine(final_task_array)}}"

    - name: Get advanced parameters
      set_fact:
        advanced_params: "{{upgrade_plan.advanced_parameters}}"

    - block:
        - name: Run health check only
          include_role:
            name: maintenance_mode_validation
          vars:
            mode: "{{upgrade_mode}}"

        - set_fact:
            output: {
                  "status": "Success",
                  "message": "Device {{pr_name}} has been verified to be healthy for upgrade."
                    }

        - name: Print the output
          debug:
            var: output
            verbosity: 1

        - block:
            - name: Validation for critical roles
              set_fact:
                critical_role_validation_results: "{{job_ctx | validate_hitless_critical_roles(image_upgrade_list)}}"

            - name: Check for failure
              block:
                  - name: Perform the necessary error handling
                    include_tasks: error_handler.yml
                    vars:
                        op_err_message: "{{critical_role_validation_results.error_msg}}"
                        jl_err_message: "{{critical_role_validation_results.error_msg}}"
              when: critical_role_validation_results.status == 'failure' and advanced_params.health_check_abort == true

            - name: Update percentage
              include_tasks: percentage_update.yml
              vars:
                jl_message: >
                  "{{critical_role_validation_results.error_msg}}""
          when: true
          # This block is always triggered. After adding checkbox
          # in the UI for validation of critical roles,
          # the when condition should be changed to -
          #when: advanced_params.validate_critical_roles == true

      when: upgrade_mode == 'test_run'

    - block:
        - block:
            - name: Run health check
              include_role:
                name: maintenance_mode_validation

            - name: Push config to multihomed peers
              include_role:
                name: maintenance_mode_config_push_peers
              when: physical_role == 'leaf'

            - name: Push config
              include_role:
                name: maintenance_mode_config_push

            - name: Change managed state to maintenance
              vnc_db_mod:
                job_ctx: "{{ job_ctx }}"
                object_type: "physical_router"
                object_op: "update"
                object_dict: |
                  {
                     "uuid": "{{ pr_uuid }}",
                     "physical_router_managed_state": "maintenance"
                  }

            - name: Upgrade devices
              include_role:
                name: image_upgrade_role

            - name: Deactivate maintenance mode
              include_role:
                name: maintenance_mode_deactivate

            - name: Change managed state to active
              vnc_db_mod:
                job_ctx: "{{ job_ctx }}"
                object_type: "physical_router"
                object_op: "update"
                object_dict: |
                  {
                     "uuid": "{{ pr_uuid }}",
                     "physical_router_managed_state": "active"
                  }

          when: is_hitless_upgrade

        - block:
            - name: Upgrade devices
              include_role:
                name: image_upgrade_role
          when: not is_hitless_upgrade

        - name: Get next batch of devices and return to job manager
          set_fact:
            next_batch: "{{ job_ctx | hitless_next_batch(upgrade_plan, pr_uuid)}}"

        - set_fact:
                next_set: "{{next_batch.next.batch_devices}}"

        - name: Grab the failed devices list if defined
          set_fact:
            failed_list: "{{playbook_input.input.failed_list}}"
          when: playbook_input.input.failed_list is defined

        - name: Grab length of previous error list
          set_fact:
            failed_list_length: "{{ failed_list|length }}"
          when: failed_list is defined

        - name: Grab length of retry devices
          set_fact:
            remaining_devices: "{{ next_set|length }}"
          when: next_set is defined

        - set_fact:
                output: {
                      "status": "Success.",
                      "retry_devices": "{{next_set}}",
                      "failed_list" :"{{failed_list if failed_list is defined else []}}",
                      "message": "{% if next_set | length > 0 -%}
                                  Finished upgrading device {{pr_name}}. Starting hitless image upgrade on {{next_batch.next.batch_name}}.
                                  {% else -%}
                                  Hitless image upgrade has finished successfully on all devices.{%- endif %}"
                       }

        - set_fact:
                output: {
                  "status": "Failure",
                  "retry_devices": "{{next_set}}",
                  "message": "Hitless image upgrade has failed on one or more devices. The failure list is {{failed_list}}"
                }
          when: failed_list_length is defined and failed_list_length > "0" and remaining_devices == "0"


        - name: Print the output.
          debug:
            var: output
            verbosity: 1
      when: upgrade_mode == 'upgrade'
