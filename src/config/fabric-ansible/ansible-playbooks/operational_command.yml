---
- name: Generic Device Operations entry point

  hosts: localhost
  gather_facts: no
  connection: local

  vars:
    input: "{{ playbook_input.input }}"
    device_op: "{{ playbook_input.job_template_fqname[-1].split('_template')[0] }}"
    device_family: "{{ playbook_input.device_family }}"
    device_vendor: "{{ playbook_input.vendor | lower }}"
    device_management_ip: "{{playbook_input.device_management_ip}}"
    device_username: "{{playbook_input.device_username}}"
    device_password: "{{playbook_input.device_password}}"
    device_name: "{{playbook_input.device_fqname[-1]}}"
    results: {}
    command_resp: {}
    command_output: {}
    command_dir: "generic_device_operations/{{device_op}}"

  pre_tasks:
    - set_fact:
        job_ctx: "{{job_ctx|combine({'total_task_count':2, 'task_weightage_array':[30, 70] })}}"

    - name: create folder for json results
      file:
        path: "{{ command_dir }}"
        state: directory

  tasks:
    - name: call the appropriate command role
      block:
        - name: check to see if the ansible file for the vendor and family exists
          stat:
            path: "roles/cmd_{{device_op}}/tasks/{{device_vendor}}_{{device_family}}.yml"
          register: p

        # the following block assumes that if a vendor_family specific playbook is available, then the jinja parsing
        # must also be vendor_family specific
        - name: Execute commands on device using just the vendor file and parse the output using the vendor.j2 file
          block:
            - name: Execute commands on device using the vendor file and record the resp in command_resp
              include_tasks: "roles/cmd_{{device_op}}/tasks/{{device_vendor}}.yml"

            - name: Update Percentage and Job log with command executed on device status
              include_tasks: percentage_update.yml
              vars:
                current_index: 1
                prouter_name: "{{device_name}}"
                jl_message: "Executed command: {{device_op}} on {{device_name}}"

            - name: parse the command_resp into the output schema format (mentioned under command_output)
              template:
                src: "roles/cmd_{{device_op}}/templates/{{device_vendor}}.j2"
                dest: "{{ command_dir }}/{{device_management_ip}}.json"
          vars:
            input_params: "{{input}}"
            command_resp: "{{command_resp}}"
          when: p.stat.exists == False

        # the following block assumes that if the playbook is family agnostic, then the jinja parsing for the command's
        # response from the device must also be family agnostic given that the device operation is same.
        - name: Execute commands on device using the vendor_family file and parse the output using the vendor_family.j2 file
          block:
            - name: Execute commands on device using the vendor_family file and record the resp in command_resp
              include_tasks: "roles/cmd_{{device_op}}/tasks/{{device_vendor}}_{{device_family}}.yml"

            - name: Update Percentage and Job log with command executed on device status
              include_tasks: percentage_update.yml
              vars:
                current_index: 1
                prouter_name: "{{device_name}}"
                jl_message: "Executed command: {{device_op}} on {{device_name}}"

            - name: parse the command_resp into the output schema format (mentioned under command_output)
              template:
                src: "roles/cmd_{{device_op}}/templates/{{device_vendor}}_{{device_family}}.j2"
                dest: "{{ command_dir }}/{{device_management_ip}}.json"
          vars:
            input_params: "{{input}}"
            command_resp: "{{command_resp}}"
          when: p.stat.exists == True

        - name:
          include_vars:
            file: "{{ command_dir }}/{{device_management_ip}}.json"
            name: command_output
      rescue:
        - name: Perform the necessary error handling
          include_tasks: error_handler.yml
          when: "'failed' in command_resp and command_resp.failed == true"
          vars:
            op_err_message: "Error while trying to execute command: {{command_resp.msg}}"
            jl_err_message: "Error while trying to execute command: {{command_resp.msg}}"

        # this is when the playbook has to end for other failures
        - meta: end_play

    - name: print command response
      debug: var=command_output verbosity=1

    - set_fact:
        results: "{{results|combine({
          'device_name': device_name,
          'command_output': command_output
        })}}"

    - set_fact:
        output: {
              "status": "Success",
              "message": "Generic Device Operation for device: {{device_name}} successful",
              "results": "{{results}}"
            }

    - name: insert/update in /tmp/<exec-id> file
      set_fact:
        write_resp: "{{job_ctx | report_playbook_results(results)}}"

    - name: Update Percentage and Job log with generic device job completed status
      include_tasks: percentage_update.yml
      vars:
        current_index: 2
        jl_message: "Completed generic device operation for {{device_name}}"
        prouter_name: "{{device_name}}"

