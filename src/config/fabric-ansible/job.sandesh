//
// job.sandesh
//
// UVE Job Execution
//
// Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
//

// This is the structure sent by an application to the Collector to represent
// all or part of the Config state of the UVE on this app instance.
//

/**
 * objectlog that stores the device onboarding info
 */
struct PRouterOnboardingLogEntry {
    /* PRouter fq_name as string joined by ':', e.g. domain-1:project-1:mx240-1. */
    1: string                           name (key="ObjectPRouter");
    2: i64                              timestamp;
    /* Installed software image version */
    3: optional string                  os_version;
    /* Device serial number */
    4: optional string                  serial_num;
    /* Device onboarding state: DISCOVERED, ONBOARDED, UNDERLAY_CONFIGURED, IMAGE_UPGRADED */
    5: string                           onboarding_state;
    /* Job template executed. fq_name as string joined by ':'. e.g. domain-1:project-1:job-template-1 */
    6: string                           job_template_fqname;
    /* Unique id that identifies a job execution */
    7: string                           job_execution_id (key="ObjectJobExecutionTable");
    /* Job input json */
    8: string                           job_input;
    // Add additional items here as needed
}

/**
 * object log for the job execution
 */
struct JobLogEntry {
    /* job template fq_name as string joined by ':', e.g. domain-1:project-1:job-template-1. */
    1: string                           name (key="ObjectJobTemplateTable");
    /* Unique id that identifies a job execution */
    2: string                           execution_id (key="ObjectJobExecutionTable");
    /* Job log timestamp */
    3: i64                              timestamp;
    /* job message which should be meaningful to the end user */
    4: string                           message;
    /* valid job status states are: STARTING, IN_PROGRESS, SUCCESS, FAILURE */
    5: string                           status (key="ObjectJobExecutionTable");
    /* job result that captures the output from the job execution. This is an optional field only in the last job log if
       job is completed with success.
       Key: job task name which could be the device id if this is multi-device job
       Value: JSON text blob that conforms to the output schema defined in the job template. */
    6: optional map<string, string>     result;
    /* fq_name string of the fabric for which the job is executed, e.g. default-global-system-config:fabric-1 */
    7: string                           fabric_name (key="ObjectFabricNameTable");
    /* Percentage completion for this job execution */
    8: double                           percentage_completed;
    /* optional PRouter fq_name as string joined by ':', e.g. domain-1:project-1:mx240-1. */
    9: optional string                  device_name (key="ObjectPRouter");
    /* optional JSON text blob with detailed information related to the message */
    10: optional string                 details;
    // Add additional items here as needed
}

/**
 * UVE that tracks a job execution. This UVE is created when job is started and destroyed when job completes.
 */
struct JobExecution {
    /* job template fq_name as string joined by ':', e.g. domain-1:project-1:job-template-1. */
    1: string                           name (key="ObjectJobTemplateTable");
    /* Unique id that identifies a job execution */
    2: string                           execution_id (key="ObjectJobExecutionTable");
    3: optional bool                    deleted
    /* Job start timestamp */
    4: i64                              job_start_ts;
    /* Percentage completion for this job execution */
    5: i32                              percentage_completed;
    // Add additional items here as needed
}

objectlog sandesh PRouterOnboardingLog {
    1: PRouterOnboardingLogEntry log_entry;
}

objectlog sandesh JobLog {
    /** container for operation details */
    1: JobLogEntry               log_entry;
}

uve sandesh UveJobExecution {
    1: JobExecution              data;
}

