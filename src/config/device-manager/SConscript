# -*- mode: python; -*-

#
# Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
#
import os

Import('CfgmEnv')
env = CfgmEnv.Clone()

autogen_infra_sources = [
                 '#/tools/generateds/generateDS.py',
                 '#/tools/generateds/TypeGenerator.py',
                 '#/tools/generateds/ccmap.py',
                 '#/tools/generateds/idl_parser.py',
                 '#/tools/generateds/ifmap_global.py',
                 '#/tools/generateds/ifmap_model.py',
                 '#/tools/generateds/ifmap_frontend.py',
                ]

autogen_sources = [
                 '#controller/src/schema/device_schema/juniper/juniper_common.xsd',
                ]

autogen_script = File('#tools/generateds/generateDS.py').path
autogen_cmd = '%s -f -o %s -g device-api' % (autogen_script, Dir('device_api/juniper_common').path)

generated_files = [
                  'device_api/__init__.py',
                  'device_api/juniper_common_xsd.py'
                ]
generated_rule = env.Command(generated_files,
                             '#/controller/src/schema/device_schema/juniper/juniper_common.xsd',
                             autogen_cmd + ' $SOURCE')

setup_sources = [
           'setup.py',
           'MANIFEST.in',
           'run_tests.sh',
           'requirements.txt',
           'test-requirements.txt',
           '.testr.conf',
           '.coveragerc',
           'test',
          ]

setup_sources_rules = []
for file in setup_sources:
    setup_sources_rules.append(
        env.Install(Dir('.'), "#controller/src/config/device-manager/" + file))

local_sources = [
    'device_manager/__init__.py',
    'device_manager/device_manager.py',
    'device_manager/db.py',
    'device_manager/dm_utils.py',
    'device_manager/dm_amqp.py',
    'device_manager/device_conf.py',
    'device_manager/plugins/imports.py',
    'device_manager/plugins/juniper/juniper_conf.py',
    'device_manager/plugins/juniper/mx/mx_conf.py',
    'device_manager/plugins/juniper/mx-e2/e2_conf.py',
    'device_manager/plugins/juniper/mx-e2/e2_services_info.py',
    'device_manager/plugins/juniper/qfx/qfx_conf.py',
    'device_manager/plugins/juniper/qfx/series5K/qfx_5k.py',
    'device_manager/plugins/juniper/qfx/series10K/qfx_10k.py',
    'device_manager/logger.py',
]

local_sources_rules = []
for file in local_sources:
    local_sources_rules.append(
        env.Install("device_manager",
                    "#controller/src/config/device-manager/" + file))

generateds_rule = env.Install("device_api", "../common/generatedssuper.py")

dm_introspect_pkg = env.SandeshGenPy('dm_introspect.sandesh',
                                       'device_manager/sandesh/', False)

cd_cmd = 'cd ' + Dir('.').path + ' && '
sdist_depends = [generated_rule, generateds_rule]
sdist_depends.extend(setup_sources_rules)
sdist_depends.extend(local_sources_rules)
sdist_depends.extend(dm_introspect_pkg)
sdist_gen = env.Command('dist/device_manager-0.1dev.tar.gz', 'setup.py', cd_cmd + 'python setup.py sdist')

env.Depends(generated_rule, [autogen_infra_sources, autogen_sources])
env.Depends(sdist_gen, sdist_depends)
env.Default(sdist_gen)

# Documentation
doc_files = []
doc_files += env.SandeshGenDoc('dm_introspect.sandesh')
doc_files += env['CFGM_DOC_FILES']

if 'install' in BUILD_TARGETS:
    install_cmd = env.Command(None, 'setup.py',
                              cd_cmd + 'python setup.py install %s' %
                              env['PYTHON_INSTALL_OPT'])
    env.Depends(install_cmd, sdist_depends)
    env.Alias('install', install_cmd)

env.Alias('install', env.Install(env['INSTALL_CONF'],
          'contrail-device-manager.conf'))
env.Alias('install', env.InstallAs(env['INSTALL_INITD'] +
          '/contrail-device-manager', 'contrail-device-manager.initd.supervisord'))
env.Alias('install', env.InstallAs(env['INSTALL_SYSTEMD'] +
          '/contrail-device-manager.service', 'systemd/contrail-device-manager.service'))
env.Alias('install', env.Install(env['INSTALL_CONF'] +
          '/supervisord_config_files', 'contrail-device-manager.ini'))
env.Alias('install', env.Install(
    env['INSTALL_MESSAGE_DOC'] + '/contrail-device-manager/', doc_files))

buildspace_link = os.environ.get('CONTRAIL_REPO')
if buildspace_link:
    # in CI environment shebang limit exceeds for python
    # in easy_install/pip, reach to it via symlink
    top_path = buildspace_link + '/' + Dir('.').path
    top_dir = Dir(top_path)
else:
    top_dir = Dir('.')

cov_cmd = env.Command('coveragetest.log', sdist_gen,
          'bash -c "set -o pipefail && cd ' + Dir(top_dir).path + ' && python setup.py run_tests --coverage 2>&1 | tee coveragetest.log"')
test_cmd = env.Command('test.log', sdist_gen,
          'bash -c "set -o pipefail && cd ' + Dir(top_dir).path + ' && python setup.py run_tests 2>&1 | tee test.log"')

test_depends = ['/config/common/dist/cfgm_common-0.1dev.tar.gz',
                '/api-lib/dist/vnc_api-0.1dev.tar.gz',
                '/tools/sandesh/library/python/dist/sandesh-0.1dev.tar.gz',
                '/sandesh/common/dist/sandesh-common-0.1dev.tar.gz',
                '/config/api-server/dist/vnc_cfg_api_server-0.1dev.tar.gz',
                '/config/schema-transformer/dist/schema_transformer-0.1dev.tar.gz',
]
env.Depends(test_cmd, [env['TOP']+x for x in test_depends])
env.Depends(cov_cmd, [env['TOP']+x for x in test_depends])

env.Alias('flaky-test', test_cmd)
env.Alias('coverage', cov_cmd)
env.Alias('test', test_cmd)
env.Alias('controller/src/config/device-manager:flaky-test', test_cmd)
env.Alias('controller/src/config/device-manager:coverage', cov_cmd)
env.Alias('controller/src/config/device-manager:test', test_cmd)
