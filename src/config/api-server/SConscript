# -*- mode: python; -*-

#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#
import os

Import('CfgmEnv')
env = CfgmEnv.Clone()

autogen_infra_sources = [
                 '#/tools/generateds/generateDS.py',
                 '#/tools/generateds/TypeGenerator.py',
                 '#/tools/generateds/ccmap.py',
                 '#/tools/generateds/idl_parser.py',
                 '#/tools/generateds/ifmap_global.py',
                 '#/tools/generateds/ifmap_model.py',
                 '#/tools/generateds/ifmap_frontend.py',
                ]

autogen_sources = [
                 '#controller/src/schema/all_cfg.xsd',
                 '#controller/src/schema/vnc_cfg.xsd',
                 '#controller/src/schema/bgp_schema.xsd',
                 '#controller/src/schema/ietf-l3vpn-schema.xsd',
                 '#controller/src/schema/smi-base.xsd',
                ]

generated_dependencies = [
                  env['TOP'] + '/api-lib/vnc_api/gen/__init__.py',
                  env['TOP'] + '/api-lib/vnc_api/gen/resource_xsd.py',
                  env['TOP'] + '/api-lib/vnc_api/gen/resource_common.py',
                  env['TOP'] + '/api-lib/vnc_api/gen/resource_client.py',
                  env['TOP'] + '/api-lib/vnc_api/gen/vnc_api_client_gen.py',
                ]

setup_sources = [
    '.coveragerc',
    '.pylintrc',
    '.testr.conf',
    'MANIFEST.in',
    'README.md',
    'requirements.txt',
    'setup.py',
    'setup.cfg',
    'test-requirements.txt',
    'tox.ini',
    'vnc_cfg_api_server',
    'doc',
]

setup_sources_rules = []
for file in setup_sources:
    setup_sources_rules.append(
        env.Install(Dir('.'), "#controller/src/config/api-server/" + file))

autogen_script = File('#tools/generateds/generateDS.py').path
autogen_cmd = '%s -f -o %s -g ifmap-frontend' % (autogen_script, Dir('vnc_cfg_api_server/gen/resource').path)

generated_files = ['vnc_cfg_api_server/gen/__init__.py']
env.Append(ENV = {'HEAT_BUILDTOP' : Dir(env['TOP']).abspath})

generated_rule = env.Command(generated_files,
                             '#/controller/src/schema/all_cfg.xsd',
                             autogen_cmd + ' $SOURCE')

generateds_rule = env.Install("vnc_cfg_api_server/gen", "../common/generatedssuper.py")
cfixture_rule = env.Install("vnc_cfg_api_server/gen", "../common/cfixture.py")

doc_sources_rules = SConscript(dirs=['doc'], exports = 'CfgmEnv')

sandesh_trace_pkg = env.SandeshGenPy('traces.sandesh', 'vnc_cfg_api_server/sandesh/', False)

sdist_depends = [generated_rule, generateds_rule, cfixture_rule]
sdist_depends.extend(setup_sources_rules)
sdist_depends.extend(doc_sources_rules)
sdist_depends.extend(sandesh_trace_pkg)

cd_cmd = 'cd ' + Dir('.').path + ' && '
# TODO: deprecate
sdist_gen = env.Command('dist/contrail-api-server-0.1dev.tar.gz', 'setup.py',
                        cd_cmd + 'python setup.py sdist')

env.Default(sdist_gen)

# generated files depend on autogeneration infra parts

env.Depends(generated_rule, [autogen_infra_sources, autogen_sources, generated_dependencies])

# install everything before building distribution
env.Depends(sdist_gen, sdist_depends)

# Documentation
doc_files = []
doc_files += env.SandeshGenDoc('traces.sandesh')
doc_files += env['CFGM_DOC_FILES']

if 'install' in BUILD_TARGETS:
    install_cmd = env.Command(None, 'setup.py',
                              cd_cmd + 'python setup.py install %s' %
                              env['PYTHON_INSTALL_OPT'])
    env.Depends(install_cmd, sdist_gen)
    env.Alias('install', install_cmd)

env.Alias('install', env.Install(env['INSTALL_CONF'], 'contrail-api.conf'))
env.Alias('install', env.InstallAs(env['INSTALL_INITD'] +
    '/contrail-api', 'contrail-api.initd.supervisord'))
env.Alias('install', env.InstallAs(env['INSTALL_SYSTEMD'] +
    '/contrail-api.service', 'systemd/contrail-api.service'))
env.Alias('install', env.InstallAs(env['INSTALL_SYSTEMD'] +
    '/contrail-config-nodemgr.service', 'systemd/contrail-config-nodemgr.service'))
env.Alias('install', env.Install(env['INSTALL_CONF'],
    'supervisord_config.conf'))
env.Alias('install', env.Install(env['INSTALL_CONF']+
    '/supervisord_config_files', 'contrail-api.ini'))
env.Alias('install', env.Install(env['INSTALL_CONF']+
    '/supervisord_config_files', 'contrail-config.rules'))
env.Alias('install', env.Install(
    env['INSTALL_MESSAGE_DOC'] + '/contrail-api/', doc_files))

buildspace_link = os.environ.get('CONTRAIL_REPO')
if buildspace_link:
    # in CI environment shebang limit exceeds for python
    # in easy_install/pip, reach to it via symlink
    top_path = buildspace_link + '/' + Dir('.').path
    top_dir = Dir(top_path)
else:
    top_dir = Dir('.')

cov_cmd = env.Command('coveragetest.log', sdist_gen,
                      'bash -c "set -o pipefail && cd ' + Dir(top_dir).path + ' && tox -e cover 2>&1 | tee coveragetest.log"')

test_cmd = env.Command('test.log', sdist_gen,
                       'bash -c "set -o pipefail && cd ' + Dir(top_dir).path + ' && tox 2>&1 | tee test.log"')

vnc_api_pkg = 'api-lib/dist/vnc_api-%s.tar.gz' % (open(File(
    '#/controller/src/base/version.info').abspath, 'r').read(
                 ).strip('\n').strip('\t'))
test_depends = ['/config/common/dist/cfgm_common-0.1dev.tar.gz',
		'/%s' % (vnc_api_pkg),
                '/tools/sandesh/library/python/dist/sandesh-0.1dev.tar.gz',
                '/sandesh/common/dist/sandesh-common-0.1dev.tar.gz',]
env.Depends(test_cmd, [env['TOP']+x for x in test_depends])
env.Depends(cov_cmd, [env['TOP']+x for x in test_depends])

env.Alias('test', test_cmd)
env.Alias('coverage', cov_cmd)
env.Alias('controller/src/config/api-server:test', test_cmd)
env.Alias('controller/src/config/api-server:coverage', cov_cmd)
