# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
minversion = 1.6
# Test envs list buid and run by default
envlist = py27

# Common env configuration
[testenv]
install_command =
    pip install --no-cache-dir \
        --find-links file://{toxinidir}/../../config/common/dist/ \
        --find-links file://{toxinidir}/../../api-lib/dist/ \
        --find-links file://{toxinidir}/../../tools/sandesh/library/python/dist/ \
        --find-links file://{toxinidir}/../../sandesh/common/dist/ {opts} {packages}
whitelist_externals =
    sh
    find
commands =
    find {toxinidir} -type f -name "*.log*" -delete
    find {toxinidir} -type f -name "*.db" -delete
    # Ignore any test run failure
    sh -c "python setup.py testr --testr-args='{posargs}' || true"
    sh -c "testr last --subunit > {toxinidir}/testr.subunit"
    subunit2html {toxinidir}/testr.subunit {toxinidir}/test-results.html
    # subunit2junitxml will fail if test run failed as it forwards subunit stream result code, ignore it
    sh -c "subunit2junitxml --output-to={toxinidir}/test-results.xml < {toxinidir}/testr.subunit || true"
    testr slowest
    # return non zero exit code if the last test run failed
    testr last
deps =
    os-testr
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/test-requirements.txt
    git+https://github.com/testing-cabal/testrepository@619456978c2eb5fbfa7ceb0e22b8e698db62957f#egg=testrepository

# Sandbox env where a command can be run, ie. "tox -evenv pip install ipdb"
[testenv:venv]
commands = {posargs}

# PEP8 checks env
[testenv:pep8]
deps =
    flake8
    pylint
    hacking
commands =
    flake8
    pylint --rcfile=.pylintrc --output-format=colorized {[flake8]files_support_pep8}
    #pylint --rcfile=.pylintrc --output-format=colorized doc/source/

# Test code coverage env
[testenv:cover]
deps =
    {[testenv]deps}
    coverage
commands =
    python setup.py testr --coverage --coverage-package-name=vnc_cfg_api_server --testr-args='{posargs}'
    coverage html -d covhtml -i --title="Contrail API Server coverage report"
    coverage report

[flake8]
show-source = True
ignore = E123, E125
enable-extensions = H301, H306
files_support_pep8 =
    vnc_cfg_api_server/tests/test_firewall.py
    vnc_cfg_api_server/tests/test_global_system_config.py
    vnc_cfg_api_server/tests/test_route_target.py
    vnc_cfg_api_server/tests/test_security_group.py
    vnc_cfg_api_server/tests/test_virtual_network.py
filename =
    */test_firewall.py
    */test_global_system_config.py
    */test_route_target.py
    */test_security_group.py
    */test_virtual_network.py
