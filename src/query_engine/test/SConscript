#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

# -*- mode: python; -*-

Import('QueryEnv')

env = QueryEnv.Clone()

env.Append(LIBS=['gunit', 'task_test'])
env.Prepend(LIBS=['libsandeshflow'])
env.Append(LIBPATH=['#/build/lib', Dir(env['TOP']).abspath + '/base/test/'])
env.Append(CPPPATH = ['#/'+Dir('.').path ,
                      env['TOP'],
                      env['TOP'] + '/io/',
                      env['TOP'] + '/base/sandesh/'])

env_noWerror = env.Clone()
while env_noWerror['CCFLAGS'].count('-Werror') > 0:
    env_noWerror['CCFLAGS'].remove('-Werror')

env_noWerror_excep = env_noWerror.Clone()
env_noWerror_excep.CppEnableExceptions()

RedisConn_obj = env.Object('redis_connection.o', '../../analytics/redis_connection.cc')
Analytics_obj = env.Object('vizd_table_desc.o', '../../analytics/vizd_table_desc.cc')

query_test_obj = env_noWerror_excep.Object('query_test.o', 'query_test.cc');

query_test = env.UnitTest('query_test',
                                    [query_test_obj,
                                     RedisConn_obj,
                                     Analytics_obj,
                                     env['QE_SANDESH_GEN_OBJS'],
                                     '../../analytics/viz_constants.o',
                                     '../rac_alloc.o',
                                     '../query.o',
                                     '../where_query.o',
                                     '../db_query.o',
                                     '../set_operation.o',
                                     '../select.o',
                                     '../select_fs_query.o',
                                     '../stats_select.o',
                                     '../stats_query.o',
                                     '../post_processing.o',
                                     '../utils.o',
                                     '../QEOpServerProxy.o'])

options_test = env.UnitTest('options_test', ['../buildinfo.o', '../options.o',
                                     '../../analytics/viz_constants.o',
                                             'options_test.cc'],
			    platform_exclude=[('Ubuntu','14.04')])
env.Alias('src/query_engine:options_test', options_test)

utils_test = env.UnitTest('utils_test', ['../utils.o',
                                             'utils_test.cc'],
			    )
env.Alias('contrail-query-engine:utils_test', utils_test)

select_test_obj = env_noWerror_excep.Object('select_test.o',
                                            'select_test.cc')

select_test = env.UnitTest('select_test',
                           [select_test_obj,
                           RedisConn_obj,
                           Analytics_obj,
                           env['QE_SANDESH_GEN_OBJS'],
                           '../../analytics/viz_constants.o',
                           '../rac_alloc.o',
                           '../query.o',
                           '../where_query.o',
                           '../db_query.o',
                           '../set_operation.o',
                           '../select.o',
                           '../select_fs_query.o',
                           '../stats_select.o',
                           '../stats_query.o',
                           '../post_processing.o',
                           '../utils.o',
                           '../QEOpServerProxy.o'])

select_fs_query_test_obj = env_noWerror_excep.Object('select_fs_query_test.o',
                                                     'select_fs_query_test.cc')
select_fs_query_test = env.UnitTest('select_fs_query_test',
                                    [select_fs_query_test_obj,
                                     RedisConn_obj,
                                     Analytics_obj,
                                     env['QE_SANDESH_GEN_OBJS'],
                                     '../../analytics/viz_constants.o',
                                     '../rac_alloc.o',
                                     '../query.o',
                                     '../where_query.o',
                                     '../db_query.o',
                                     '../set_operation.o',
                                     '../select.o',
                                     '../select_fs_query.o',
                                     '../stats_select.o',
                                     '../stats_query.o',
                                     '../post_processing.o',
                                     '../utils.o',
                                     '../QEOpServerProxy.o'])

test_suite = [
               options_test,
               utils_test,
               select_fs_query_test,
               select_test,
               query_test
             ]

test = env.TestSuite('qe-test', test_suite)
env.Alias('controller/src/query_engine:test', test)

Return('test_suite')
