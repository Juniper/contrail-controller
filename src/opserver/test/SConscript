# -*- mode: python; -*-

#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#
import sys
Import('OpEnv')

env = OpEnv.Clone()

# a bug in cassandra doesnot allow sstableloader to work when storage port
# is set to anything other than 7000
# which means, we cannot enable analytics_perftest.py by default as
# multiple runs will clash with each other
# enable this manually when required for debugging performance
local_sources = [
                 'uveserver_test.py',
                 'analytics_systest.py',
                 'analytics_statstest.py',
                 'analytics_db_test.py',
#                 'analytics_perftest.py',
                 ]
local_sources_rules = []
for file in local_sources:
    local_sources_rules.append(env.Install('', '#/controller/src/opserver/test/' + file))
local_sources_rules.append(env.Install('', '#/controller/src/opserver/test/setup.py'))
local_sources_rules.append(env.Install('', '#/controller/src/opserver/test/data'))

local_dirs = ['utils']
local_dirs_rules = []
for dir in local_dirs:
    files = Glob('#/controller/src/opserver/test/' + dir + '/*.py')  
    local_dirs_rules.append(env.Install(dir, files))    
          
vm_pkg = env.SandeshGenPy('#controller/src/opserver/test/sandesh/virtual_machine.sandesh',
                          'sandesh/', False)
vn_pkg = env.SandeshGenPy('#controller/src/opserver/test/sandesh/virtual_network.sandesh',
                          'sandesh/', False)
stats_test_pkg = env.SandeshGenPy('#controller/src/opserver/test/sandesh/stats_test.sandesh',
                                  'sandesh/', False)
flow_pkg = env.SandeshGenPy('#controller/src/sandesh/common/flow.sandesh',
                            'sandesh/', False)
qe_test_pkg = env.SandeshGenPy('#controller/src/query_engine/qe.sandesh',
                            'sandesh/', False)
sandesh_pkgs = [vm_pkg, vn_pkg, stats_test_pkg, flow_pkg, qe_test_pkg]

env.Depends(local_sources_rules, [local_dirs_rules] + sandesh_pkgs)

venv = env.setup_venv ('analytics_test', 'analytics_test')
#maintain the order
pip_pkgs = ['greenlet==0.4.1', 'gevent==0.13.8', 'eventlet==0.9.17',
        'testtools==0.9.21', 'fixtures==0.3.12', 'requests==1.1.0',
        'lxml==2.3.3', 'geventhttpclient==1.0a', 'prettytable==0.7.2',
        'psutil==0.4.1', 'redis==2.7.1', 'xmltodict==0.2', 'thrift==0.8.0',
        'bottle==0.11.6']

build_pkgs = [
        '#controller/src/analytics/test/utils/mockcassandra',
        '#controller/src/analytics/test/utils/mockredis',
        '#controller/src/opserver/test',
        env['TOP'] + '/tools/sandesh/library/python',
        env['TOP'] + '/sandesh/common',
        env['TOP'] + '/opserver']

#venv that we are building is in env['analytics_test']
env.Depends (env['analytics_test'], env['OPSERVER_PKG'])
env.Requires (env['analytics_test'], env['TOP']+'/sandesh/common/dist/sandesh-common-0.1dev.tar.gz')
env.Requires (env['analytics_test'], env['TOP']+'/tools/sandesh/library/python/dist/sandesh-0.1dev.tar.gz')
for local_sources_rule in local_sources_rules:
    env.Depends (env['analytics_test'], local_sources_rule)

_deps = []
_deps += env.venv_add_pip_pkg(venv, pip_pkgs)
_deps += env.venv_add_pip_pkg(venv, ['pycassa==1.7.1'])
_deps += env.venv_add_build_pkg(venv,
                                map(lambda x: Dir(x).abspath, build_pkgs))

def clean_coverage(env, target, source):
    # rm -rf opserver/test/test_coverage
    import shutil
    shutil.rmtree('test_coverage', ignore_errors = True)
 
    import os
    lcov_clean = 'lcov --base-directory ' + Dir('#').abspath +\
        ' --directory ' + Dir(env['TOP']).abspath +\
        ' --zerocounters'
    os.system(lcov_clean)
 
def run_coverage(env, target, source):
    import os
    lcov_run = 'lcov --ignore-errors gcov,source --base-directory ' + Dir('#').abspath +\
        ' --directory ' + Dir(env['TOP']).abspath +\
        ' -c -o ' + Dir(env['TOP']).abspath + '/opserver/test/analytics_test.info'
    os.system(lcov_run)
 
    genhtml_cmd = 'genhtml -o ' + Dir(env['TOP']).abspath + '/opserver/test/test_coverage' +\
        ' -t "test coverage" --num-spaces 4 ' + Dir(env['TOP']).abspath + '/opserver/test/analytics_test.info'
    os.system(genhtml_cmd)
 
if env['OPT'] != 'coverage':
    env['env_venv'] = venv
    test = env.PyTestSuiteCov('opserver-test', local_sources)
    for d in _deps:
        env.Depends (test, d.name)
    env.Alias('controller/src/opserver:test', test)
    env.Requires(test, env['TOP'] + '/analytics/vizd')
    env.Requires(test, env['TOP'] + '/query_engine/qedt')
else:
    env['env_venv'] = venv
    testcov = env.PyTestSuiteCov('opserver-test', local_sources)
    for d in _deps:
        env.Depends (testcov, d.name)
    env.Requires(testcov, env['TOP'] + '/analytics/vizd')
    env.Requires(testcov, env['TOP'] + '/query_engine/qedt')

    clean_coverage_cmd = env.Command('clean_coverage', '', clean_coverage)
    env.Depends(testcov, clean_coverage_cmd[0].name)
    env.AlwaysBuild(clean_coverage_cmd)
    run_coverage_cmd = env.Command('run_coverage', '', run_coverage)
    env.Depends(run_coverage_cmd, testcov[0].name)
    env.Depends(run_coverage_cmd, 'analytics-test')
    env.Depends(run_coverage_cmd, 'qe-test')
    env.Depends(run_coverage_cmd, 'gendb_test_suite')
    env.AlwaysBuild(run_coverage_cmd)
    env.Alias('controller/src/opserver:test', run_coverage_cmd)
