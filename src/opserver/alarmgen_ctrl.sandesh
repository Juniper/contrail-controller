/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */
 
/**
 *  Definitions of structures used by contrail-alarm-gen to send information to
 *  the collector
 */

include "sandesh/library/common/sandesh_alarm_base.sandesh"

/**
 * @description: sandesh request to get partition ownership info
 * @cli_name: read partitions ownership information
 */
request sandesh PartitionOwnershipReq {
    /** partition number */
    1: u32                      partition
    /** if owner of this partition */
    2: bool                     ownership
}

/**
 * @description: sandesh response to send partition ownership status
 */
response sandesh PartitionOwnershipResp {
    1: bool                     status
}

/**
 * @description: sandesh request to get partition ownership status
 * @cli_name: read partitions ownership status
 */
request sandesh PartitionStatusReq {
    /** partition number */
    1: i32 partition
}

struct UVETypeCount {
    1: string                   type
    2: u32                      count
    3: string                   agg_uuid
}

struct UVEKeyInfo {
    1: string                   key
    2: list<UVETypeCount>       types
}

struct UVEGenInfo {
    1: string                   generator
    2: list<UVEKeyInfo>         uves
}

struct UVECollInfo {
    1: string                   collector
    2: list<UVEGenInfo>         uves
}

/**
 * @description: sandesh response to return partition ownership info
 */
response sandesh PartitionStatusResp {
    1: bool                     enabled
    2: u32                      partition
    3: u64                      offset
    4: list<UVECollInfo>        uves
}

/**
 * @description: sandesh request to uve table info for a given partition
 * @cli_name: read uve table information
 */
request sandesh UVETableInfoReq {
    /** partition number */
    1: u32                     partition
}

struct UVEStructInfo {
    1: string                  type
    2: string                  content
}

struct UVEObjectInfo {
    1: string                  name
    3: list<UVEStructInfo>     structs
}

struct UVETableInfo {
    1: string table
    7: list<UVEObjectInfo> uves
}


/**
 * @description: sandesh response to return uve table info for a given partition
 */
response sandesh UVETableInfoResp {
    2: u32 partition
    7: list<UVETableInfo> tables
}

/**
 * @description: sandesh request to get UVE operation info for a given UVE table
 * @cli_name: read uve table operational information
 */
request sandesh UVETablePerfReq {
    /** name of the uve table */
    1: string                      table
}

/**
 * @description: sandesh response to return uve op data for a given table
 */
response sandesh UVETablePerfResp {
    1: string table
    3: u64 updates
    4: u64 get_time
    5: u64 pub_time
    6: u64 call_time
}

enum UVEAlarmState {
    Idle,
    Soak_Active,
    Active,
    Soak_Idle
}

struct UVEAlarmOperState {
    1: UVEAlarmState state
    2: u64           delete_timestamp
    3: list<u64>     alarm_timestamp
    4: u32           head_timestamp
}

struct UVEAlarmStateMachineInfo {
    1: sandesh_alarm_base.UVEAlarmInfo      uai
    2: sandesh_alarm_base.UVEAlarmConfig    uac
    3: UVEAlarmOperState uas
}

trace sandesh AlarmStateChangeTrace {
    1: "State change info for alarm:"
    2: string		table
    3: string		uv
    4: string		alarm_type
    5: UVEAlarmState	old_state
    6: UVEAlarmState	new_state
}

/**
 * @description: sandesh request to get alarms for a given UVE table
 * @cli_name: read uve table alarms information
 */
request sandesh UVETableAlarmReq {
    /** name of the uve table */
    1: string                      table
}

/**
 * @description: sandesh response to return alarms for a given table
 */
response sandesh UVETableAlarmResp {
    1: string table
    2: list<UVEAlarmStateMachineInfo> uves
}

struct UVETypeInfo {
    1: string                     collector
    2: string                     generator
    3: string                     type
    4: u32                        count
}

struct AlarmgenUVEStats {
    1: u32                      add_count
    2: u32                      change_count
    3: u32                      remove_count
}

struct AlarmgenAlarmStats {
    1: string                   table_name
    2: string                   alarm_name
    3: u32                      set_count       /* count per query interval */
    4: u32                      reset_count     /* count per query interval */
    5: u32                      active_count    /* currently active alarms */
}

/**
 * @description: objectlog structure to send UVE update statistics
 * @object: generator
 */
objectlog sandesh AlarmgenUpdate {
    1: string             name (key="ObjectGeneratorInfo")
    3: u32                partition
    4: string             table
    /** @display_name:Alarmgen Input Stats */
    6: list<UVETypeInfo>  i    (tags="partition,table,.collector,.generator,.type")
    /** @display_name:Alarmgen UVE Stats */
    7: map<string,AlarmgenUVEStats>    uve_stats   (tags="partition,table,.__key")
}

struct AlarmgenStats {
    1: string                      instance
    2: u32                         partitions
    3: u32                         keys
    4: u64                         updates
    /** @display_name:Alarmgen Alarm Stats */
    5: list<AlarmgenAlarmStats> table_stats (tags=".table_name,.alarm_name")
}

/**
 * structure to carry alarmgen status data
 */
struct AlarmgenStatus {
    1: string                      name (key="ObjectCollectorInfo")
    /** @display_name:Alarmgen Counters*/
    2: list<AlarmgenStats>         counters (tags="name:.instance",aggtype="union")
    4: list<string>                alarmgens (aggtype="union",ulink="ObjectGeneratorInfo:ModuleClientState")
    3: optional bool               deleted
}

struct AlarmgenPartionInfo {
    1: string                      instance
    2: list<u16>                   partitions
}

/**
 * structure to carry alarmgen partition data
 */
struct AlarmgenPartition {
    1: string                      name (key="ObjectCollectorInfo")
    2: list<AlarmgenPartionInfo>   inst_parts (aggtype="union")
    3: optional bool               deleted
}

/**
 * @description: uve to send alarmgen partition data
 * @object: analytics-node
 */
uve sandesh AlarmgenPartitionUVE {
    1: AlarmgenPartition data
}

/**
 * @description: uve to send alarmgen status data
 * @object: analytics-node
 */
uve sandesh AlarmgenStatusTrace {
    1: AlarmgenStatus data
}

trace sandesh AlarmgenTrace {
    1: "Alarmgen list from Discovery:"
    2: list<string>     publishers
}

trace sandesh UVEQTrace {
    1: string oper
    2: u16 part
    3: list<string> uves
}

trace sandesh AlarmgenPartitionTrace {
    1: string msg
}

trace sandesh AlarmExceptionTrace {
    1: string message
    2: string key
    3: string uve_data
    4: string alarm_config
    5: string traceback
}

/**
 * @description: objectlog to send configuration update received from config-node
 * @object: analytics-node
 */
objectlog sandesh AlarmgenConfigLog {
    1: string name (key="ObjectCollectorInfo")
    2: string config_type
    3: string operation
    4: map<string, string> config
}

struct AlarmConfig {
    1: map<string, string> config
}

/**
 * @description: sandesh request to get alarm configuration
 * @cli_name: read alarm configuration
 */
request sandesh AlarmConfigRequest {
    /** name of the alarm */
    1: optional string name
}

/**
 * @description: sandesh response to send alarm configuration
 */
response sandesh AlarmConfigResponse {
    1: list<AlarmConfig> alarms
}
