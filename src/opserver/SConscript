# -*- mode: python; -*-

#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

import os
import sys

Import('BuildEnv')
OpEnv = BuildEnv.Clone()

setup_sources = [
           'setup.py',
           'MANIFEST.in',
           'requirements.txt',
          ]

setup_sources_rules = []
for file in setup_sources:
    setup_sources_rules.append(
        OpEnv.Install(Dir("."), '#controller/src/opserver/' + file))

local_sources = [
           '__init__.py',
           'cpuinfo.py',
           'generator_introspect_util.py',
           'introspect_util.py',
           'opserver.py',
           'opserver_util.py',
           'overlay_to_underlay_mapper.py',
           'sandesh_req_impl.py',
           'uveserver.py',
           'analytics_db.py',
           'log.py',
           'db.py',
           'stats.py',
           'flow.py',
           'api_log.py',
           'alarmgen.py',
           'alarmgen_cfg.py',
           'partition_handler.py',
           'consistent_schdlr.py',
           'gendb_move_tables.py',
           'alarm_notify.py',
           'config_handler.py',
           'alarmgen_config_handler.py',
           'vnc_cfg_api_client.py',
           'opserver_local.py',
          ]

plugins_sources = [
           'plugins/__init__.py',
           'plugins/alarm_base.py',
]

local_sources_rules = []
for file in local_sources:
    local_sources_rules.append(OpEnv.Install(Dir("opserver"), file))
for file in plugins_sources:
    local_sources_rules.append(OpEnv.Install(Dir("opserver/plugins"), file))

viz_pkg = OpEnv.SandeshGenPy('#controller/src/analytics/viz.sandesh', 'opserver/sandesh/', False)
analytics_pkg = OpEnv.SandeshGenPy('#controller/src/analytics/analytics.sandesh', 'opserver/sandesh/', False)
cpuinfo_pkg2 = OpEnv.SandeshGenPy('#controller/src/base/sandesh/cpuinfo.sandesh', 'opserver/sandesh/analytics/', False)
process_info_pkg2 = OpEnv.SandeshGenPy('#controller/src/base/sandesh/process_info.sandesh', 'opserver/sandesh/analytics/', False)
cpuinfo_pkg = OpEnv.SandeshGenPy('#controller/src/base/sandesh/cpuinfo.sandesh', 'opserver/sandesh/nodeinfo/', False)
process_info_pkg = OpEnv.SandeshGenPy('#controller/src/base/sandesh/process_info.sandesh', 'opserver/sandesh/nodeinfo/', False)
nodeinfo_pkg = OpEnv.SandeshGenPy('#controller/src/base/sandesh/nodeinfo.sandesh', 'opserver/sandesh/', False)
redis_pkg = OpEnv.SandeshGenPy('#controller/src/analytics/redis.sandesh', 'opserver/sandesh/', False)
discovery_pkg = OpEnv.SandeshGenPy('discovery.sandesh', 'opserver/sandesh/', False)
analytics_database_pkg = OpEnv.SandeshGenPy('analytics_database.sandesh', 'opserver/sandesh/', False)
alarmgen_pkg = OpEnv.SandeshGenPy('alarmgen_ctrl.sandesh', 'opserver/sandesh/', False)
alarm_sandesh_base_pkg = OpEnv.SandeshGenPy('#tools/sandesh/library/common/sandesh_alarm_base.sandesh', 'opserver/sandesh/alarmgen_ctrl/', False)
derived_stats_pkg = OpEnv.SandeshGenPy('#tools/sandesh/library/common/derived_stats_results.sandesh', 'opserver/sandesh/analytics/', False)
database_pkg = OpEnv.SandeshGenPy('#controller/src/database/gendb.sandesh', 'opserver/sandesh/viz/', False)
OpEnv.Depends(alarm_sandesh_base_pkg, alarmgen_pkg)
OpEnv.Depends(derived_stats_pkg, analytics_pkg)

sdist_depends = [setup_sources_rules, local_sources_rules,
                 viz_pkg, analytics_pkg, cpuinfo_pkg, redis_pkg,
                 process_info_pkg, discovery_pkg, analytics_database_pkg,
                 alarmgen_pkg, database_pkg, alarm_sandesh_base_pkg,
                 derived_stats_pkg, nodeinfo_pkg, cpuinfo_pkg2,
                 process_info_pkg2]

cd_cmd = 'cd ' + Dir('.').path + ' && '
sdist_gen = OpEnv.Command('dist/opserver-0.1dev.tar.gz', 'setup.py',
        cd_cmd + 'python setup.py sdist')
# install everything before building distribution
OpEnv.Depends(sdist_gen, sdist_depends)

# Documentation
opserver_doc_files = []
opserver_doc_files += OpEnv['BASE_DOC_FILES']
opserver_doc_files += OpEnv['ANALYTICS_DOC_FILES']
opserver_doc_files += OpEnv.SandeshGenDoc('discovery.sandesh')
opserver_doc_files += OpEnv.SandeshGenDoc('analytics_database.sandesh')

alarmgen_doc_files = []
alarmgen_doc_files += OpEnv['BASE_DOC_FILES']
alarmgen_doc_files += OpEnv['ANALYTICS_DOC_FILES']
alarmgen_doc_files += OpEnv.SandeshGenDoc('discovery.sandesh')
alarmgen_doc_files += OpEnv.SandeshGenDoc('alarmgen_ctrl.sandesh')
alarmgen_doc_files += OpEnv.SandeshGenDoc('#tools/sandesh/library/common/sandesh_alarm_base.sandesh', OpEnv['TOP'] + '/opserver/')

if 'install' in BUILD_TARGETS:
    install_cmd = OpEnv.Command(None,
                                'setup.py',
                                cd_cmd + 'python setup.py install %s' %
                                OpEnv['PYTHON_INSTALL_OPT'])
    OpEnv.Depends(install_cmd, sdist_depends)
    OpEnv.Alias('install', install_cmd)

OpEnv['OPSERVER_PKG'] = sdist_gen
OpEnv.SConscript('plugins/alarm_process_status/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_process_connectivity/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_partial_sysinfo/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_bgp_connectivity/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_xmpp_connectivity/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_vrouter_interface/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_phyif_bandwidth/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_config_incorrect/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_address_mismatch/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_storage/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_disk_usage/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_prouter_connectivity/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('plugins/alarm_node_status/SConscript', exports='OpEnv', duplicate = 0)
OpEnv.SConscript('docs/SConscript', exports='OpEnv', duplicate = 0)

OpEnv.Default(sdist_gen)
OpEnv.Alias("contrail-analytics-api", sdist_gen)

OpEnv.SConscript('node_mgr/SConscript', exports='BuildEnv', duplicate = 0)
OpEnv.Alias('install', OpEnv.Install(
            OpEnv['INSTALL_CONF'], 'contrail-analytics-api.conf'))
OpEnv.Alias('install', OpEnv.InstallAs(
            OpEnv['INSTALL_INITD'] + '/contrail-analytics-api',
            'contrail-opserver.initd.supervisord'))
OpEnv.Alias('install', OpEnv.Install(
            OpEnv['INSTALL_CONF'] + '/supervisord_analytics_files',
            'contrail-analytics-api.ini'))
OpEnv.Alias('install', OpEnv.Install(
            OpEnv['INSTALL_CONF'], 'contrail-alarm-gen.conf'))
OpEnv.Alias('install', OpEnv.InstallAs(
            OpEnv['INSTALL_INITD'] + '/contrail-alarm-gen',
            'contrail-alarm-gen.initd.supervisord'))
OpEnv.Alias('install', OpEnv.Install(
            OpEnv['INSTALL_CONF'] + '/supervisord_analytics_files',
            'contrail-alarm-gen.ini'))
OpEnv.Alias('install', OpEnv.Install(
            OpEnv['INSTALL_MESSAGE_DOC'] + '/contrail-analytics-api/',
            opserver_doc_files))
OpEnv.Alias('install', OpEnv.Install(
            OpEnv['INSTALL_MESSAGE_DOC'] + '/contrail-alarm-gen/',
            alarmgen_doc_files))

def clean_coverage(env, target, source):
    # rm -rf opserver/test/test_coverage
    import shutil
    shutil.rmtree('test_coverage', ignore_errors = True)
    os.system('lcov --base-directory ' + Dir('#').abspath + ' --directory ' + \
            Dir(env['TOP']).abspath + ' --zerocounters')

def run_coverage(env, target, source):
    lcov_run = 'lcov --ignore-errors gcov,source --base-directory ' + \
               Dir('#').abspath + ' --directory ' + Dir(env['TOP']).abspath + \
               ' -c -o ' + Dir(env['TOP']).abspath + \
               '/opserver/test/analytics_test_intermediate.info'
    os.system(lcov_run)
    lcov_run = 'lcov -e ' + Dir(env['TOP']).abspath + \
               '/opserver/test/analytics_test_intermediate.info ' + \
               Dir('#').abspath + '/controller/src/analytics/* ' + \
               Dir('#').abspath + '/controller/src/query_engine/* ' + \
               Dir('#').abspath + '/controller/src/database/* ' + \
               ' -o ' + Dir(env['TOP']).abspath + \
               '/opserver/test/analytics_test.info'
    os.system(lcov_run)

    genhtml_cmd = 'genhtml -o ' + Dir(env['TOP']).abspath + \
                  '/opserver/test/test_coverage' + \
                  ' -t "test coverage" --num-spaces 4 ' + \
                  Dir(env['TOP']).abspath + '/opserver/test/analytics_test.info'
    os.system(genhtml_cmd)

test_sources = [
    'run_tests.sh',
    'requirements.txt',
    'test-requirements.txt',
    '.testr.conf',
    '.coveragerc',
    'test',
    ]

test_sources_rules = []
for file in test_sources:
    test_sources_rules.append(
       OpEnv.Install(Dir('.'), "#controller/src/opserver/" + file))

sdist_depends.extend(test_sources_rules)
OpEnv.Depends(sdist_gen, sdist_depends)

buildspace_link = os.environ.get('CONTRAIL_REPO')
if buildspace_link:
    # in CI environment shebang limit exceeds for python
    # in easy_install/pip, reach to it via symlink
    top_path = buildspace_link + '/' + Dir('.').path
    top_dir = Dir(top_path)
else:
    top_dir = Dir('.')

vm_pkg = OpEnv.SandeshGenPy(
        '#controller/src/opserver/test/sandesh/virtual_machine.sandesh',
        'sandesh/', False)
vn_pkg = OpEnv.SandeshGenPy(
        '#controller/src/opserver/test/sandesh/virtual_network.sandesh',
        'sandesh/', False)
stats_test_pkg = OpEnv.SandeshGenPy(
        '#controller/src/opserver/test/sandesh/stats_test.sandesh',
        'sandesh/', False)
alarm_test_pkg = OpEnv.SandeshGenPy(
        '#controller/src/opserver/test/sandesh/alarm_test.sandesh',
        'sandesh/', False)
object_table_test_pkg = OpEnv.SandeshGenPy(
        '#controller/src/opserver/test/sandesh/object_table_test.sandesh',
        'sandesh/', False)
flow_pkg = OpEnv.SandeshGenPy(
        '#controller/src/sandesh/common/flow.sandesh',
        'sandesh/', False)
qe_test_pkg = OpEnv.SandeshGenPy(
        '#controller/src/query_engine/qe.sandesh',
        'sandesh/', False)
sandesh_pkgs = [vm_pkg, vn_pkg, stats_test_pkg, alarm_test_pkg,
                object_table_test_pkg, flow_pkg, qe_test_pkg]

testr_str = 'bash -c "set -o pipefail && cd ' + Dir(top_dir).path + \
            ' && tools_path=../config/common/tests/' + \
            ' omit_list="opserver/sandesh"' \
            ' build_top=' + Dir(OpEnv['TOP']).path + \
            ' CFLAGS= LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:../../../build/lib' \
            ' python setup.py run_tests %s 2>&1 |' \
            ' tee %s.log"'

OpEnv.Append(ENV = {'BUILDTOP': Dir(OpEnv['TOP']).abspath,
                    'COVERAGERUN': str(OpEnv['OPT'] == 'coverage')})

test_depends = [
        '/config/common/dist/cfgm_common-0.1dev.tar.gz',
        '/sandesh/common/dist/sandesh-common-0.1dev.tar.gz',
        '/tools/sandesh/library/python/dist/sandesh-0.1dev.tar.gz',
        '/api-lib/dist/vnc_api-0.1dev.tar.gz',
        '/nodemgr/dist/nodemgr-0.1dev.tar.gz',
        '/libpartition/dist/libpartition-0.1dev.tar.gz',
        '/discovery/client/dist/discoveryclient-0.1dev.tar.gz',
        '/analytics/vizd',
        '/query_engine/qedt',
        '/opserver/plugins/alarm_bgp_connectivity/dist/alarm_bgp_connectivity-0.1dev.tar.gz',
        '/opserver/plugins/alarm_partial_sysinfo/dist/alarm_partial_sysinfo-0.1dev.tar.gz',
        '/opserver/plugins/alarm_process_connectivity/dist/alarm_process_connectivity-0.1dev.tar.gz',
        '/opserver/plugins/alarm_process_status/dist/alarm_process_status-0.1dev.tar.gz',
        '/opserver/plugins/alarm_vrouter_interface/dist/alarm_vrouter_interface-0.1dev.tar.gz',
        '/opserver/plugins/alarm_phyif_bandwidth/dist/alarm_phyif_bandwidth-0.1dev.tar.gz',
        '/opserver/plugins/alarm_xmpp_connectivity/dist/alarm_xmpp_connectivity-0.1dev.tar.gz',
        '/opserver/plugins/alarm_config_incorrect/dist/alarm_config_incorrect-0.1dev.tar.gz',
        '/opserver/plugins/alarm_address_mismatch/dist/alarm_address_mismatch-0.1dev.tar.gz',
        '/opserver/plugins/alarm_storage/dist/alarm_storage-0.1dev.tar.gz',
        '/opserver/plugins/alarm_disk_usage/dist/alarm_disk_usage-0.1dev.tar.gz',
        '/opserver/plugins/alarm_prouter_connectivity/dist/alarm_prouter_connectivity-0.1dev.tar.gz',
        '/opserver/plugins/alarm_node_status/dist/alarm_node_status-0.1dev.tar.gz',
               ]

if OpEnv['OPT'] == 'coverage':
    run_test_cmd = OpEnv.Command('coveragetest.log', sdist_gen + sandesh_pkgs,
            testr_str % ('--coverage', 'coveragetest'))
    OpEnv.Depends(run_test_cmd, [OpEnv['TOP']+x for x in test_depends])
    OpEnv.Depends(run_test_cmd, sdist_depends)
    clean_coverage_cmd = OpEnv.Command('clean_coverage', '', clean_coverage)
    OpEnv.AlwaysBuild(clean_coverage_cmd)
    run_coverage_cmd = OpEnv.Command('run_coverage', '', run_coverage)
    OpEnv.Depends(run_coverage_cmd, run_test_cmd[0].name)
    OpEnv.Depends(run_coverage_cmd, 'analytics-test')
    OpEnv.Depends(run_coverage_cmd, 'qe-test')
    OpEnv.Depends(run_coverage_cmd, 'gendb_test_suite')
    OpEnv.Depends(run_coverage_cmd, 'thriftif_test_suite')
    OpEnv.Depends(run_test_cmd, clean_coverage_cmd[0].name)
    OpEnv.AlwaysBuild(run_coverage_cmd)
    test_cmd = run_coverage_cmd
elif OpEnv['PYTESTARG']:
    test_cmd = OpEnv.Command(OpEnv['PYTESTARG'] + '.log',
            sdist_gen + sandesh_pkgs,
            testr_str % ('--testrun="%s"' % (OpEnv['PYTESTARG']),
            OpEnv['PYTESTARG']))
    OpEnv.Depends(test_cmd, [OpEnv['TOP']+x for x in test_depends])
    OpEnv.Depends(test_cmd, sdist_depends)
else:
    test_cmd = OpEnv.Command('test.log', sdist_gen + sandesh_pkgs,
            testr_str % ('', 'test'))
    OpEnv.Depends(test_cmd, [OpEnv['TOP']+x for x in test_depends])
    OpEnv.Depends(test_cmd, sdist_depends)

OpEnv.Alias('tests', test_cmd)
OpEnv.Alias('controller/src/opserver:test', test_cmd)
OpEnv.AlwaysBuild(test_cmd)
