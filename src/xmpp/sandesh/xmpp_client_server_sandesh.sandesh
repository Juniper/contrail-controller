/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

/**
 * XMPP Client Server Communication Module
 */

/**
 * @description: XMPP Client connection socket opening failure
 * @severity: WARNING
 * @cause: Failure to open TCP Socket to form a connection with the peer due to either use of sockets above the process limit or due to sockets leakage inside the process
 * @action: Process restart can help in getting around socket descriptors leakage, if any. lsof command can be used to find all sockets allocated by the process (in use or otherwise). ulimit command be used to see and tweak current socket descriptors limit (per process)
 */
systemlog sandesh ClientOpenFail {
    1: "XMPP Peer"
    2: string Peer (key="ObjectVRouter");
    /** Direction is 'SEND' or 'RECV' */
    3: string Direction;
    4: "Xmpp Client : open failed"
    5: string error_message
}

trace sandesh ClientOpenFailTrace {
    1: "XMPP Peer"
    2: string Peer (key="ObjectVRouter");
    /** Direction is 'SEND' or 'RECV' */
    3: string Direction;
    4: "Xmpp Client : open failed"
    5: string error_message
}

/**
 * @description: XMPP socket option setting failure
 * @severity: WARNING
 * @cause: Set Socket option error possibly due to lack of its support in the kernel
 * @action: Check for kernel version and its ability to support the socket option that failed. Moving to a different kernel via kernel upgrade might help in working around this issue
 */
systemlog sandesh SetSockOptFail {
    1: "XMPP Peer"
    2: string Peer (key="ObjectVRouter");
    /** Direction is 'SEND' or 'RECV' */
    3: string Direction;
    4: "Xmpp Client: set_option: "
    5: string error_message
}

trace sandesh SetSockOptFailTrace {
    1: "XMPP Peer"
    2: string Peer (key="ObjectVRouter");
    /** Direction is 'SEND' or 'RECV' */
    3: string Direction;
    4: "Xmpp Client: set_option: "
    5: string error_message
}

/**
 * @description: XMPP Server connection socket opening failure
 * @severity: WARNING
 * @cause: Failure to open TCP Socket to form a connection with the peer due to either use of sockets above the process limit or due to sockets leakage inside the process
 * @action: Process restart can help in getting around socket descriptors leakage, if any. lsof command can be used to find all sockets allocated by the process (in use or otherwise). ulimit command be used to see and tweak current socket descriptors limit (per process)
 */
systemlog sandesh ServerOpenFail {
    1: "Xmpp Server : open failed"
    2: string error_message
}

trace sandesh ServerOpenFailTrace {
    1: "Xmpp Server : open failed"
    2: string error_message
}

/**
 * @description: XMPP Server socket bind operation failure
 * @severity: WARNING
 * @cause: Possibly the port already bound to and used by another process
 * @action: Check if another/duplicate process is already using the same port using netstat and lsof command line tools. If found, kill such offending processes and restart the daemon. If the port is used by another application legitimately, try changing the xmpp server port to a different unused port in /etc/contrail/contrail-control.conf
 */
systemlog sandesh ServerBindFailure {
    1: "Bind failure: ";
    2: string error_message;
}

trace sandesh ServerBindFailureTrace {
    1: "Bind failure: ";
    2: string error_message;
}

/**
 * @description: XMPP Server socket TCP KeepAlive option setting failure
 * @cause: Set Socket option error possibly due to lack of TCP KeepAlives support in the kernel
 * @action: Check for kernel version and its ability to support the TCP KeepAlive socket option. Moving to a different kernel via kernel upgrade might help in working around this issue
 * @action: Contact your technical support representative
 */
systemlog sandesh ServerKeepAliveFailure {
    1: "XMPP Peer"
    2: string Peer (key="ObjectVRouter");
    /** Direction is 'SEND' or 'RECV' */
    3: string Direction;
    4: "Tcp KeepAlive failure: ";
    5: string error_message;
}

trace sandesh ServerKeepAliveFailureTrace {
    1: "XMPP Peer"
    2: string Peer (key="ObjectVRouter");
    /** Direction is 'SEND' or 'RECV' */
    3: string Direction;
    4: "Tcp KeepAlive failure: ";
    5: string error_message;
}

/**
 * @description: XMPP Connection created
 * @severity: DEBUG
 */
systemlog sandesh XmppCreateConnection {
    1: "XMPP Peer"
    2: string Peer (key="ObjectVRouter");
    /** Direction is 'SEND' or 'RECV' */
    3: string Direction;
    4: "Xmpp creating dynamic channel"
    5: string to;
}

trace sandesh XmppCreateConnectionTrace {
    1: "XMPP Peer"
    2: string Peer (key="ObjectVRouter");
    /** Direction is 'SEND' or 'RECV' */
    3: string Direction;
    4: "Xmpp creating dynamic channel"
    5: string to;
}

/**
 * @description: XMPP Connection deleted
 * @severity: DEBUG
 */
systemlog sandesh XmppDeleteConnection {
    1: "XMPP Peer"
    2: string Peer (key="ObjectVRouter");
    /** Direction is 'SEND' or 'RECV' */
    3: string Direction;
    4: "Xmpp deleting dynamic channel"
    5: string to;
}

trace sandesh XmppDeleteConnectionTrace {
    1: "XMPP Peer"
    2: string Peer (key="ObjectVRouter");
    /** Direction is 'SEND' or 'RECV' */
    3: string Direction;
    4: "Xmpp deleting dynamic channel"
    5: string to;
}
