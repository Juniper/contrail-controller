#
# Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
#

Import('BuildEnv')
import sys

env = BuildEnv.Clone()

env.Append(CPPPATH = [env['TOP'],
                      env['TOP'] + '/db',
                      env['TOP'] + '/io',
                     ])

env.Append(LIBPATH = env['TOP'] + '/base')
env.Append(LIBPATH = env['TOP'] + '/base/test')
env.Append(LIBPATH = env['TOP'] + '/bgp')
env.Append(LIBPATH = env['TOP'] + '/bgp/inet')
env.Append(LIBPATH = env['TOP'] + '/bgp/inet6')
env.Append(LIBPATH = env['TOP'] + '/bgp/evpn')
env.Append(LIBPATH = env['TOP'] + '/bgp/ermvpn')
env.Append(LIBPATH = env['TOP'] + '/bgp/test')
env.Append(LIBPATH = env['TOP'] + '/bgp/l3vpn')
env.Append(LIBPATH = env['TOP'] + '/bgp/inet6')
env.Append(LIBPATH = env['TOP'] + '/bgp/inet6vpn')
env.Append(LIBPATH = env['TOP'] + '/bgp/origin-vn')
env.Append(LIBPATH = env['TOP'] + '/bgp/routing-instance')
env.Append(LIBPATH = env['TOP'] + '/bgp/routing-policy')
env.Append(LIBPATH = env['TOP'] + '/bgp/rtarget')
env.Append(LIBPATH = env['TOP'] + '/bgp/security_group')
env.Append(LIBPATH = env['TOP'] + '/bgp/tunnel_encap')
env.Append(LIBPATH = env['TOP'] + '/control-node')
env.Append(LIBPATH = env['TOP'] + '/db')
env.Append(LIBPATH = env['TOP'] + '/io')
env.Append(LIBPATH = env['TOP'] + '/ifmap')
env.Append(LIBPATH = env['TOP'] + '/net')
env.Append(LIBPATH = env['TOP'] + '/route')
env.Append(LIBPATH = env['TOP'] + '/xmpp')
env.Append(LIBPATH = env['TOP'] + '/xml')
env.Append(LIBPATH = env['TOP'] + '/schema')
env.Append(LIBPATH = env['TOP'] + '/bgp/extended-community')

env.Prepend(LIBS = [
                    'task_test',
                    'bgptest',
                    'bgp',
                    'bgp_ifmap_config',
                    'peer_sandesh',
                    'table_sandesh',
                    'control_node',
                    'origin_vn',
                    'routing_instance',
                    'routing_policy',
                    'rtarget',
                    'security_group',
                    'tunnel_encap',
                    'ifmap_vnc',
                    'bgp_schema',
                    'sandesh',
                    'http',
                    'http_parser',
                    'curl',
                    'ifmap_server',
                    'ifmap_common',
                    'base',
                    'db',
                    'gunit',
                    'io',
                    'crypto',
                    'sandeshvns',
                    'net',
                    'route',
                    'xmpp',
                    'bgp_inet',
                    'bgp_inet6',
                    'bgp_ermvpn',
                    'bgp_evpn',
                    'bgp_l3vpn',
                    'bgp_inet6',
                    'bgp_inet6vpn',
                    'xmpp_unicast',
                    'xmpp_multicast',
                    'xmpp_enet',
                    'xml',
                    'pugixml',
                    'ssl',
                    'boost_regex',
                    'process_info',
                    'extended_community'
                    ])

if sys.platform != 'darwin':
    env.Append(LIBS=['rt'])
    env.Prepend(LINKFLAGS = ['-Wl,--whole-archive',
                             '-lbgp_ermvpn',
                             '-lbgp_evpn',
                             '-lbgp_inet',
                             '-lbgp_inet6',
                             '-lbgp_inet6vpn',
                             '-lbgp_l3vpn',
                             '-lrtarget',
                             '-ltask_test',
                             '-Wl,--no-whole-archive'])
else:
    lib_ermvpn = Dir('../../ermvpn').path + '/libbgp_ermvpn.a'
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_ermvpn])
    lib_evpn = Dir('../../evpn').path + '/libbgp_evpn.a'
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_evpn])
    lib_inet = Dir('../../inet').path + '/libbgp_inet.a'
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_inet])
    lib_inet6 = Dir('../../inet6').path + '/libbgp_inet6.a'
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_inet6])
    lib_inet6vpn = Dir('../../inet6vpn').path + '/libbgp_inet6vpn.a'
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_inet6vpn])
    lib_l3vpn = Dir('../../l3vpn').path + '/libbgp_l3vpn.a'
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_l3vpn])
    lib_rtarget = Dir('../../rtarget').path + '/librtarget.a'
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_rtarget])

inet6vpn_prefix_test = env.UnitTest('inet6vpn_prefix_test',
                                    ['inet6vpn_prefix_test.cc'])
env.Alias('src/bgp/inet6vpn:inet6vpn_prefix_test', inet6vpn_prefix_test)
env.Alias('controller/src/bgp/inet6vpn:inet6vpn_prefix_test',
          inet6vpn_prefix_test)

inet6vpn_route_test = env.UnitTest('inet6vpn_route_test',
                                   ['inet6vpn_route_test.cc'])
env.Alias('src/bgp/inet6vpn:inet6vpn_route_test', inet6vpn_route_test)
env.Alias('controller/src/bgp/inet6vpn:inet6vpn_route_test',
          inet6vpn_route_test)

inet6vpn_table_test = env.UnitTest('inet6vpn_table_test',
                                   ['inet6vpn_table_test.cc'])
env.Alias('src/bgp/inet6vpn:inet6vpn_table_test', inet6vpn_table_test)
env.Alias('controller/src/bgp/inet6vpn:inet6vpn_table_test',
          inet6vpn_table_test)

test_suite = [
    inet6vpn_prefix_test,
    inet6vpn_route_test,
    inet6vpn_table_test,
]

test = env.TestSuite('bgp-test', test_suite)
env.Alias('controller/src/bgp/inet6vpn:test', test)

Return('test_suite')

# Local Variables:
# mode: python
# End:
