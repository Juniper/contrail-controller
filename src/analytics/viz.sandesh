/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

//
//  viz.sandesh
//
//  Collector definitions
//

const string COLLECTOR_KEYSPACE     = "ContrailAnalytics"
const string COLLECTOR_GLOBAL_TABLE = "MessageTable"
const string UUID_KEY               = "UuidKey"
const string SOURCE                 = "Source"
const string KEYWORD                = "Keyword"
const string NAMESPACE              = "Namespace"
const string MODULE                 = "ModuleId"
const string INSTANCE_ID            = "InstanceId"
const string NODE_TYPE              = "NodeType"
const string TIMESTAMP              = "MessageTS"
const string SANDESH_TYPE           = "Type"
const string CATEGORY               = "Category"
const string LEVEL                  = "Level"
const string IPADDRESS              = "IPAddress"
const string PID                    = "Pid"
const string MESSAGE_TYPE           = "Messagetype"
const string DATA                   = "Xmlmessage"
const string CONTEXT                = "Context"
const string SEQUENCE_NUM           = "SequenceNum"
const string VERSION                = "VersionSig"
const string MESSAGE_TABLE_SOURCE  = "MessageTableSource"
const string MESSAGE_TABLE_MODULE_ID  = "MessageTableModuleId"
const string MESSAGE_TABLE_MESSAGE_TYPE  = "MessageTableMessageType"
const string MESSAGE_TABLE_CATEGORY = "MessageTableCategory"
const string MESSAGE_TABLE_LEVEL    = "MessageTableLevel"
const string MESSAGE_TABLE_TIMESTAMP = "MessageTableTimestamp"
const string MESSAGE_TABLE_KEYWORD = "MessageTableKeyword"
const string OBJECT_ID              = "ObjectId"

const string ROWTIMESTAMP           = "RowTimeStamp"

const string OBJECT_VALUE_TABLE     = "ObjectValueTable"

const string SYSTEM_OBJECT_TABLE    = "SystemObjectTable"
const string SYSTEM_OBJECT_ANALYTICS = "SystemObjectAnalytics"
const string SYSTEM_OBJECT_START_TIME = "SystemObjectStartTime"

// Master object table which contains all object tables combined
const string OBJECT_TABLE       = "ObjectTable"

//The following are the object tables and some of them are UVEs
const string VN_TABLE               = "ObjectVNTable"
const string VM_TABLE               = "ObjectVMTable"
const string SI_TABLE               = "ObjectSITable"
const string VROUTER_TABLE          = "ObjectVRouter"
const string BGP_PEER_TABLE         = "ObjectBgpPeer"
const string BGP_ROUTER_TABLE       = "ObjectBgpRouter"
const string XMPP_PEER_INFO_TABLE   = "ObjectXmppPeerInfo"
const string ROUTING_INSTANCE_TABLE = "ObjectRoutingInstance"
const string XMPP_CONNECTION_TABLE  = "ObjectXmppConnection"
const string COLLECTOR_INFO_TABLE   = "ObjectCollectorInfo"
const string DATABASE_INFO_TABLE    = "ObjectDatabaseInfo"
const string GENERATOR_INFO_TABLE   = "ObjectGeneratorInfo"
const string CONFIG_NODE_TABLE      = "ObjectConfigNode"
const string SERVICE_CHAIN          = "ServiceChain"
const string DNS_TABLE              = "ObjectDns"
const string QUERY_TABLE_OBJECT     = "ObjectQueryTable"
const string QUERY_QID_OBJECT       = "ObjectQueryQid"
const string CONFIG_OBJECT_TABLE    = "ConfigObjectTable"
const string POOL_TABLE             = "ObjectPoolTable"
const string OSD_TABLE              = "ObjectOsdTable"
const string DISK_TABLE             = "ObjectDiskTable"
const string SERVER_TABLE             = "ObjectServerTable"
const string PROUTER_TABLE          = "ObjectPRouter"

const string VN_DISPLAY_NAME        = "Virtual Network"
const string VM_DISPLAY_NAME        = "Virtual Machine"
const string SI_DISPLAY_NAME        = "Service Instance"
const string VROUTER_DISPLAY_NAME   = "vRouter"
const string BGP_PEER_DISPLAY_NAME  = "BGP Peer"
const string ROUTING_INSTANCE_DISPLAY_NAME = "Routing Instance"
const string BGP_ROUTER_DISPLAY_NAME       = "Control Node"
const string XMPP_PEER_INFO_DISPLAY_NAME   = "XMPP Peer"
const string XMPP_CONNECTION_DISPLAY_NAME  = "XMPP Connection"
const string COLLECTOR_INFO_DISPLAY_NAME   = "Analytics Node"
const string DATABASE_INFO_DISPLAY_NAME   = "Database Node"
const string GENERATOR_INFO_DISPLAY_NAME   = "Generator"
const string CONFIG_NODE_DISPLAY_NAME      = "Config Node"
const string SERVICE_CHAIN_DISPLAY_NAME = "Service Chain"
const string DNS_DISPLAY_NAME              = "DNS Node"
const string QUERY_TABLE_DISPLAY_NAME      = "Query Object Table"
const string QUERY_QID_DISPLAY_NAME        = "Query Object Qid"
const string CONFIG_OBJECT_DISPLAY_NAME    = "Config Object Table"
const string STORAGE_POOL_DISPLAY_NAME     = "Storage Pool"
const string STORAGE_OSD_DISPLAY_NAME      = "Storage Device"
const string STORAGE_DISK_DISPLAY_NAME     = "Storage RawDisk"
const string SERVER_TABLE_DISPLAY_NAME       = "Server Table Info"
const string PROUTER_DISPLAY_NAME          = "pRouter"

const string SYSTEM_LOG             = "SystemLog"
const string OBJECT_LOG             = "ObjectLog"

const string FLOW_TABLE             = "FlowRecordTable"
const string FLOW_TABLE_VN2VN       = "FlowTableVNtoVN"
const string FLOW_TABLE_VN          = "FlowTableVN"
const string FLOW_TABLE_VN_AND_IP   = "FlowTableVNandIP"
const string FLOW_TABLE_SVN_SIP     = "FlowTableSvnSipVer2"
const string FLOW_TABLE_DVN_DIP     = "FlowTableDvnDipVer2"
const string FLOW_TABLE_PROT_SP     = "FlowTableProtSpVer2"
const string FLOW_TABLE_PROT_DP     = "FlowTableProtDpVer2"
const string FLOW_TABLE_VROUTER     = "FlowTableVRouterVer2"
const string FLOW_SERIES_TABLE      = "FlowSeriesTable"
const string FLOW_TABLE_INVALID     = "Invalid Flow Table"

const string OVERLAY_TO_UNDERLAY_FLOW_MAP = "OverlayToUnderlayFlowMap"

const string STATS_TABLE_BY_STR_STR_TAG     = "StatsTableByStrStrTagV3"
const string STATS_TABLE_BY_STR_U64_TAG     = "StatsTableByStrU64TagV3"
const string STATS_TABLE_BY_U64_STR_TAG     = "StatsTableByU64StrTagV3"
const string STATS_TABLE_BY_U64_U64_TAG     = "StatsTableByU64U64TagV3"

const string STATS_TABLE_BY_DBL_TAG         = "StatsTableByDblTagV3"
const string STATS_TABLE_BY_STR_TAG         = "StatsTableByStrTagV3"
const string STATS_TABLE_BY_U64_TAG         = "StatsTableByU64TagV3"

// Please keep FlowRecordFields and FlowRecordNames in sync
enum FlowRecordFields {
   FLOWREC_FLOWUUID,
   FLOWREC_DIRECTION_ING,
   FLOWREC_SOURCEVN,
   FLOWREC_SOURCEIP,
   FLOWREC_DESTVN,
   FLOWREC_DESTIP,
   FLOWREC_PROTOCOL,
   FLOWREC_SPORT,
   FLOWREC_DPORT,
   FLOWREC_TOS,
   FLOWREC_TCP_FLAGS,
   FLOWREC_VM,
   FLOWREC_INPUT_INTERFACE,
   FLOWREC_OUTPUT_INTERFACE,
   FLOWREC_MPLS_LABEL,
   FLOWREC_REVERSE_UUID,
   FLOWREC_SETUP_TIME,
   FLOWREC_TEARDOWN_TIME,
   FLOWREC_MIN_INTERARRIVAL,
   FLOWREC_MAX_INTERARRIVAL,
   FLOWREC_MEAN_INTERARRIVAL,
   FLOWREC_STDDEV_INTERARRIVAL,
   FLOWREC_BYTES,
   FLOWREC_PACKETS,
   FLOWREC_DATA_SAMPLE,
   FLOWREC_VROUTER,
   FLOWREC_DIFF_BYTES,
   FLOWREC_DIFF_PACKETS,
   FLOWREC_SHORT_FLOW,
   FLOWREC_JSON,
   FLOWREC_ACTION,
   FLOWREC_SG_RULE_UUID,
   FLOWREC_NW_ACE_UUID,
   FLOWREC_VROUTER_IP,
   FLOWREC_OTHER_VROUTER_IP,
   FLOWREC_UNDERLAY_PROTO,
   FLOWREC_UNDERLAY_SPORT,
   FLOWREC_MAX,
}

const list<string> FlowRecordNames = [
    "flowuuid",
    "direction_ing",
    "sourcevn",
    "sourceip",
    "destvn",
    "destip",
    "protocol",
    "sport",
    "dport",
    "tos",
    "tcp_flags",
    "vm",
    "input_interface",
    "output_interface",
    "mpls_label",
    "reverse_uuid",
    "setup_time",
    "teardown_time",
    "min_interarrival",
    "max_interarrival",
    "mean_interarrival",
    "stddev_interarrival",
    "bytes",
    "packets",
    "data_sample",
    "vrouter",
    "diff_bytes",
    "diff_packets",
    "short_flow",
    "json",
    "action",
    "sg_rule_uuid",
    "nw_ace_uuid",
    "vrouter_ip",
    "other_vrouter_ip",
    "underlay_proto",
    "underlay_source_port",
    "invalid",
]

// UFlowData fields
const string UFLOW_PROUTER = "name";
const string UFLOW_PIFINDEX = "flow.pifindex";
const string UFLOW_SIP = "flow.sip";
const string UFLOW_DIP = "flow.dip";
const string UFLOW_SPORT = "flow.sport";
const string UFLOW_DPORT = "flow.dport";
const string UFLOW_PROTOCOL = "flow.protocol";
const string UFLOW_VLAN = "flow.vlan";
const string UFLOW_FLOWTYPE = "flow.flowtype";
const string UFLOW_OTHERINFO = "flow.otherinfo";

// OverlayToUnderlayFlowMap fields
const string O_SVN = "o_svn";
const string O_SIP = "o_sip";
const string O_DVN = "o_dvn";
const string O_DIP = "o_dip";
const string O_SPORT = "o_sport";
const string O_DPORT = "o_dport";
const string O_PROTOCOL = "o_protocol";
const string O_VROUTER = "o_vrouter";
const string U_PROUTER = "u_prouter";
const string U_PIFINDEX = "u_pifindex";
const string U_VLAN = "u_vlan";
const string U_SIP = "u_sip";
const string U_DIP = "u_dip";
const string U_SPORT = "u_sport";
const string U_DPORT = "u_dport";
const string U_PROTOCOL = "u_protocol";
const string U_FLOWTYPE = "u_flowtype";
const string U_OTHERINFO = "u_otherinfo"

const map<string, string> OverlayToFlowRecordTableFields = {
    O_SVN : "sourcevn",
    O_SIP : "sourceip",
    O_DVN : "destvn",
    O_DIP : "destip",
    O_SPORT : "sport",
    O_DPORT : "dport",
    O_PROTOCOL : "protocol",
    O_VROUTER : "vrouter"
}

const map<string, string> FlowRecordToUFlowDataFields = {
    "vrouter_ip" : UFLOW_SIP,
    "other_vrouter_ip" : UFLOW_DIP,
    "underlay_source_port" : UFLOW_SPORT,
    "underlay_proto" : UFLOW_PROTOCOL
}

const map<string, string> UnderlayToUFlowDataFields = {
    U_PROUTER : UFLOW_PROUTER,
    U_PIFINDEX : UFLOW_PIFINDEX,
    U_SIP : UFLOW_SIP,
    U_DIP : UFLOW_DIP,
    U_SPORT : UFLOW_SPORT,
    U_DPORT : UFLOW_DPORT,
    U_PROTOCOL : UFLOW_PROTOCOL,
    U_VLAN : UFLOW_VLAN,
    U_FLOWTYPE : UFLOW_FLOWTYPE,
    U_OTHERINFO : UFLOW_OTHERINFO
}

const map<string, string> UFlowDataToUnderlayFields = {
    UFLOW_PROUTER : U_PROUTER,
    UFLOW_PIFINDEX : U_PIFINDEX,
    UFLOW_SIP : U_SIP,
    UFLOW_DIP : U_DIP,
    UFLOW_SPORT : U_SPORT,
    UFLOW_DPORT : U_DPORT,
    UFLOW_PROTOCOL : U_PROTOCOL,
    UFLOW_VLAN : U_VLAN,
    UFLOW_FLOWTYPE : U_FLOWTYPE,
    UFLOW_OTHERINFO : U_OTHERINFO
}

// Flow Table Query Strings
const string FLOW_TABLE_UUID       = "UuidKey"
const string FLOW_TABLE_AGG_PKTS   = "agg-packets"
const string FLOW_TABLE_AGG_BYTES  = "agg-bytes"

/* REDIS RELATED NAMES/CONSTANTS */

const string GENERATORS_SET         = "NGENERATORS"
const string ANALYTICS_START        = "ANALYTICS_START_TIME"

// each row will have equivalent of 2^23 = 8388608 usec
const i32 RowTimeInBits             = 23
const i32 RowTimeInMask             = 0x7fffff

// analytics data ttl in the db in hours 
const i32 AnalyticsTTL              = 48 

const map<string, string> UVE_MAP = {
    "virtual-network" : VN_TABLE,
    "virtual-machine" : VM_TABLE,
    "service-instance" : SI_TABLE,
    "vrouter" : VROUTER_TABLE,
    "control-node" : BGP_ROUTER_TABLE,
    "bgp-peer" : BGP_PEER_TABLE,
    "xmpp-peer" : XMPP_PEER_INFO_TABLE,
    "analytics-node" : COLLECTOR_INFO_TABLE,
    "database" : DATABASE_INFO_TABLE,
    "generator" : GENERATOR_INFO_TABLE
    "config-node" : CONFIG_NODE_TABLE,
    "service-chain" : SERVICE_CHAIN,
    "dns-node" : DNS_TABLE,
    "storage-pool" : POOL_TABLE,
    "storage-osd" : OSD_TABLE,
    "storage-disk" : DISK_TABLE,
    "server" : SERVER_TABLE,
    "prouter" : PROUTER_TABLE,
}

struct objtable_info {
    1: string objtable_display_name;
    2: string log_query_name;
}

const map<string, objtable_info> _OBJECT_TABLES = {
    CONFIG_OBJECT_TABLE    : {
        'objtable_display_name' : CONFIG_OBJECT_DISPLAY_NAME
        'log_query_name'        : "config"
    }
    VN_TABLE               : {
        'objtable_display_name' : VN_DISPLAY_NAME
        'log_query_name'        : "virtual-network"
    }
    VM_TABLE               : {
        'objtable_display_name' : VM_DISPLAY_NAME
        'log_query_name'        : "virtual-machine"
    }
    SI_TABLE               : {
        'objtable_display_name' : SI_DISPLAY_NAME
        'log_query_name'        : "service-instance"
    }
    VROUTER_TABLE          : {
        'objtable_display_name' : VROUTER_DISPLAY_NAME
        'log_query_name'        : "vrouter"
    }
    PROUTER_TABLE          : {
        'objtable_display_name' : PROUTER_DISPLAY_NAME
        'log_query_name'        : "prouter"
    }
    BGP_PEER_TABLE         : {
        'objtable_display_name' : BGP_PEER_DISPLAY_NAME
        'log_query_name'        : "bgp-peer"
    }
    BGP_ROUTER_TABLE       : {
        'objtable_display_name' : BGP_ROUTER_DISPLAY_NAME
        'log_query_name'        : "control-node"
    }
    ROUTING_INSTANCE_TABLE : {
        'objtable_display_name' : ROUTING_INSTANCE_DISPLAY_NAME
        'log_query_name'        : "routing-instance"
    }
    XMPP_CONNECTION_TABLE  : {
        'objtable_display_name' : XMPP_CONNECTION_DISPLAY_NAME
        'log_query_name'        : "xmpp-connection"
    }
    XMPP_PEER_INFO_TABLE  : {
        'objtable_display_name' : XMPP_PEER_INFO_DISPLAY_NAME
        'log_query_name'        : "xmpp-peer"
    }
    COLLECTOR_INFO_TABLE   : {
        'objtable_display_name' : COLLECTOR_INFO_DISPLAY_NAME
        'log_query_name'        : "analytics-node"
    }
    DATABASE_INFO_TABLE   : {
        'objtable_display_name' : DATABASE_INFO_DISPLAY_NAME
        'log_query_name'        : "database-node"
    }
    GENERATOR_INFO_TABLE   : {
        'objtable_display_name' : GENERATOR_INFO_DISPLAY_NAME
        'log_query_name'        : "generator"
    }
    CONFIG_NODE_TABLE      : {
        'objtable_display_name' : CONFIG_NODE_DISPLAY_NAME
        'log_query_name'        : "config-node"
    }
    SERVICE_CHAIN          : {
        'objtable_display_name' : SERVICE_CHAIN_DISPLAY_NAME
        'log_query_name'        : "service-chain"
    }
    DNS_TABLE       : {
        'objtable_display_name' : DNS_DISPLAY_NAME
        'log_query_name'        : "dns-node"
    }
    QUERY_TABLE_OBJECT       : {
        'objtable_display_name' : QUERY_TABLE_DISPLAY_NAME
        'log_query_name'        : "analytics-query"
    }
    QUERY_QID_OBJECT       : {
        'objtable_display_name' : QUERY_QID_DISPLAY_NAME
        'log_query_name'        : "analytics-query-id"
    }
    POOL_TABLE          : {
        'objtable_display_name' : STORAGE_POOL_DISPLAY_NAME
    }
    OSD_TABLE          : {
        'objtable_display_name' : STORAGE_OSD_DISPLAY_NAME
    }
    DISK_TABLE          : {
        'objtable_display_name' : STORAGE_DISK_DISPLAY_NAME
    }
    SERVER_TABLE          : {
        'objtable_display_name' : SERVER_TABLE_DISPLAY_NAME
    }
}

// Analytics table schema defination

// Description of the column
struct query_column
{
    1: string name;
    2: string datatype;
    3: bool index;
    4: bool select;
    5: list<string> suffixes;
}

struct query_schema_type
{
    1: string type;
    2: list<query_column> columns;
}

struct query_table
{
    1: string name;
    2: query_schema_type schema;
    3: list<string> columnvalues;
    4: string display_name;
}

struct stat_query_column
{
    1: string name;
    2: string datatype;
    3: bool index;
    4: list<string> suffixes;
}

struct stat_table
{
    6: string display_name;
    1: string stat_type;
    2: string stat_attr;
    3: string obj_table;
    5: list<stat_query_column> attributes;
}

const string STAT_OBJECTID_FIELD = "name";
const string STAT_SOURCE_FIELD   = SOURCE;
const string STAT_TIME_FIELD     = "T";
const string STAT_TIMEBIN_FIELD  = "T=";
const string STAT_UUID_FIELD     = "UUID";
const string STAT_VT_PREFIX      = "StatTable";

const list<stat_table> _STAT_TEST_TABLES = [ 
{
      'display_name' : 'Test',
      'stat_type' : 'StatTestState',
      'stat_attr' : 'st',
      'obj_table' : COLLECTOR_INFO_TABLE,
      'attributes': [
          { 'name' : 'st.i1', 'datatype' : 'int', 'index' : true, 'suffixes': ['st.i2']},
          { 'name' : 'st.i2', 'datatype' : 'int', 'index' : false},
          { 'name' : 'st.d1', 'datatype' : 'double', 'index' : true},
          { 'name' : 'st.s1', 'datatype' : 'string', 'index' : false},
          { 'name' : 'st.s2', 'datatype' : 'string', 'index' : true},
          { 'name' : 'l1',    'datatype' : 'string', 'index' : true},
          { 'name' : 'name',  'datatype' : 'string', 'index' : true, 'suffixes': ['st.s1']},
        ]
}
]

const list<stat_table> _STAT_TABLES  = [
    {
      'display_name' : 'Analytics CPU Information',
      'stat_type' : 'AnalyticsCpuState',
      'stat_attr' : 'cpu_info',
      'obj_table' : COLLECTOR_INFO_TABLE,
      'attributes': [
          { 'name' : 'cpu_info.mem_virt',  'datatype' : 'int',    'index' : true},
          { 'name' : 'cpu_info.cpu_share', 'datatype' : 'double', 'index' : true},
          { 'name' : 'cpu_info.inst_id',   'datatype' : 'string', 'index' : false},
          { 'name' : 'cpu_info.module_id', 'datatype' : 'string', 'index' : true},
        ]
    },
    {
      'display_name' : 'Config CPU Information',
      'stat_type' : 'ConfigCpuState',
      'stat_attr' : 'cpu_info',
      'obj_table' : CONFIG_NODE_TABLE,
      'attributes': [
          { 'name' : 'cpu_info.mem_virt',  'datatype' : 'int',    'index' : true},
          { 'name' : 'cpu_info.cpu_share', 'datatype' : 'double', 'index' : true},
          { 'name' : 'cpu_info.inst_id',   'datatype' : 'string', 'index' : false},
          { 'name' : 'cpu_info.module_id', 'datatype' : 'string', 'index' : true},
        ]
    },
    {
      'display_name' : 'Control CPU Information',
      'stat_type' : 'ControlCpuState',
      'stat_attr' : 'cpu_info',
      'obj_table' : BGP_ROUTER_TABLE,
      'attributes': [
          { 'name' : 'cpu_info.mem_virt',  'datatype' : 'int',    'index' : true},
          { 'name' : 'cpu_info.cpu_share', 'datatype' : 'double', 'index' : true},
          { 'name' : 'cpu_info.inst_id',   'datatype' : 'string', 'index' : false},
          { 'name' : 'cpu_info.module_id', 'datatype' : 'string', 'index' : true},
        ]
    },
    {
      'display_name' : 'Physical Router Interface Statistics',
      'stat_type' : 'PRouterEntry',
      'stat_attr' : 'ifStats',
      'obj_table' : PROUTER_TABLE,
      'attributes': [
         { 'name': 'name', 'datatype': 'string', 'index': true,
                       'suffixes': ['ifStats.ifIndex']},
         { 'name': 'ifStats.ifInUcastPkts', 'datatype': 'int', 'index': false},
         { 'name': 'ifStats.ifInMulticastPkts', 'datatype': 'int',
                                                                'index': false},
         { 'name': 'ifStats.ifInBroadcastPkts', 'datatype': 'int',
                                                                'index': false},
         { 'name': 'ifStats.ifInDiscards', 'datatype': 'int', 'index': false},
         { 'name': 'ifStats.ifInErrors', 'datatype': 'int', 'index': false},
         { 'name': 'ifStats.ifOutUcastPkts', 'datatype': 'int', 'index': false},
         { 'name': 'ifStats.ifOutMulticastPkts', 'datatype': 'int',
                                                                'index': false},
         { 'name': 'ifStats.ifOutBroadcastPkts', 'datatype': 'int',
                                                                'index': false},
         { 'name': 'ifStats.ifOutDiscards', 'datatype': 'int', 'index': false},
         { 'name': 'ifStats.ifOutErrors', 'datatype': 'int', 'index': false},
         { 'name': 'ifStats.ifIndex', 'datatype': 'int', 'index': false},
        ]
    },
    {
      'display_name' : 'Compute CPU Information',
      'stat_type' : 'ComputeCpuState',
      'stat_attr' : 'cpu_info',
      'obj_table' : VROUTER_TABLE,
      'attributes': [
          { 'name' : 'cpu_info.mem_virt',  'datatype' : 'int',    'index' : true},
          { 'name' : 'cpu_info.cpu_share', 'datatype' : 'double', 'index' : true},
          { 'name' : 'cpu_info.used_sys_mem', 'datatype' : 'int',    'index' : false},
          { 'name' : 'cpu_info.one_min_cpuload', 'datatype' : 'double', 'index' : false},
        ]
    },
    {
      'display_name' : 'Storage Pool Info',
      'stat_type' : 'ComputeStoragePool',
      'stat_attr' : 'info_stats',
      'obj_table' : POOL_TABLE,
      'attributes': [
          { 'name' : 'info_stats.reads',  'datatype' : 'int',    'index' : false},
          { 'name' : 'info_stats.writes', 'datatype': 'int', 'index' : false},
          { 'name' : 'info_stats.read_kbytes', 'datatype': 'int', 'index' : false},
          { 'name' : 'info_stats.write_kbytes', 'datatype': 'int', 'index' : false},
        ]
    },
    {
      'display_name' : 'Storage Device Info',
      'stat_type' : 'ComputeStorageOsd',
      'stat_attr' : 'info_stats',
      'obj_table' : OSD_TABLE,
      'attributes': [
          { 'name' : 'name',  'datatype' : 'string',  'index' : true},
          { 'name' : 'uuid',  'datatype' : 'string',    'index' : true},
          { 'name' : 'info_stats.reads',  'datatype' : 'int',    'index' : false},
          { 'name' : 'info_stats.writes', 'datatype': 'int', 'index' : false},
          { 'name' : 'info_stats.read_kbytes', 'datatype': 'int', 'index' : false},
          { 'name' : 'info_stats.write_kbytes', 'datatype': 'int', 'index' : false},
          { 'name' : 'info_stats.op_r_latency', 'datatype': 'int', 'index' : false},
          { 'name' : 'info_stats.op_w_latency', 'datatype': 'int', 'index' : false},
        ]
    },
    {
      'display_name' : 'Storage Raw Device Info',
      'stat_type' : 'ComputeStorageDisk',
      'stat_attr' : 'info_stats',
      'obj_table' : DISK_TABLE,
      'attributes': [
          { 'name' : 'name',  'datatype' : 'string',  'index' : true},
          { 'name' : 'uuid',  'datatype' : 'string',    'index' : true},
          { 'name' : 'info_stats.reads',  'datatype' : 'int',    'index' : false},
          { 'name' : 'info_stats.writes', 'datatype': 'int', 'index' : false},
          { 'name' : 'info_stats.read_kbytes', 'datatype': 'int', 'index' : false},
          { 'name' : 'info_stats.write_kbytes', 'datatype': 'int', 'index' : false},
          { 'name' : 'info_stats.iops', 'datatype': 'int', 'index' : false},
          { 'name' : 'info_stats.bw', 'datatype': 'int', 'index' : false},
        ]
    },
    {
      'display_name' : 'Ipmi Stats Info',
      'stat_type' : 'SMIpmiInfo',
      'stat_attr' : 'sensor_stats',
      'obj_table' : SERVER_TABLE,
      'attributes': [
          { 'name' : 'sensor_stats.sensor',  'datatype' : 'string',    'index' : true},
          { 'name' : 'sensor_stats.status', 'datatype': 'string', 'index' : false},
          { 'name' : 'sensor_stats.reading', 'datatype': 'long', 'index' : false},
          { 'name' : 'sensor_stats.unit', 'datatype': 'string', 'index' : false},
          { 'name' : 'sensor_stats.sensor_type', 'datatype': 'string', 'index' : true},
        ]
    },
    {

      'display_name' : 'Sandesh Information',
      'stat_type' : 'SandeshMessageStat',
      'stat_attr' : 'msg_info',
      'obj_table' : GENERATOR_INFO_TABLE,
      'attributes': [
          { 'name' : 'msg_info.type', 'datatype' : 'string', 'index' : true},
          { 'name' : 'msg_info.level', 'datatype' : 'string', 'index' : true},
          { 'name' : 'msg_info.messages', 'datatype' : 'int', 'index' : false},
          { 'name' : 'msg_info.bytes', 'datatype' : 'int', 'index' : false},
      ]
    },
    {
      'display_name' : 'Generator Database Table Statistics',
      'stat_type' : 'GeneratorDbStats',
      'stat_attr' : 'table_info',
      'obj_table' : GENERATOR_INFO_TABLE,
      'attributes': [
          { 'name' : 'table_info.table_name', 'datatype' : 'string', 'index' : true},
          { 'name' : 'table_info.reads', 'datatype' : 'long', 'index' : false},
          { 'name' : 'table_info.read_fails', 'datatype' : 'long', 'index' : false},
          { 'name' : 'table_info.writes', 'datatype' : 'long', 'index' : false},
          { 'name' : 'table_info.write_fails', 'datatype' : 'long', 'index' : false},
      ]
    },
    {
      'display_name' : 'Generator Database Errors',
      'stat_type' : 'GeneratorDbStats',
      'stat_attr' : 'errors',
      'obj_table' : GENERATOR_INFO_TABLE,
      'attributes': [
          { 'name' : 'errors.write_tablespace_fails', 'datatype' : 'long', 'index' : false},
          { 'name' : 'errors.read_tablespace_fails', 'datatype' : 'long', 'index' : false},
          { 'name' : 'errors.write_table_fails', 'datatype' : 'long', 'index' : false},
          { 'name' : 'errors.read_table_fails', 'datatype' : 'long', 'index' : false},
          { 'name' : 'errors.write_column_fails', 'datatype' : 'long', 'index' : false},
          { 'name' : 'errors.write_batch_column_fails', 'datatype' : 'long', 'index' : false},
          { 'name' : 'errors.read_column_fails', 'datatype' : 'long', 'index' : false},
      ]
    },
    {
      'display_name' : 'Values Table - string',
      'stat_type' : 'FieldNames'
      'stat_attr' : 'fields'
      'obj_table' : 'NONE',
      'attributes': [
          { 'name' : 'fields.value',  'datatype' : 'string',    'index' : false},
        ]
    },
    {
      'display_name' : 'Values Table - integer',
      'stat_type' : 'FieldNames'
      'stat_attr' : 'fieldi'
      'obj_table' : 'NONE',
      'attributes': [
          { 'name' : 'fieldi.value',  'datatype' : 'int',    'index' : false},
        ]
    },
    {
      'display_name' : 'QE Performance',
      'stat_type' : 'QueryPerfInfo',
      'stat_attr' : 'query_stats',
      'obj_table' : COLLECTOR_INFO_TABLE,
      'attributes': [
          { 'name' : 'table', 'datatype' : 'string','index' : true},
          { 'name' : 'name', 'datatype' : 'string','index' : true, 'suffixes': ['query_stats.qid']},
          { 'name' : 'query_stats.time', 'datatype' : 'int', 'index' : true},
          { 'name' : 'query_stats.rows', 'datatype' : 'int', 'index' : true},
          { 'name' : 'query_stats.qid',  'datatype' : 'string','index' : false},
          { 'name' : 'query_stats.where'      ,'datatype' : 'string','index' : false},
          { 'name' : 'query_stats.select'     ,'datatype' : 'string','index' : false},
          { 'name' : 'query_stats.post'       ,'datatype' : 'string','index' : false},
          { 'name' : 'query_stats.time_span'  ,'datatype' : 'int',   'index' : false},
          { 'name' : 'query_stats.chunks'             ,'datatype' : 'int','index' : false},
          { 'name' : 'query_stats.chunk_where_time'   ,'datatype' : 'string','index' : false},
          { 'name' : 'query_stats.chunk_select_time'  ,'datatype' : 'string','index' : false},
          { 'name' : 'query_stats.chunk_postproc_time','datatype' : 'string','index' : false},
          { 'name' : 'query_stats.chunk_merge_time'   ,'datatype' : 'string','index' : false},
          { 'name' : 'query_stats.final_merge_time'   ,'datatype' : 'int','index' : false},
        ]
    },
    {
      'display_name' : 'VN Agent',
      'stat_type' : 'UveVirtualNetworkAgent',
      'stat_attr' : 'vn_stats',
      'obj_table' : VN_TABLE,
      'attributes': [
          { 'name' : 'vn_stats.other_vn',  'datatype' : 'string', 'index' : true},
          { 'name' : 'vn_stats.vrouter',   'datatype' : 'string', 'index' : true},
          { 'name' : 'vn_stats.in_tpkts',  'datatype' : 'int',    'index' : false},
          { 'name' : 'vn_stats.in_bytes',  'datatype' : 'int',    'index' : false},
          { 'name' : 'vn_stats.out_tpkts', 'datatype' : 'int',    'index' : false},
          { 'name' : 'vn_stats.out_bytes', 'datatype' : 'int',    'index' : false},
        ]
    },
    {
      'display_name' : 'Database Purge Statistics',
      'stat_type' : 'DatabasePurgeInfo'
      'stat_attr' : 'stats',
      'obj_table' : DATABASE_INFO_TABLE, 
      'attributes': [
          { 'name' : 'stats.purge_id',  'datatype' : 'string', 'index' : true},
          { 'name' : 'stats.request_time', 'datatype' : 'int', 'index' : true},
          { 'name' : 'stats.rows_deleted', 'datatype' : 'int', 'index' : true},
          { 'name' : 'stats.duration',     'datatype' : 'int', 'index' : true},
          { 'name' : 'stats.purge_status', 'datatype' : 'string', 'index' : true},
        ]
    },
    {
      'display_name' : 'Database Usage Statistics',
      'stat_type' : 'DatabaseUsageInfo'
      'stat_attr' : 'database_usage_stats',
      'obj_table' : DATABASE_INFO_TABLE,
      'attributes': [
          { 'name' : 'database_usage_stats.disk_space_used_1k',      'datatype' : 'int', 'index' : false},
          { 'name' : 'database_usage_stats.disk_space_available_1k', 'datatype' : 'int', 'index' : false},
          { 'name' : 'database_usage_stats.analytics_db_size_1k',    'datatype' : 'int', 'index' : false},
        ]
    },
    {
      'display_name' : 'Analytics Protobuf Collector Transmit Socket Statistics',
      'stat_type' : 'ProtobufCollectorStats'
      'stat_attr' : 'tx_socket_stats',
      'obj_table' : COLLECTOR_INFO_TABLE,
      'attributes': [
          { 'name' : 'tx_socket_stats.bytes',                    'datatype' : 'long',   'index' : false},
          { 'name' : 'tx_socket_stats.calls',                    'datatype' : 'long',   'index' : false},
          { 'name' : 'tx_socket_stats.average_bytes',            'datatype' : 'double', 'index' : false},
          { 'name' : 'tx_socket_stats.blocked_duration',         'datatype' : 'string', 'index' : false},
          { 'name' : 'tx_socket_stats.blocked_count',            'datatype' : 'long',   'index' : false},
          { 'name' : 'tx_socket_stats.average_blocked_duration', 'datatype' : 'string', 'index' : false},
          { 'name' : 'tx_socket_stats.errors',                   'datatype' : 'long',   'index' : false},
        ]
    },
    {
      'display_name' : 'Analytics Protobuf Collector Receive Socket Statistics',
      'stat_type' : 'ProtobufCollectorStats'
      'stat_attr' : 'rx_socket_stats',
      'obj_table' : COLLECTOR_INFO_TABLE,
      'attributes': [
          { 'name' : 'rx_socket_stats.bytes',                    'datatype' : 'long',   'index' : false},
          { 'name' : 'rx_socket_stats.calls',                    'datatype' : 'long',   'index' : false},
          { 'name' : 'rx_socket_stats.average_bytes',            'datatype' : 'double', 'index' : false},
          { 'name' : 'rx_socket_stats.blocked_duration',         'datatype' : 'string', 'index' : false},
          { 'name' : 'rx_socket_stats.blocked_count',            'datatype' : 'long',   'index' : false},
          { 'name' : 'rx_socket_stats.average_blocked_duration', 'datatype' : 'string', 'index' : false},
          { 'name' : 'rx_socket_stats.errors',                   'datatype' : 'long',   'index' : false},
        ]
    },
    {
      'display_name' : 'Analytics Protobuf Collector Receive Message Statistics',
      'stat_type' : 'ProtobufCollectorStats'
      'stat_attr' : 'rx_message_stats',
      'obj_table' : COLLECTOR_INFO_TABLE,
      'attributes': [
          { 'name' : 'rx_message_stats.endpoint_name',  'datatype' : 'string', 'index' : true},
          { 'name' : 'rx_message_stats.messages',       'datatype' : 'long',   'index' : false},
          { 'name' : 'rx_message_stats.bytes',          'datatype' : 'long',   'index' : false},
          { 'name' : 'rx_message_stats.errors',         'datatype' : 'long',   'index' : false},
          { 'name' : 'rx_message_stats.last_timestamp', 'datatype' : 'long',   'index' : false},
        ]
    },
    {
      'display_name' : 'Physical Router Linecard Heap Usage',
      'stat_type' : 'PFEHeapInfo'
      'stat_attr' : 'heap_info',
      'obj_table' : 'NONE',
      'attributes': [
          { 'name' : 'heap_info.name',        'datatype' : 'string', 'index' : true},
          { 'name' : 'heap_info.size',        'datatype' : 'long',   'index' : false},
          { 'name' : 'heap_info.allocated',   'datatype' : 'long',   'index' : false},
          { 'name' : 'heap_info.utilization', 'datatype' : 'int',    'index' : false},
        ]
    },
    {
      'display_name' : 'Underlay Flow Information',
      'stat_type' : 'UFlowData'
      'stat_attr' : 'flow',
      'obj_table' : 'NONE',
      'attributes': [
          { 'name' : UFLOW_PROUTER, 'datatype' : 'string', 'index' : true, 'suffixes': [ UFLOW_PIFINDEX ] },
          { 'name' : UFLOW_PIFINDEX, 'datatype' : 'int', 'index' : false },
          { 'name' : UFLOW_SPORT, 'datatype' : 'int', 'index' : false },
          { 'name' : UFLOW_DPORT, 'datatype' : 'int', 'index' : false },
          { 'name' : UFLOW_PROTOCOL, 'datatype' : 'int', 'index' : true, 'suffixes': [ UFLOW_SPORT, UFLOW_DPORT ] },
          { 'name' : UFLOW_SIP, 'datatype' : 'string', 'index' : true },
          { 'name' : UFLOW_DIP, 'datatype' : 'string', 'index' : true },
          { 'name' : UFLOW_VLAN, 'datatype' : 'string', 'index' : true },
          { 'name' : UFLOW_FLOWTYPE, 'datatype' : 'string', 'index' : false },
          { 'name' : UFLOW_OTHERINFO, 'datatype' : 'string', 'index' : false },
        ]
    },
  
]

const list<query_table> _TABLES = [
    {
         'name' : COLLECTOR_GLOBAL_TABLE,
         'schema' : {
             'type' : 'LOG',
             'columns' :  [
               { 'name' : 'MessageTS', 'datatype' : 'int', 'index' : false},
               { 'name' : SOURCE, 'datatype' : 'string', 'index' : true },
               { 'name' : MODULE, 'datatype' : 'string', 'index' : true },
               { 'name' : 'Category', 'datatype' : 'string', 'index' : true },
               { 'name' : 'Level', 'datatype' : 'int', 'index' : true },
               { 'name' : 'Type', 'datatype' : 'int', 'index' : false },
               { 'name' : 'InstanceId', 'datatype' : 'string', 'index' : false },
               { 'name' : 'NodeType', 'datatype' : 'string', 'index' : false },
               { 'name' : 'Messagetype', 'datatype' : 'string', 'index' : true },
               { 'name' : 'SequenceNum', 'datatype' : 'int', 'index' : false },
               { 'name' : 'Context', 'datatype' : 'string', 'index' : false },
               { 'name' : 'Keyword', 'datatype' : 'string', 'index' : true },
               { 'name' : 'Xmlmessage', 'datatype' : 'string', 'index' : false },
               ]
              },
          'columnvalues' : [ MODULE, SOURCE, 'Category', 'Level' ],
    },
    {
         'name' : FLOW_TABLE,
         'schema' : {
             'type' : 'FLOW',
             'columns' :  [
               { 'name' : 'vrouter', 'datatype' : 'string', 'index' : true },
               { 'name' : 'sourcevn', 'datatype' : 'string', 'index' : true },
               { 'name' : 'sourceip', 'datatype' : 'ipv4', 'index' : true },
               { 'name' : 'destvn', 'datatype' : 'string', 'index' : true },
               { 'name' : 'destip', 'datatype' : 'ipv4', 'index' : true },
               { 'name' : 'protocol', 'datatype' : 'int', 'index' : true },
               { 'name' : 'sport', 'datatype' : 'int', 'index' : true },
               { 'name' : 'dport', 'datatype' : 'int', 'index' : true },
               { 'name' : 'direction_ing', 'datatype' : 'int', 'index' : true },
               { 'name' : FLOW_TABLE_UUID, 'datatype' : 'uuid', 'index' : false },
               { 'name' : 'setup_time', 'datatype' : 'long', 'index' : false },
               { 'name' : 'teardown_time', 'datatype' : 'long', 'index' : false },
               { 'name' : FLOW_TABLE_AGG_PKTS, 'datatype' : 'long', 'index' : false },
               { 'name' : FLOW_TABLE_AGG_BYTES, 'datatype' : 'long', 'index' : false },
               { 'name' : 'action', 'datatype' : 'string', 'index' : false },
               { 'name' : 'sg_rule_uuid', 'datatype' : 'uuid', 'index' : false },
               { 'name' : 'nw_ace_uuid', 'datatype' : 'uuid', 'index' : false },
               { 'name' : 'vrouter_ip', 'datatype' : 'string', 'index' : false },
               { 'name' : 'other_vrouter_ip', 'datatype' : 'string', 'index' : false },
               { 'name' : 'underlay_proto', 'datatype' : 'int', 'index' : false },
               { 'name' : 'underlay_source_port', 'datatype' : 'int', 'index' : false },
               ]
         },
         'columnvalues' : [ ],
    },
    {
         'name' : 'FlowSeriesTable',
         'schema' : {
             'type' : 'FLOW',
             'columns' :  [
               { 'name' : 'vrouter', 'datatype' : 'string', 'index' : true },
               { 'name' : 'sourcevn', 'datatype' : 'string', 'index' : true },
               { 'name' : 'sourceip', 'datatype' : 'ipv4', 'index' : true },
               { 'name' : 'destvn', 'datatype' : 'string', 'index' : true },
               { 'name' : 'destip', 'datatype' : 'ipv4', 'index' : true },
               { 'name' : 'protocol', 'datatype' : 'int', 'index' : true },
               { 'name' : 'sport', 'datatype' : 'int', 'index' : true },
               { 'name' : 'dport', 'datatype' : 'int', 'index' : true },
               { 'name' : 'direction_ing', 'datatype' : 'int', 'index' : true },
               { 'name' : 'flow_class_id', 'datatype' : 'int', 'index' : false },
               { 'name' : 'T', 'datatype' : 'int', 'index' : false },
               { 'name' : 'T=', 'datatype' : 'int', 'index' : false },
               { 'name' : 'packets', 'datatype' : 'int', 'index' : false },
               { 'name' : 'bytes', 'datatype' : 'int', 'index' : false },
               { 'name' : 'sum(packets)', 'datatype' : 'int', 'index' : false },
               { 'name' : 'sum(bytes)', 'datatype' : 'int', 'index' : false },
               { 'name' : 'flow_count', 'datatype' : 'int', 'index' : false },
               ]
         },
         'columnvalues' : [ ],
    },
    {
        'name' : OVERLAY_TO_UNDERLAY_FLOW_MAP,
        'schema' : {
            'type' : 'FLOW',
            'columns' : [
              { 'name' : O_SVN, 'datatype' : 'string', 'index' : true, 'select' : false, 'suffixes' : [ O_SIP ] },
              { 'name' : O_SIP, 'datatype' : 'string', 'index' : false, 'select' : false },
              { 'name' : O_DVN, 'datatype' : 'string', 'index' : true, 'select' : false, 'suffixes' : [ O_DIP ] },
              { 'name' : O_DIP, 'datatype' : 'string', 'index' : false, 'select' : false },
              { 'name' : O_SPORT, 'datatype' : 'int', 'index' : false, 'select' : false },
              { 'name' : O_DPORT, 'datatype' : 'int', 'index' : false, 'select' : false },
              { 'name' : O_PROTOCOL, 'datatype' : 'int', 'index' : true, 'select' : false, 'suffixes' : [ O_SPORT, O_DPORT ] },
              { 'name' : O_VROUTER, 'datatype' : 'string', 'index' : true, 'select' : false },
              { 'name' : U_PROUTER, 'datatype' : 'string', 'index' : false },
              { 'name' : U_PIFINDEX, 'datatype' : 'int', 'index' : false },
              { 'name' : U_VLAN, 'datatype' : 'int', 'index' : false },
              { 'name' : U_SIP, 'datatype' : 'string', 'index' : false },
              { 'name' : U_DIP, 'datatype' : 'string', 'index' : false },
              { 'name' : U_SPORT, 'datatype' : 'int', 'index' : false },
              { 'name' : U_DPORT, 'datatype' : 'int', 'index' : false },
              { 'name' : U_PROTOCOL, 'datatype' : 'int', 'index' : false },
              { 'name' : U_FLOWTYPE, 'datatype' : 'string', 'index' : false },
              { 'name' : U_OTHERINFO, 'datatype' : 'string', 'index' : false },
              ]
        },
        'columnvalues' : [ ],
    },
]

// all object tables have the same schema and same query-able columns
// as below
const query_schema_type _OBJECT_TABLE_SCHEMA = 
        {
             'type' : 'OBJECT',
             'columns' :  [
               { 'name' : 'MessageTS', 'datatype' : 'int', 'index' : false },
               { 'name' : 'ObjectId', 'datatype' : 'string', 'index' : true },
               { 'name' : SOURCE, 'datatype' : 'string', 'index' : true },
               { 'name' : MODULE, 'datatype' : 'string', 'index' : true },
               { 'name' : 'Messagetype', 'datatype' : 'string', 'index' : true },
               { 'name' : 'ObjectLog', 'datatype' : 'string', 'index' : false },
               { 'name' : 'SystemLog', 'datatype' : 'string', 'index' : false },
               ]
        }
const list<string> _OBJECT_TABLE_COLUMN_VALUES = [ MODULE, SOURCE, 'Category', 'Level' ]

