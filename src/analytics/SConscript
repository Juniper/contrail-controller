#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

# -*- mode: python; -*-
# analytics directory

import os
import sys
import platform

Import('BuildEnv')
AnalyticsEnv = BuildEnv.Clone()
if sys.platform != 'darwin':
    AnalyticsEnv.CppDisableExceptions()

# get appropriate python lib
import subprocess
output,error = subprocess.Popen(["python","-V"],stdout = subprocess.PIPE, stderr=subprocess.PIPE).communicate()
full_version = error.split()[1].split('.')
python = 'python'+full_version[0]+'.'+full_version[1]

AnalyticsEnv.Append(CPPPATH = ['/usr/include/'+ python,
                               '/usr/include/librdkafka',
                               AnalyticsEnv['TOP'] + '/tools/sandesh/library/common',
                               AnalyticsEnv['TOP'] + '/io',
                               AnalyticsEnv['TOP'] + '/database',
                               AnalyticsEnv['TOP'] + '/database/cassandra/cql',
                               AnalyticsEnv['TOP'],
                              ])
AnalyticsEnv.Append(LIBS=['boost_python', python])

def MapBuildDir(list):
    return map(lambda x: '#/' + Dir('.').path + '/../' + x, list)

AnalyticsEnv.Prepend(LIBS=['cpuinfo',
        'ds',
        'io',
        'sandesh',
        'httpc',
        'http',
        'http_parser',
        'curl',
        'ruleparser',
        'xml',
        'process_info',
        'base',
        'io',
        'z',
	'net',
        'ipfix',
        'misc',
        'sandeshvns',
        'pugixml',
        'hiredis',
        'protobuf',
        'zookeeper_client',
        'zookeeper_mt',
        'boost_filesystem',
        'boost_program_options'])

(PLATFORM, VERSION, EXTRA) = platform.linux_distribution()
if PLATFORM.lower() != 'ubuntu':
    AnalyticsEnv.Prepend(LIBS=['ssl',
        'crypto',
        'sasl2'])

if AnalyticsEnv.UseCassandraCql():
    database_libs = ['cassandra_cql', 'cassandra']
    AnalyticsEnv.AppendUnique(CCFLAGS='-DUSE_CASSANDRA_CQL')
else:
    database_libs = ['cassandra_thrift', 'thrift']

database_libs.append('gendb')
database_libs.append('boost_regex')
AnalyticsEnv.Prepend(LIBS=database_libs)

if sys.platform != 'darwin':
    AnalyticsEnv.Append(LIBS=['rt'])

libs = MapBuildDir(['sandesh',
        'analytics/ruleparser',
        'discovery/client',
        'http/client',
        'xml',
	'database',
        'base',
        'io',
	'net'])
AnalyticsEnv.Append(LIBPATH=libs)

includes = MapBuildDir(['http/client', 'discovery/client', 'analytics'])
AnalyticsEnv.Append(CPPPATH = [
                               includes,
                               AnalyticsEnv['TOP'],
                               AnalyticsEnv['TOP'] + '/base/sandesh/'])


AnalyticsEnv_excep = AnalyticsEnv.Clone()
AnalyticsEnv_excep.CppEnableExceptions()

# Generate the source files
SandeshGenPyFiles  = AnalyticsEnv.SandeshGenPy('viz.sandesh')
SandeshGenPyFiles  += AnalyticsEnv.SandeshGenPy('collector_uve.sandesh')
AnalyticsVizSandeshGenFiles = AnalyticsEnv.SandeshGenOnlyCpp('viz.sandesh')
AnalyticsSandeshGenFiles  = AnalyticsEnv.SandeshGenCpp('collector_uve.sandesh')
AnalyticsSandeshGenFiles += AnalyticsEnv.SandeshGenOnlyCpp('analytics.sandesh')
AnalyticsSandeshGenFiles += AnalyticsEnv.SandeshGenCpp('redis.sandesh')
AnalyticsSandeshGenFiles += AnalyticsEnv.SandeshGenCpp('uflow.sandesh')
AnalyticsSandeshGenFiles += AnalyticsEnv.SandeshGenCpp('sflow.sandesh')
AnalyticsVizSandeshGenSrcs = AnalyticsEnv.ExtractCpp(AnalyticsVizSandeshGenFiles)
AnalyticsSandeshGenSrcs = AnalyticsEnv.ExtractCpp(AnalyticsSandeshGenFiles)
AnalyticsSandeshGenSrcs += AnalyticsVizSandeshGenSrcs

AnalyticsEnv['ANALYTICS_SANDESH_GEN_OBJS'] = AnalyticsEnv.Object(AnalyticsSandeshGenSrcs)
AnalyticsEnv['ANALYTICS_VIZ_SANDESH_GEN_OBJS'] = AnalyticsEnv.Object(AnalyticsVizSandeshGenSrcs)

OpServerProxy_obj = AnalyticsEnv.Object('OpServerProxy.o', 'OpServerProxy.cc')
db_handler_obj = AnalyticsEnv_excep.Object('db_handler.o', 'db_handler.cc')
main_obj = AnalyticsEnv_excep.Object('main.o', 'main.cc')
AnalyticsEnv_excep.Depends(main_obj, 'buildinfo.cc')

lib_cpuinfo = File('../base/libcpuinfo.a')
lib_base = File('../base/libbase.a')
if sys.platform != 'darwin':
    AnalyticsEnv.Prepend(LINKFLAGS =
                         ['-Wl,--whole-archive',
                          '-lbase', '-lcpuinfo',
                          '-l:librdkafka.a', '-l:librdkafka++.a',
                          '-Wl,--no-whole-archive'])
else:
    AnalyticsEnv.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_base.path])
    AnalyticsEnv.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_cpuinfo.path])

def RedisLuaBuild(env, scr_name):
  env.Command('%s_lua.cpp' % scr_name ,'%s.lua' % scr_name,\
                  '(cd %s ; xxd -i %s.lua > ../../../%s/%s_lua.cpp)' %
              (Dir('#controller/src/analytics').path,
               scr_name, Dir('.').path, scr_name))
  env.Depends('redis_processor_vizd.cc','%s_lua.cpp' % scr_name)

AnalyticsEnv_boost_no_unreach = AnalyticsEnv.Clone()
AnalyticsEnv_boost_no_unreach.AppendUnique(CCFLAGS='-DBOOST_NO_UNREACHABLE_RETURN_DETECTION')
syslog_collector_obj = AnalyticsEnv_boost_no_unreach.Object('syslog_collector.o', 'syslog_collector.cc')
parser_util_obj = AnalyticsEnv_boost_no_unreach.Object('parser_util.o', 'parser_util.cc')

vizd_sources = ['viz_collector.cc', 'ruleeng.cc', 'collector.cc',
                'vizd_table_desc.cc', 'viz_message.cc','generator.cc',
                'redis_connection.cc', 'redis_processor_vizd.cc',
                'options.cc', 'stat_walker.cc', 'protobuf_collector.cc',
                'protobuf_server.cc',
                'sflow.cc',
                'sflow_generator.cc', 'sflow_collector.cc',
                'sflow_parser.cc', 'ipfix_collector.cc']

RedisLuaBuild(AnalyticsEnv, 'seqnum')
RedisLuaBuild(AnalyticsEnv, 'delrequest')
RedisLuaBuild(AnalyticsEnv, 'uveupdate')
RedisLuaBuild(AnalyticsEnv, 'uvedelete')
RedisLuaBuild(AnalyticsEnv, 'flushuves')

ProtobufGenFiles = AnalyticsEnv.ProtocGenCpp('protobuf_schema.proto')
ProtobufGenSrcs = AnalyticsEnv.ExtractCpp(ProtobufGenFiles)
ProtobufGenObjs = AnalyticsEnv.Object(ProtobufGenSrcs)
AnalyticsEnv['ANALYTICS_PROTOBUF_GEN_OBJS'] = ProtobufGenObjs

AnalyticsEnv.GenerateBuildInfoCode(
    target=['buildinfo.h', 'buildinfo.cc'],
    source = AnalyticsSandeshGenSrcs + vizd_sources + ProtobufGenSrcs +
    ['OpServerProxy.cc',
     'db_handler.cc',
     parser_util_obj,
     'main.cc'],
    path=str(Dir('.').abspath))

vizd = AnalyticsEnv.Program(target = 'vizd',
        source = AnalyticsSandeshGenSrcs + vizd_sources +
        ProtobufGenObjs +
        [main_obj,
        'buildinfo.cc',
        db_handler_obj,
        OpServerProxy_obj,
        syslog_collector_obj,
        parser_util_obj,
        ])
AnalyticsEnv.Alias('contrail-collector', vizd)
AnalyticsEnv.Default(vizd)

AnalyticsEnv.Requires(OpServerProxy_obj, '#/build/include/rapidjson')
AnalyticsEnv.Requires(vizd, '#/build/include/boost')
AnalyticsEnv.Requires(vizd, '#/build/include/ipfix.h')
AnalyticsEnv.Requires(vizd, '#/build/include/thrift/Thrift.h')

AnalyticsEnv.SConscript('ruleparser/SConscript', exports='AnalyticsEnv', duplicate = 0)
AnalyticsEnv.SConscript('database/SConscript', exports='AnalyticsEnv', duplicate = 0)

test_suite = AnalyticsEnv.SConscript('test/SConscript', exports='AnalyticsEnv', duplicate = 0)

def code_coverage(target, source, env):
    import shutil
    shutil.rmtree(target[0].path, ignore_errors = True)

    # lcov --base-directory $ROOT -- directory . --zerocounters -q
    import os
    rundir = os.path.dirname(target[0].path)
    os.system('lcov --base-directory . --directory ' + rundir +
              ' --zerocounters -q')
    # execute tests
    import subprocess
    ShEnv = {env['ENV_SHLIB_PATH']: 'build/lib'}

    for test in test_suite:
        cmd = test[0].path
        logfile = open(cmd + '.log', 'w')
        print "Executing for coverage... " + cmd
        subprocess.call([cmd], stdout=logfile, env=ShEnv)

    # lcov --base-directory $ROOT -- directory . -c -o analytics_test.info
    os.system('lcov --base-directory . --directory ' + rundir +
              ' -c -o analytics_test.info')

    # genhtml -o analytics/test_coverage analytics_test.info
    os.system('genhtml -o ' + target[0].path +
              ' -t "test coverage" --num-spaces 4 analytics_test.info')


if AnalyticsEnv.get('OPT') == 'coverage':
    test_coverage = AnalyticsEnv.Command(Dir('test_coverage'), '', code_coverage)
    AnalyticsEnv.AlwaysBuild(test_coverage)
    AnalyticsEnv.Alias('src/analytics:test_coverage', test_coverage)
    for test in test_suite:
        AnalyticsEnv.Depends(test_coverage, test)

# Documentation
CollectorDocFiles = []
CollectorDocFiles += AnalyticsEnv['BASE_DOC_FILES']
CollectorDocFiles += AnalyticsEnv['IO_DOC_FILES']
CollectorDocFiles += AnalyticsEnv['SANDESH_DOC_FILES']
CollectorDocFiles += AnalyticsEnv['DISCOVERY_CLIENT_DOC_FILES']
CollectorDocFiles += AnalyticsEnv['ANALYTICS_DOC_FILES']
CollectorDocFiles += AnalyticsEnv.SandeshGenDoc('collector_uve.sandesh')
CollectorDocFiles += AnalyticsEnv.SandeshGenDoc('uflow.sandesh')
CollectorDocFiles += AnalyticsEnv.SandeshGenDoc('sflow.sandesh')

# Please update sandesh/common/vns.sandesh on process name change
AnalyticsEnv.Alias('install', AnalyticsEnv.InstallAs(
            AnalyticsEnv['INSTALL_BIN'] + '/contrail-collector', vizd))
AnalyticsEnv.Alias('install', AnalyticsEnv.Install(
            AnalyticsEnv['INSTALL_CONF'], 'contrail-collector.conf'))
AnalyticsEnv.Alias('install', AnalyticsEnv.InstallAs(
            AnalyticsEnv['INSTALL_INITD'] + '/contrail-collector',
            'contrail-collector.initd.supervisord'))
AnalyticsEnv.Alias('install', AnalyticsEnv.Install(
            AnalyticsEnv['INSTALL_CONF'], 'supervisord_analytics.conf'))
AnalyticsEnv.Alias('install', AnalyticsEnv.Install(
            AnalyticsEnv['INSTALL_CONF'] + 
            '/supervisord_analytics_files', 'contrail-analytics.rules'))
AnalyticsEnv.Alias('install', AnalyticsEnv.Install(
            AnalyticsEnv['INSTALL_CONF'] + 
            '/supervisord_analytics_files', 'contrail-collector.ini'))
AnalyticsEnv.Alias('install', AnalyticsEnv.Install(
            AnalyticsEnv['INSTALL_MESSAGE_DOC'] + '/contrail-collector/', CollectorDocFiles))

AnalyticsEnv.SConscript(dirs=['contrail-snmp-collector'],
        exports='AnalyticsEnv',
        variant_dir=BuildEnv['TOP'] + '/contrail-snmp-collector',
        duplicate=1)

AnalyticsEnv.SConscript(dirs=['contrail-topology'],
        exports='AnalyticsEnv',
        variant_dir=BuildEnv['TOP'] + '/contrail-topology',
        duplicate=1)
#
# Not yet
#AnalyticsEnv.SConscript(dirs=['contrail-broadview'],
#       exports='AnalyticsEnv',
#       variant_dir=BuildEnv['TOP'] + '/contrail-broadview',
#       duplicate=1)
