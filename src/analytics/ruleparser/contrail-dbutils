#! /usr/bin/env /usr/bin/python
#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

#
# tabledump.py
# to show cassandra tables created by analytics
#

import readline # optional, will allow Up/Down/History in the console
import code
import random
import uuid
import time
import datetime
from datetime import timedelta
import socket
import os
import sys

import pycassa
from pycassa.columnfamily import ColumnFamily
from pycassa.types import *
from pycassa import *
import argparse
import subprocess
from subprocess import Popen, PIPE
from collections import OrderedDict

parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group()
parser.add_argument("--cassandra_server_ip", "-s",
                    default = '127.0.0.1',
                    help = "cassandra server ip")
parser.add_argument("--cassandra_server_port", "-p",
                    type = int,
                    default = 9160,
                    help = "cassandra server port")
group.add_argument("--utc", "-u",
                    default = None,
                    help = "print current utctimestamp")
group.add_argument("--show_cf", help = "Show records of a column family",
                    metavar='COLUMNFAMILY', default = None)
group.add_argument("--list_cf", help = "List all the column families",
                    action="store_true")
group.add_argument("--interactive", "-i", help = "Launch the interactive mode",
                    action="store_true")
group.add_argument("--upgrade", metavar = "OLD_VERSION", help = "Upgrades the version")
args = parser.parse_args()

#class for bounded python dictionary. Itemsremoved in FIFO
class LimitedSizeDict(OrderedDict):
  def __init__(self, *args, **kwds):
    self.size_limit = kwds.pop("size_limit", None)
    OrderedDict.__init__(self, *args, **kwds)
    self._check_size_limit()

  def __setitem__(self, key, value):
    OrderedDict.__setitem__(self, key, value)
    self._check_size_limit()

  def _check_size_limit(self):
    if self.size_limit is not None:
      while len(self) > self.size_limit:
        self.popitem(last=False)

def upgrade_from_1_0_3():
    print "About to upgrade.."
    uuid_flow_dict = LimitedSizeDict(size_limit=100000)
    try:
        cf_index = pycassa.ColumnFamily(pool,'FlowTableSvnSip')
        svnsip_ver2 = pycassa.ColumnFamily(pool, 'FlowTableSvnSipVer2')
        rows = cf_index.get_range()
        for row in rows:
            row_key = row[0]
            #Look up the old index table based on row_key and insert into the
            #new index table
            #Upgrade the remaining the flow index table row by row
            upgrade_cf('FlowTableSvnSip', 'FlowTableSvnSipVer2', uuid_flow_dict,
                   row_key)
            upgrade_cf('FlowTableDvnDip', 'FlowTableDvnDipVer2', uuid_flow_dict,
                   row_key)
            upgrade_cf('FlowTableProtDp','FlowTableProtDpVer2', uuid_flow_dict,
                   row_key)
            upgrade_cf('FlowTableProtSp','FlowTableProtSpVer2', uuid_flow_dict,
                   row_key)
            upgrade_cf('FlowTableVRouter', 'FlowTableVRouterVer2', uuid_flow_dict,
                   row_key)
    except:
        print "Unexpected error:", sys.exc_info()[0]
    #Truncate all the old Cf
    truncate_cf('FlowTableSvnSip')
    truncate_cf('FlowTableDvnDip')
    truncate_cf('FlowTableProtDp')
    truncate_cf('FlowTableProtSp')
    truncate_cf('FlowTableVRouter')
    truncate_cf('FlowTableAllFields')

def truncate_cf(cf_name):
    cf = pycassa.ColumnFamily(pool,cf_name)
    cf.truncate()

def upgrade_cf(old_index, new_index, uuid_flow_dict, row_key):
    old_index_cf = pycassa.ColumnFamily(pool, old_index)
    new_index_cf = pycassa.ColumnFamily(pool, new_index)
    flow_index = pycassa.ColumnFamily(pool, 'FlowRecordTable')
    column_vals = OrderedDict()
    row = old_index_cf.get(key=(row_key), include_ttl = True, include_timestamp = True)
    for columns in row.iteritems():
        uuid_val = columns[1][0][3]
        flow_val = uuid_flow_dict.get(uuid_val)
        if (flow_val == None):
           #Get value from the Flow index table
           flow_entry = flow_index.get(uuid_val)
           flow_val = flow_entry['vrouter'],flow_entry['sourcevn'],flow_entry['destvn'],flow_entry['sourceip'],flow_entry['destip'],flow_entry['protocol'],flow_entry['sport'],flow_entry['dport'],""
           uuid_flow_dict[uuid_val]=flow_val
        col_name = columns[0]+(uuid_val,)
        col_value = columns[1][0]+flow_val
        column_vals[col_name]=col_value
        ttl_val = columns[1][2]
        time_stamp = columns[1][1]/1000000
    row_key = row_key+(0,)
    new_ttl = ttl_val - (time.time()-time_stamp)
    new_index_cf.insert(row_key, column_vals, ttl = new_ttl)

def UTCTimestampUsec():
    epoch = datetime.datetime.utcfromtimestamp(0)
    now = datetime.datetime.utcnow()
    delta = now-epoch
    return ((delta.days*24*3600*1000000+delta.seconds*1000000+delta.microseconds))

def convert_to_time_delta(time_str):
    num = int(time_str[:-1])
    if time_str.endswith('s'):
        return datetime.timedelta(seconds=num)
    elif time_str.endswith('m'):
        return datetime.timedelta(minutes=num)
    elif time_str.endswith('h'):
        return datetime.timedelta(hours=num)
    elif time_str.endswith('d'):
        return datetime.timedelta(days=num)

if args.utc != None:
    # Try now-+ format       
    time_str = args.utc
    if time_str == 'now':
        print UTCTimestampUsec()
    else:
        # Handle now-/+1h format
        if time_str.startswith('now'):
            td = convert_to_time_delta(time_str[len('now'):])
        else:
            # Handle -/+1h format
            td = convert_to_time_delta(time_str)
        
        utc_tstamp_usec = UTCTimestampUsec()
        print utc_tstamp_usec + ((td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6))

    quit()

server_and_port = args.cassandra_server_ip+':'+str(args.cassandra_server_port)
pool = pycassa.ConnectionPool('ContrailAnalytics', server_list=[server_and_port])
sysm = pycassa.system_manager.SystemManager(server_and_port)
#List containing increasing versions
version_list = ["1.03","1.04","1.05","1.1"]
#dictionary mapping old_version to upgrade_function
ver_function = {"1.03":upgrade_from_1_0_3}
                #"1.04":upgrade_from_1_0_4,
                #"1.05":upgrade_from_1_0_5,
              # }

def list_cf(keyspace = 'ContrailAnalytics'):
    dict = sysm.get_keyspace_column_families(keyspace)
    print dict.keys()



from datetime import datetime
def parse_time(s):
    try:
        ret = datetime.strptime(s, "%Y-%m-%d %H:%M:%S %Z")
    except ValueError:
        try:
            ret = datetime.strptime(s, "%Y-%m-%d %H:%M:%S")
        except ValueError:
            try:
                ret = datetime.strptime(s, "%Y-%m-%d")
            except ValueError:
                ret = datetime.utcfromtimestamp(float(s))
    return ret

def show_cf(name='MessageTable', key=None, row_count=100, detail=0):
    if (name == 'FlowTable'):
        show_ft(key, row_count, detail)
        return

    cf = pycassa.ColumnFamily(pool, name)
    if (key == None):
        cf_get = cf.get_range(row_count=row_count)
        l_result = list(cf_get)

        for l in l_result:
            print l
    else:
        l_result = cf.get(key)
        print l_result

    print 'max row_count - %d, num elements = %d' %(row_count, len(l_result))

def get_substring(str):
    l = len(str)
    if l < 10:
     return str
    return str[0:5]+'..'+str[l-5:l]

def show_ft(key = None, row_count = 100, detail=0):
    from prettytable import PrettyTable

    c_ft = pycassa.ColumnFamily(pool, 'FlowTable')
    l_ft = list(c_ft.get_range(row_count = row_count))
    sl_ft=sorted(l_ft, key=lambda le: le[1].get('setup_time', 0))
    x = PrettyTable(['setup_time', 'flow_id', 'sourcevn', 'sourceip', 'destvn', 'destip', 'dir', 'prot', 'sprt', 'dprt'])
    for l in sl_ft:
        setuptime = l[1].get('setup_time', None)
        if not setuptime:
            continue
        if (setuptime > 135300693300):
            setuptime = setuptime / 1000000
        try:
            message_dt = datetime.datetime.fromtimestamp(setuptime)
        except:
            import pdb;pdb.set_trace()
        message_ts = message_dt.strftime('%Y-%m-%d %H:%M:%S')
        x.add_row([message_ts,
            str(l[0]) if detail else get_substring(str(l[0])),
            l[1]['sourcevn'] if detail else get_substring(l[1]['sourcevn']),
            socket.inet_ntoa(hex(l[1]['sourceip'] & 0xffffffff)[2:].zfill(8).decode('hex')),
            l[1]['destvn'] if detail else get_substring(l[1]['destvn']),
            socket.inet_ntoa(hex(l[1]['destip'] & 0xffffffff)[2:].zfill(8).decode('hex')),
            'ing' if l[1]['direction_ing']==1 else 'egr',
            l[1]['protocol'],
            l[1]['sport'],
            l[1]['dport']])
    print x
    print 'max row_count - %d, num elements = %d' %(row_count, len(l_ft))

if args.show_cf != None:
    show_cf(args.show_cf)
    quit()

if args.list_cf:
    list_cf()
    quit()

if args.upgrade:
    #Iterate from the old ver to current version and call
    # all the upgrade functions in order
    command = "contrail-version | grep 'contrail-analytics-venv '|"
    current_ver = (os.popen(command + " awk '{print $2}'").read()).split("-",1)[0]
    if (args.upgrade != None):
        old_ver = args.upgrade
        print "Old version %s" % old_ver
    try:
        start_index = version_list.index(old_ver)
        end_index = version_list.index(current_ver)
    except:
        print "Specified index not found in version list"
        quit()
    for index in version_list[start_index:end_index]:
        #Call the upgrade function
        ver_function[index]()
    quit()

if not(args.interactive): #done processing all the other options
    quit()

# start interactive mode
vars = globals().copy()
vars.update(locals())
shell = code.InteractiveConsole(vars)
shell.interact()
