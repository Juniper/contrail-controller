/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

/**
 *  Definitions of structures added by collector related to data received from
 *  the sandesh generators
 */

include "io/io.sandesh"
include "sandesh/library/common/sandesh_uve.sandesh"
include "database/gendb.sandesh"
include "database/cassandra/cql/cql.sandesh"
include "sandesh/library/common/derived_stats_results.sandesh"

/**
 * structure to store sandesh stats on a per message type
 */
struct SandeshStats {
    1: string                              message_type
    2: i64                                 messages
    3: i64                                 bytes
    4: u64                                 last_msg_timestamp
}

/**
 * structure to store sandesh stats on a per level
 */
struct SandeshLogLevelStats {
    1: string     level 
    2: u64        messages
    3: u64        bytes
    4: u64        last_msg_timestamp
}

/**
 * structure to store list of sandesh stats
 */
struct SandeshStatsInfo {
    1: string                          hostname
    2: list<SandeshStats>              msgtype_stats
    3: list<SandeshLogLevelStats>      log_level_stats 
}

/**
 * structure to store generator's connection info
 */
struct GeneratorInfoAttr {
    1: u32                                 connects
    5: u64                                 connect_time
    2: u32                                 resets
    6: u64                                 reset_time
    4: bool                                in_clear
}

struct GeneratorInfo {
    1: string                              hostname
    3: GeneratorInfoAttr                   gen_attr
}

/**
 * This structure send statistics data related to Database
 * additions on a per generator basis
 */
struct ModuleServerState {
    1: string                              name (key="ObjectGeneratorInfo")
    2: optional bool                       deleted
    3: optional list<SandeshStatsInfo>     msg_stats (aggtype="union")
    4: optional list<GeneratorInfo>        generator_info (aggtype="union")
    5: optional u64                        sm_queue_count
    6: optional sandesh_uve.SandeshStateMachineStats sm_stats
    7: optional u64                        db_queue_count
    8: optional u64                        db_enqueues
    9: optional sandesh_uve.SandeshSessionStats session_stats
    10: optional io.SocketIOStats          session_rx_socket_stats
    11: optional io.SocketIOStats          session_tx_socket_stats
    12: optional sandesh_uve.SandeshGeneratorBasicStats  sm_msg_stats
    13: optional string                    db_drop_level
    14: optional list<SandeshStats>        db_dropped_msg_stats
    15: optional string                    sm_drop_level
}

/**
 * @description: UVE to send generator statistics
 * @object: generator
 */
uve sandesh SandeshModuleServerTrace {
    1: ModuleServerState                   data
}

struct SessionTableDbInfo {
    1: double                               writes_per_message;
    2: u64                                  num_messages;
    3: double                               sessions_per_db_record;
    4: double                               json_size_per_write;
}

/**
 * structure to store generator summary
 */
struct GeneratorSummaryInfo {
    1: string                              source
    2: string                              module_id    
    3: string                              state
    4: string                              instance_id
    5: string                              node_type
    6: u64                                 sm_queue_count
    7: optional u64                        db_queue_count
    8: optional string                     db_drop_level
    9: optional bool                       sm_defer
    10: optional i32                       sm_defer_time_msec
    11: optional u64                       max_sm_queue_count
}

/**
 * structure to store collector errors
 */
struct CollectorStats {
    1: u64                                 no_session_error
    2: u64                                 no_generator_error
    3: u64                                 redis_error
    4: u64                                 session_mismatch_error
    5: u64                                 sandesh_type_mismatch_error
}

struct CollectorDbStats {
    1: string                                  name (key="ObjectCollectorInfo")
   99: optional bool                           deleted
    2: optional map<string, gendb.DbTableStat> table_info (tags=".__key", metric="diff")
    3: optional gendb.DbErrors                 errors (tags="")
    4: optional map<string, gendb.DbTableStat> stats_info (tags=".__key", metric="diff")
    5: optional cql.DbStats                    cql_stats (tags="")
    6: optional SessionTableDbInfo             session_table_stats (tags="")

   10: optional map<string, gendb.DbTableStat_P_>
         table_info_1h   (mstats="60-table_info:DSSum:", hidden="yes") 
   11: optional map<string, gendb.DbTableStat_P_>
         table_info_10m  (mstats="10-table_info:DSSum:")
   12: optional map<string, derived_stats_results.AnomalyResult>
         table_writes_anomaly (mstats="0-table_info.writes:DSAnomaly:EWM:0.2")

   20: optional map<string, gendb.DbTableStat_P_>
           stats_info_1h (mstats="60-stats_info:DSSum:", hidden="yes")
   21: optional map<string, gendb.DbTableStat_P_>
         stats_info_10m  (mstats="10-stats_info:DSSum:")
   22: optional map<string, derived_stats_results.AnomalyResult>
         stats_writes_anomaly (mstats="0-stats_info.writes:DSAnomaly:EWM:0.2")

} (period="60")

/**
 * @description: Statistics for database operations in contrail-collector
 * @object: analytics-node
 */
uve sandesh CollectorDbStatsTrace {
    1: CollectorDbStats data
}

/**
 * @description: This structure used to send statistics data related to Protobuf
 * Receiver in the contrail-collector
 * @object: analytics-node
 */
objectlog sandesh ProtobufCollectorStats {
    1: string                                       name (key="ObjectCollectorInfo")
    /** @display_name:Analytics Protobuf Collector Receive Socket Statistics*/
    2: optional list<io.SocketIOStats>              rx_socket_stats (tags="")
    /** @display_name:Analytics Protobuf Collector Transmit Socket Statistics*/
    3: optional list<io.SocketIOStats>              tx_socket_stats (tags="")
    /** @display_name:Analytics Protobuf Collector Receive Message Statistics*/
    4: optional list<io.SocketEndpointMessageStats> rx_message_stats (tags=".endpoint_name,.message_name")
    /** @display_name:Analytics Protobuf Collector Database Table*/
    5: optional list<gendb.DbTableInfo>             db_table_info (tags=".table_name")
    /** @display_name:Analytics Protobuf Collector Database Errors*/
    6: optional list<gendb.DbErrors>                db_errors (tags="")
    /** @display_name:Analytics Protobuf Collector Statistics Database Table*/
    7: optional list<gendb.DbTableInfo>             db_statistics_table_info (tags=".table_name")
    8: optional u64                                 db_queue_count
    9: optional u64                                 db_enqueues
}

/**
 * @description: sandesh request to get collector info through introspect
 * @cli_name: read collector server
 */
request sandesh ShowCollectorServerReq {
}

/**
 * @description: sandesh response to provide collector info through introspect
 */
response sandesh ShowCollectorServerResp {
    1: io.SocketIOStats                    rx_socket_stats
    2: io.SocketIOStats                    tx_socket_stats
    3: u64                                 num_generators
    4: list<GeneratorSummaryInfo>          generators
    5: CollectorStats                      stats
    6: optional cql.Metrics                cql_metrics
    7: optional list<gendb.DbTableInfo>    table_info
    8: optional gendb.DbErrors             errors
    9: optional list<gendb.DbTableInfo>    statistics_table_info
}

// This struct is part of the CollectorInfo UVE. (key is hostname on which this
// instance of Vizd is running)
// This part of the UVE externally refers to all generator attached to this instance
// of Vizd.
//
// - Vizd will update the generator_infos attribute periodically
//
/**
 * structure to carry generator info and other info that collector sends
 */
struct CollectorState {
    1: string                              name (key="ObjectCollectorInfo")
    2: optional bool                       deleted
    4: optional list<GeneratorSummaryInfo> generator_infos
    5: optional string                     build_info
    6: optional list<string>               self_ip_list
    7: optional list<string>               core_files_list
    8: optional io.SocketIOStats           rx_socket_stats
    9: optional io.SocketIOStats           tx_socket_stats
}

/**
 * @description: UVE to send generator info and other info from collector
 * @object: analytics-node
 */
uve sandesh CollectorInfo {
    1: CollectorState                      data
}


trace sandesh publish_uve_update {
    1: string source
    2: string mdule
    3: string type
    4: string key
    5: string attr
    6: bool success
    7: string node_type
    8: string instance_id
}

trace sandesh publish_uve_delete {
    1: string source
    2: string mdule
    3: string type
    4: string key
    5: u32 seq
    6: bool success
    7: string node_type
    8: string instance_id
}

trace sandesh generator_getseq {
    1: string source
    2: string mdule
    3: bool success
}
trace sandesh generator_deluves {
    1: string source
    2: string mdule
    3: bool success    
}

/**
 * @description: sandesh request to set Database Queue params
 * @cli_name: create database queue parameters
 */
request sandesh DbQueueParamsSet {
    /** for high watermark or low watermark */
    1: optional bool high;
    /** queue count for this level */
    2: optional u32 queue_count;
    /** highest message level for this watermark */
    3: optional string drop_level;
}    

/**
 * @description: sandesh request to reset Database Queue params
 * @cli_name: update database queue parameters
 */
request sandesh DbQueueParamsReset {
}

/**
 * @description: sandesh request to get Database Queue params
 * @cli_name: read database queue parameters
 */
request sandesh DbQueueParamsStatus {
}

/**
 * @description: sandesh request to set State Machine Queue params
 * @cli_name: create state machine queue parameters
 */
request sandesh SmQueueParamsSet {
    /** for high watermark or low watermark */
    1: optional bool high;
    /** queue count for this level */
    2: optional u32 queue_count;
    /** highest message level for this watermark */
    3: optional string drop_level;
}    

/**
 * @description: sandesh request to reset State Machine Queue params
 * @cli_name: update state machine queue params
 */
request sandesh SmQueueParamsReset {
}

/**
 * @description: sandesh request to get State Machine Queue params
 * @cli_name: read state machine queue parameters
 */
request sandesh SmQueueParamsStatus {
}

struct QueueParams {
    1: bool high;
    2: u32 queue_count;
    3: string drop_level;
}

/**
 * @description: sandesh response to return State Machine Queue params
 */
response sandesh QueueParamsResponse {
    1: list<QueueParams> info;
}

/**
 * structure to carry statistics data for sandesh messages on a
 * per generator basis
 */
struct SandeshMessageInfo {
     1: string type
     2: string level
     3: u64    messages
     4: u64    bytes
}

/**
 * @description: objectlog structure to send statistics data for sandesh
 * messages on a per generator basis
 * @object: generator
 */
objectlog sandesh SandeshMessageStat {
    1: string                            name (key="ObjectGeneratorInfo")
    /** @display_name:Collector Message Stats*/
    2: optional list<SandeshMessageInfo> msg_info (tags=".type,.level")
}

/**
 * @description: sandesh request to get State Machine Queue params
 * @cli_name: update flow collection
 */
request sandesh DisableFlowCollectionRequest {
    /** To enable or disable the flow collection */
    1: optional bool disable
}

/**
 * @description: sandesh request to get State Machine Queue params
 * @cli_name: read flow collection
 */
request sandesh FlowCollectionStatusRequest {
}

response sandesh FlowCollectionStatusResponse {
    1: bool disable
}

response sandesh CollectorError {
    1: string error
}

/**
 * @description: sandesh request to configure database writes
 * @cli_name: update database write disable parameters
 */
request sandesh DisableDatabaseWritesRequest {
    /** whether to disable all writes */
    1: optional bool disable_all
    /** whether to disable statistics only */
    2: optional bool disable_statistics
    /** whether to disable messages only */
    3: optional bool disable_messages
    /** whether to disable flows only */
    4: optional bool disable_flows
}

/**
 * @description: sandesh request to get database writes
 * @cli_name: read database write disable parameters
 */
request sandesh DatabaseWritesStatusRequest {
}

response sandesh DatabaseWritesStatusResponse {
    1: bool disable_all
    2: bool disable_statistics
    3: bool disable_messages
    4: bool disable_flows
}


/*
 * UVE definition for application tracking from structured syslog messages.
*/

struct AppMetrics{
      1: optional u64                     session_duration
      2: optional u64                     session_count
      3: optional u64                      total_bytes
}

struct AppMetrics_P_{
      1: optional AppMetrics value (tags="")
      2: optional AppMetrics staging
}

/*  UVE key -> TENANT::SITE::DEVICE_ID
*   Three maps:
*     1. app_metrics_sla
*        If app-group is unknown, map key => NESTED-APP(APP/CATEGORY)::DEPARTMENT::SLA_PROFILE
*         Else, key is => APP-GROUP(NESTED-APP:APP/APP-CATEGORY)::DEPARTMENT::SLA_PROFILE
*     2. app_metrics_link
*        If app-group is unknown, map key => NESTED-APP(APP/APP-CATEGORY)::DEPARTMENT::LINK
*         Else, key is => APP-GROUP(NESTED-APP:APP/APP-CATEGORY)::DEPARTMENT::LINK
*     3. app_metrics_user
*        If app-group is unknown, map key => NESTED-APP(APP/APP-CATEGORY)::DEPARTMENT::USER
*         Else, key is => APP-GROUP(NESTED-APP:APP/APP-CATEGORY)::DEPARTMENT::USER
*/

struct AppTrackRecord{
    1: string                           name (key="ObjectCPETable")
    2: optional bool                    deleted

    /* app_metrics_sla  */
    3: optional map<string, AppMetrics>      app_metrics_sla (hidden="yes",metric="diff")
    4: optional map<string, AppMetrics_P_>   sum_app_metrics_sla_3m (mstats="1-app_metrics_sla:DSSum:",tags=".__key")
    5: optional map<string, AppMetrics_P_>   sum_app_metrics_sla_1h (mstats="20-app_metrics_sla:DSSum:",tags=".__key")
    6: optional map<string, AppMetrics_P_>   sum_app_metrics_sla_8h (mstats="160-app_metrics_sla:DSSum:",tags=".__key")
    7: optional map<string, AppMetrics_P_>   sum_app_metrics_sla_1d (mstats="480-app_metrics_sla:DSSum:",tags=".__key")
    8: optional map<string, AppMetrics_P_>   sum_app_metrics_sla_7d (mstats="3360-app_metrics_sla:DSSum:",tags=".__key")
    9: optional map<string, AppMetrics_P_>   sum_app_metrics_sla_30d (mstats="14400-app_metrics_sla:DSSum:",tags=".__key")
    10: optional map<string, AppMetrics_P_>  avg_app_metrics_sla_3m (mstats="1-app_metrics_sla:DSAvg:",tags=".__key")
    11: optional map<string, AppMetrics_P_>  avg_app_metrics_sla_1h (mstats="20-app_metrics_sla:DSAvg:",tags=".__key")
    12: optional map<string, AppMetrics_P_>  avg_app_metrics_sla_8h (mstats="160-app_metrics_sla:DSAvg:",tags=".__key")
    13: optional map<string, AppMetrics_P_>  avg_app_metrics_sla_1d (mstats="480-app_metrics_sla:DSAvg:",tags=".__key")
    14: optional map<string, AppMetrics_P_>  avg_app_metrics_sla_7d (mstats="3360-app_metrics_sla:DSAvg:",tags=".__key")
    15: optional map<string, AppMetrics_P_>  avg_app_metrics_sla_30d (mstats="14400-app_metrics_sla:DSAvg:",tags=".__key")

    /* app_metrics_link */
    16: optional map<string, AppMetrics>     app_metrics_link (hidden="yes",metric="diff")
    17: optional map<string, AppMetrics_P_>  sum_app_metrics_link_3m (mstats="1-app_metrics_link:DSSum:",tags=".__key")
    18: optional map<string, AppMetrics_P_>  sum_app_metrics_link_1h (mstats="20-app_metrics_link:DSSum:",tags=".__key")
    19: optional map<string, AppMetrics_P_>  sum_app_metrics_link_8h (mstats="160-app_metrics_link:DSSum:",tags=".__key")
    20: optional map<string, AppMetrics_P_>  sum_app_metrics_link_1d (mstats="480-app_metrics_link:DSSum:",tags=".__key")
    21: optional map<string, AppMetrics_P_>  sum_app_metrics_link_7d (mstats="3360-app_metrics_link:DSSum:",tags=".__key")
    22: optional map<string, AppMetrics_P_>  sum_app_metrics_link_30d (mstats="14400-app_metrics_link:DSSum:",tags=".__key")
    23: optional map<string, AppMetrics_P_>  avg_app_metrics_link_3m (mstats="1-app_metrics_link:DSAvg:",tags=".__key")
    24: optional map<string, AppMetrics_P_>  avg_app_metrics_link_1h (mstats="20-app_metrics_link:DSAvg:",tags=".__key")
    25: optional map<string, AppMetrics_P_>  avg_app_metrics_link_8h (mstats="160-app_metrics_link:DSAvg:",tags=".__key")
    26: optional map<string, AppMetrics_P_>  avg_app_metrics_link_1d (mstats="480-app_metrics_link:DSAvg:",tags=".__key")
    27: optional map<string, AppMetrics_P_>  avg_app_metrics_link_7d (mstats="3360-app_metrics_link:DSAvg:",tags=".__key")
    28: optional map<string, AppMetrics_P_>  avg_app_metrics_link_30d (mstats="14400-app_metrics_link:DSAvg:",tags=".__key")

    /* app_metrics_user */
    29: optional map<string, AppMetrics>     app_metrics_user (hidden="yes",metric="diff")
    30: optional map<string, AppMetrics_P_>  sum_app_metrics_user_3m (mstats="1-app_metrics_user:DSSum:",tags=".__key")
    31: optional map<string, AppMetrics_P_>  sum_app_metrics_user_1h (mstats="20-app_metrics_user:DSSum:",tags=".__key")
    32: optional map<string, AppMetrics_P_>  sum_app_metrics_user_8h (mstats="160-app_metrics_user:DSSum:",tags=".__key")
    33: optional map<string, AppMetrics_P_>  sum_app_metrics_user_1d (mstats="480-app_metrics_user:DSSum:",tags=".__key")
    34: optional map<string, AppMetrics_P_>  sum_app_metrics_user_7d (mstats="3360-app_metrics_user:DSSum:",tags=".__key")
    35: optional map<string, AppMetrics_P_>  sum_app_metrics_user_30d (mstats="14400-app_metrics_user:DSSum:",tags=".__key")
    36: optional map<string, AppMetrics_P_>  avg_app_metrics_user_3m (mstats="1-app_metrics_user:DSAvg:",tags=".__key")
    37: optional map<string, AppMetrics_P_>  avg_app_metrics_user_1h (mstats="20-app_metrics_user:DSAvg:",tags=".__key")
    38: optional map<string, AppMetrics_P_>  avg_app_metrics_user_8h (mstats="160-app_metrics_user:DSAvg:",tags=".__key")
    39: optional map<string, AppMetrics_P_>  avg_app_metrics_user_1d (mstats="480-app_metrics_user:DSAvg:",tags=".__key")
    40: optional map<string, AppMetrics_P_>  avg_app_metrics_user_7d (mstats="3360-app_metrics_user:DSAvg:",tags=".__key")
    41: optional map<string, AppMetrics_P_>  avg_app_metrics_user_30d (mstats="14400-app_metrics_user:DSAvg:",tags=".__key")
}(period="180")

uve sandesh AppTrack {
     1: AppTrackRecord              data;
}
