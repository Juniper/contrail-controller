/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

import "analytics/jti-protos/telemetry_top.proto";

extend JuniperNetworksSensors {
    optional TestMessage tm_simple = 1;
}

extend JuniperNetworksSensors {
    optional TestMessageBase tm_base = 2;
}

extend JuniperNetworksSensors {
    optional TestMessageBaseStream tm_base_stream = 3;
}

extend JuniperNetworksSensors {
    optional TestMessageAllTypes tm_all_types = 4;
}

extend JuniperNetworksSensors {
    optional TestMessageSize tm_size = 5;
}

message TestMessageInner {
    required string tm_inner_name = 1 [(telemetry_options).is_key = true];
    optional int32 tm_inner_status = 2;
    optional int32 tm_inner_counter = 3;
    optional TestMessage.TestMessageEnum tm_inner_enum = 4 [(telemetry_options).is_key = true];
}

message TestMessage {
    required string tm_name = 1 [(telemetry_options).is_key = true];
    optional string tm_status = 2 [(telemetry_options).is_key = true];
    optional int32 tm_counter = 3 [(telemetry_options).is_key = true];
    repeated TestMessageInner tm_inner = 4;
    enum TestMessageEnum {
        GOOD = 1;
        BAD = 2;
    }
    optional TestMessageEnum tm_enum = 5 [(telemetry_options).is_key = true];
}

message TestMessageSize {
    required bytes tms_data = 1;
}

message TestMessageBase {
    required string tmb_name = 1 [(telemetry_options).is_key = true];
    optional string tmb_status = 2 [(telemetry_options).is_key = true];
    optional int32 tmb_counter = 3 [(telemetry_options).is_key = true];
    enum TestMessageEnum {
        GOOD = 1;
        BAD = 2;
    }
    optional TestMessageEnum tmb_enum = 4 [(telemetry_options).is_key = true];
    extensions 10 to max;
}

message TestMessageContrailSensors {
    extensions 1 to max;
}

message TestMessageBaseSensors {
    optional TestMessageContrailSensors tmbs_sensor = 2636;
    extensions 1 to 2635;
    extensions 2637 to max;
}

message TestMessageBaseStream {
    required string tmbs_name = 1 [(telemetry_options).is_key = true];
    optional TestMessageBaseSensors tmbs_sensor = 101;
}

message TestMessageAllTypesInner {
    optional string tmp_inner_string = 1 [(telemetry_options).is_key = true];
    optional int32 tmp_inner_int32 = 2;
    optional int64 tmp_inner_int64 = 3;
    optional uint32 tmp_inner_uint32 = 4;
    optional uint64 tmp_inner_uint64 = 5;
    optional double tmp_inner_double = 6;
    optional float tmp_inner_float = 7;
    optional bool tmp_inner_bool = 8;
    optional TestMessageAllTypes.TestMessageAllTypesEnum tmp_inner_enum = 9 [(telemetry_options).is_key = true];
}

message TestMessageAllTypes {
    optional string tmp_string = 1 [(telemetry_options).is_key = true];
    optional int32 tmp_int32 = 2 [(telemetry_options).is_key = true];
    optional int64 tmp_int64 = 3 [(telemetry_options).is_key = true];
    optional uint32 tmp_uint32 = 4 [(telemetry_options).is_key = true];
    optional uint64 tmp_uint64 = 5 [(telemetry_options).is_key = true];
    optional double tmp_double = 6 [(telemetry_options).is_key = true];
    optional float tmp_float = 7 [(telemetry_options).is_key = true];
    optional bool tmp_bool = 8 [(telemetry_options).is_key = true];
    enum TestMessageAllTypesEnum {
        GOOD = 1;
        BAD = 2;
    }
    optional TestMessageAllTypesEnum tmp_enum = 9 [(telemetry_options).is_key = true];
    optional TestMessageAllTypesInner tmp_message = 10;
    repeated TestMessageAllTypesInner tmp_inner = 11;
}
