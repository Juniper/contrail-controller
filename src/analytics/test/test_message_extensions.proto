/*
 * Copyright (c) 2015 Juniper Networks, Inc. All rights reserved.
 */

import "analytics/protobuf_schema.proto";
import "analytics/test/test_message.proto";

message TestMessageExtension1Inner {
    required string tm_inner_name = 1 [(telemetry_options).is_key = true];
    optional int32 tm_inner_status = 2;
    optional int32 tm_inner_counter = 3;
    optional TestMessageExtension1.TestMessageEnum tm_inner_enum = 4 [(telemetry_options).is_key = true];
}

message TestMessageExtension1 {
    required string tm_name = 1 [(telemetry_options).is_key = true];
    optional string tm_status = 2 [(telemetry_options).is_key = true];
    optional int32 tm_counter = 3 [(telemetry_options).is_key = true];
    repeated TestMessageExtension1Inner tm_inner = 4;
    enum TestMessageEnum {
        GOOD = 1;
        BAD = 2;
    }
    optional TestMessageEnum tm_enum = 5 [(telemetry_options).is_key = true];
}

extend TestMessageBase {
    optional TestMessageExtension1 tmb_extension10 = 10;
}

message TestMessageExtension2Inner {
    required string tm_inner_name = 1 [(telemetry_options).is_key = true];
    optional int32 tm_inner_status = 2;
    optional int32 tm_inner_counter = 3;
    optional TestMessageExtension2.TestMessageEnum tm_inner_enum = 4 [(telemetry_options).is_key = true];
}

message TestMessageExtension2 {
    required string tm_name = 1 [(telemetry_options).is_key = true];
    optional string tm_status = 2 [(telemetry_options).is_key = true];
    optional int32 tm_counter = 3 [(telemetry_options).is_key = true];
    repeated TestMessageExtension2Inner tm_inner = 4;
    enum TestMessageEnum {
        GOOD = 1;
        BAD = 2;
    }
    optional TestMessageEnum tm_enum = 5 [(telemetry_options).is_key = true];
}

extend TestMessageBase {
    optional TestMessageExtension2 tmb_extension20 = 20;
}

message TestMessageContrailSensorsExtension1Inner {
    required string tmcse1_inner_name = 1 [(telemetry_options).is_key = true];
    optional int32 tmcse1_inner_counter = 2;
}

message TestMessageContrailSensorsExtension1 {
    required string tmcse1_name = 1 [(telemetry_options).is_key = true];
    required int32 tmcse1_counter = 2;
    repeated TestMessageContrailSensorsExtension1Inner tmcse1_inner = 3;
}

extend TestMessageContrailSensors {
    optional TestMessageContrailSensorsExtension1 tmcs_extension1 = 1;
}
