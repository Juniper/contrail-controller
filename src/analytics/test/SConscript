#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

# -*- mode: python; -*-

Import('AnalyticsEnv')

env = AnalyticsEnv.Clone()

env.Append(LIBS=['sandeshflow', 'task_test', 'gunit'])
env.Append(LIBPATH=['#/build/lib', Dir(env['TOP']).abspath + '/base/test/'])
env.Append(CPPPATH = ['#/'+Dir('.').path ,
                      env['TOP'],
                      env['TOP'] + '/io',
                      env['TOP'] + '/base/sandesh/'])

env_noWerror = env.Clone()
while env_noWerror['CCFLAGS'].count('-Werror') > 0:
    env_noWerror['CCFLAGS'].remove('-Werror')

env_noWerror_excep = env_noWerror.Clone()
while env_noWerror_excep['CCFLAGS'].count('-fno-exceptions') > 0:
    env_noWerror_excep['CCFLAGS'].remove('-fno-exceptions')

SandeshGenFiles  = env.SandeshGenCpp('viz_collector_test.sandesh')
SandeshGenFiles += env.SandeshGenCpp('vizd_test.sandesh')
SandeshGenSrcs   = env.ExtractCpp(SandeshGenFiles)
SandeshGenObjs   = env.Object(SandeshGenSrcs)

vizd_collector_test = env.Program('vizd_collector_test',
                                  SandeshGenObjs +
                                  ['viz_collector_test.cc']
                                  )
env.Alias('src/analytics:vizd_collector_test', vizd_collector_test)

viz_flow_test_obj = env_noWerror_excep.Object('viz_flow_test.o', 'viz_flow_test.cc')
vizd_flow_test = env.Program('vizd_flow_test',
                             SandeshGenObjs +
                             [viz_flow_test_obj]
                             )
env.Alias('src/analytics:vizd_flow_test', vizd_flow_test)

stat_walker_test = env.UnitTest('stat_walker_test',
                              ['stat_walker_test.cc',
                               '../stat_walker.o'])
env.Alias('src/analytics:stat_walker_test', stat_walker_test)

viz_message_test = env.UnitTest('viz_message_test',
                              ['viz_message_test.cc',
                              '../viz_message.o']
                              )
env.Alias('src/analytics:viz_message_test', viz_message_test)

env_boost_no_unreach = env.Clone()
env_boost_no_unreach.AppendUnique(CCFLAGS='-DBOOST_NO_UNREACHABLE_RETURN_DETECTION')
syslog_test_obj = env_boost_no_unreach.Object('syslog_test.cc')
syslog_test = env.UnitTest('syslog_test',
                                  SandeshGenObjs + syslog_test_obj +
                                  [
                                  '../generator.o',
                                  '../collector.o',
                                  '../vizd_table_desc.o',
                                  '../viz_message.o',
                                  '../ruleeng.o',
                                  '../stat_walker.o',
                                  '../db_handler.o',
                                  '../parser_util.o',
                                  '../viz_constants.o',
                                  '../collector_uve_types.o',
                                  '../collector_uve_html.o',
                                  '../collector_uve_constants.o'])
env.Alias('src/analytics:syslog_test', syslog_test)

#ruleeng_test = env.UnitTest('ruleeng_test',
#                              AnalyticsEnv['ANALYTICS_SANDESH_GEN_OBJS'] + 
#                              ['ruleeng_test.cc',
#                              '../ruleeng.o',
#                              '../viz_message.o',
#                              '../viz_collector.o',
#                              '../collector.o',
#                              '../db_handler.o',
#                              '../OpServerProxy.o',
#                              ]
#                              )
#env.Alias('src/analytics:ruleeng_test', ruleeng_test)

db_handler_test_obj = env_noWerror_excep.Object('db_handler_test.o', 'db_handler_test.cc')
db_handler_test = env.UnitTest('db_handler_test',
                              AnalyticsEnv['ANALYTICS_VIZ_SANDESH_GEN_OBJS'] + 
                              [db_handler_test_obj,
                              '../db_handler.o',
                              '../parser_util.o',
                              '../vizd_table_desc.o',
                              '../viz_message.o',
                              ]
                              )
env.Alias('src/analytics:db_handler_test', db_handler_test)

options_test = env.UnitTest('options_test', ['../buildinfo.o', '../options.o',
                                             'options_test.cc'])
env.Alias('src/analytics:options_test', options_test)

#vizd_test_obj = env_noWerror_excep.Object('vizd_test.o', 'vizd_test.cc')
#vizd_test = env.UnitTest('vizd_test',
#        [
#       SandeshGenObjs,
#       env['ANALYTICS_SANDESH_GEN_OBJS'],
#       '../viz_message.o',
#       '../viz_collector.o',
#       '../collector.o',
#       '../ruleeng.o',
#       '../db_handler.o',
#       '../vizd_table_desc.o',
#       '../OpServerProxy.o',
#       '../generator.o',
#       '../redis_connection.o',
#       '../redis_processor_vizd.o',
#       vizd_test_obj]
#       )
#env.Alias('src/analytics:vizd_test', vizd_test)

protobufEnv = env.Clone()
protobufEnv.Append(LIBS=['protobuf'])
protobufEnv.Append(LIBPATH=['/usr/lib/'])
protobuf_test_gen_files = protobufEnv.ProtocGenCpp('self_describing_message_test.proto')
protobuf_test_gen_files += protobufEnv.ProtocGenCpp('test_message.proto')
protobuf_test_gen_srcs = protobufEnv.ExtractCpp(protobuf_test_gen_files)
protobuf_test_desc_files = protobufEnv.ProtocGenDesc('test_message.proto')
protobuf_test = protobufEnv.UnitTest('protobuf_test', protobuf_test_gen_srcs +
      ['protobuf_test.cc'])
env.Requires(protobuf_test, env['TOP'] + '/analytics/test/test_message.desc')
protobufEnv.Alias('src/analytics:protobuf_test', protobuf_test)

test_suite = [ 
               options_test,
               viz_message_test,
               db_handler_test,
               stat_walker_test,
               protobuf_test,
             ]
test = env.TestSuite('analytics-test', test_suite)

env.Alias('controller/src/analytics:test', [
    test,
    'controller/src/analytics/ruleparser:test',
])

flaky_test_suite = [ syslog_test ]
flaky_test = env.TestSuite('analytics-flaky-test', flaky_test_suite)
env.Alias('controller/src/analytics:flaky-test', flaky_test)

Return('test_suite')
