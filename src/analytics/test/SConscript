#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

# -*- mode: python; -*-

Import('AnalyticsEnv')

env = AnalyticsEnv.Clone()

env.Append(LIBS=['sandeshflow', 'task_test', 'net', 'gunit', 'pthread'])
env.Append(LIBPATH=[
	'#/build/lib',
	Dir(env['TOP']).abspath + '/base/test/',
	Dir('../../net'),
	])
env.Append(CPPPATH = ['#/'+Dir('.').path ,
                      env['TOP'],
                      env['TOP'] + '/io',
                      env['TOP'] + '/base/sandesh/'])

env_noWerror = env.Clone()
while env_noWerror['CCFLAGS'].count('-Werror') > 0:
    env_noWerror['CCFLAGS'].remove('-Werror')

env_noWerror_excep = env_noWerror.Clone()
env_noWerror_excep.CppEnableExceptions()

stat_walker_test = env.UnitTest('stat_walker_test',
                              ['stat_walker_test.cc',
                               '../stat_walker.o'])
env.Alias('src/analytics:stat_walker_test', stat_walker_test)

viz_message_test = env.UnitTest('viz_message_test',
                              ['viz_message_test.cc',
                              '../viz_message.o']
                              )
env.Alias('src/analytics:viz_message_test', viz_message_test)

env_boost_no_unreach = env.Clone()
env_boost_no_unreach.AppendUnique(CCFLAGS='-DBOOST_NO_UNREACHABLE_RETURN_DETECTION')
syslog_test_obj = env_boost_no_unreach.Object('syslog_test.cc')
syslog_test = env.UnitTest('syslog_test',
                                  syslog_test_obj +
                                  [
                                  '../generator.o',
                                  '../collector.o',
                                  '../vizd_table_desc.o',
                                  '../viz_message.o',
                                  '../ruleeng.o',
                                  '../stat_walker.o',
                                  '../db_handler.o',
                                  '../usrdef_counters.o',
                                  '../analytics_types.o',
                                  '../parser_util.o',
                                  '../viz_constants.o',
                                  '../collector_uve_types.o',
                                  '../collector_uve_html.o',
                                  '../collector_uve_constants.o'])
env.Alias('src/analytics:syslog_test', syslog_test)

#ruleeng_test = env.UnitTest('ruleeng_test',
#                              AnalyticsEnv['ANALYTICS_SANDESH_GEN_OBJS'] + 
#                              ['ruleeng_test.cc',
#                              '../ruleeng.o',
#                              '../viz_message.o',
#                              '../viz_collector.o',
#                              '../collector.o',
#                              '../db_handler.o',
#                              '../OpServerProxy.o',
#                              ]
#                              )
#env.Alias('src/analytics:ruleeng_test', ruleeng_test)

db_handler_test_obj = env_noWerror_excep.Object('db_handler_test.o', 'db_handler_test.cc')
db_handler_test = env.UnitTest('db_handler_test',
                              AnalyticsEnv['ANALYTICS_VIZ_SANDESH_GEN_OBJS'] + 
                              [db_handler_test_obj,
                              '../db_handler.o',
                              '../usrdef_counters.o',
                              '../analytics_types.o',
                              '../parser_util.o',
                              '../vizd_table_desc.o',
                              '../viz_message.o',
                              ]
                              )
env.Alias('src/analytics:db_handler_test', db_handler_test)

options_test = env.UnitTest('options_test',
        AnalyticsEnv['ANALYTICS_VIZ_SANDESH_GEN_OBJS'] +
        ['../buildinfo.o', '../options.o', 'options_test.cc'])
env.Alias('src/analytics:options_test', options_test)

protobufEnv = env.Clone()
protobuf_test_gen_files = protobufEnv.ProtocGenCpp('test_message.proto')
protobuf_test_gen_files += protobufEnv.ProtocGenCpp('test_message_extensions.proto')
protobuf_test_gen_srcs = protobufEnv.ExtractCpp(protobuf_test_gen_files)
protobuf_test_desc_files = protobufEnv.ProtocGenDesc('test_message.proto')
protobuf_test_desc_files += protobufEnv.ProtocGenDesc('test_message_extensions.proto')
protobuf_test = protobufEnv.UnitTest('protobuf_test', protobuf_test_gen_srcs +
      protobufEnv['ANALYTICS_PROTOBUF_GEN_OBJS'] +
      ['protobuf_test.cc', '../protobuf_server.o', '../stat_walker.o'])
env.Requires(protobuf_test, [env['TOP'] + '/analytics/test/test_message.desc',
                             env['TOP'] + '/analytics/test/test_message_extensions.desc'])
protobufEnv.Alias('src/analytics:protobuf_test', protobuf_test)

sflow_parser_test_obj = env_noWerror_excep.Object('sflow_parser_test.o',
                                                  'sflow_parser_test.cc')
sflow_parser_test = env.UnitTest('sflow_parser_test',
    [sflow_parser_test_obj, '../sflow.o', '../sflow_parser.o',
     '../sflow_types.o'])
env.Alias('src/analytics:sflow_parser_test', sflow_parser_test)

test_suite = [ 
#options_test,
               viz_message_test,
               db_handler_test,
               stat_walker_test,
               protobuf_test,
               syslog_test,
               sflow_parser_test
             ]
test = env.TestSuite('analytics-test', test_suite)

env.Alias('controller/src/analytics:test', [
    test,
    'controller/src/analytics/ruleparser:test',
])

flaky_test_suite = [ ]
flaky_test = env.TestSuite('analytics-flaky-test', flaky_test_suite)
env.Alias('controller/src/analytics:flaky-test', flaky_test)

Return('test_suite')
