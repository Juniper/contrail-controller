#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#
# -*- mode: python; -*-

import sys

Import('BuildEnv')
env = BuildEnv.Clone()

env.Append(LIBPATH = env['TOP'] + '/base')
env.Append(LIBPATH = env['TOP'] + '/bgp')
env.Append(LIBPATH = env['TOP'] + '/bgp/routing-instance')
env.Append(LIBPATH = env['TOP'] + '/bgp/rtarget')
env.Append(LIBPATH = env['TOP'] + '/bgp/origin-vn')
env.Append(LIBPATH = env['TOP'] + '/bgp/ermvpn')
env.Append(LIBPATH = env['TOP'] + '/bgp/evpn')
env.Append(LIBPATH = env['TOP'] + '/bgp/extended-community')
env.Append(LIBPATH = env['TOP'] + '/bgp/inet')
env.Append(LIBPATH = env['TOP'] + '/bgp/inet6')
env.Append(LIBPATH = env['TOP'] + '/bgp/inet6vpn')
env.Append(LIBPATH = env['TOP'] + '/bgp/l3vpn')
env.Append(LIBPATH = env['TOP'] + '/bgp/routing-policy')
env.Append(LIBPATH = env['TOP'] + '/bgp/security_group')
env.Append(LIBPATH = env['TOP'] + '/bgp/tunnel_encap')
env.Append(LIBPATH = env['TOP'] + '/control-node')
env.Append(LIBPATH = env['TOP'] + '/db')
env.Append(LIBPATH = env['TOP'] + '/ifmap')
env.Append(LIBPATH = env['TOP'] + '/io')
env.Append(LIBPATH = env['TOP'] + '/ifmap/client')
env.Append(LIBPATH = env['TOP'] + '/net')
env.Append(LIBPATH = env['TOP'] + '/route')
env.Append(LIBPATH = env['TOP'] + '/xml')
env.Append(LIBPATH = env['TOP'] + '/xmpp')
env.Append(LIBPATH = env['TOP'] + '/discovery/client')
env.Append(LIBPATH = env['TOP'] + '/http/client')

env.Prepend(LIBS = ['ifmap_server', 'ifmapio', 'ds', 'xmpp', 'peer_sandesh',
                    'table_sandesh', 'sandesh', 'http', 'http_parser', 'httpc',
                    'curl', 'sandeshvns', 'process_info', 'io', 'control_node',
                    'ifmap_common', 'pugixml', 'xml', 'db', 'base', 'gunit',
                    'bgp', 'routing_instance', 'origin_vn', 'rtarget', 'db',
                    'bgp_inet6', 'extended_community', 'net', 'bgp_ermvpn',
                    'bgp_evpn', 'base', 'table_sandesh', 'tunnel_encap',
                    'security_group', 'bgp_inet6vpn', 'route', 'routing_policy',
                    'bgp_inet', 'bgp_l3vpn', 'crypto', 'ssl', 'boost_regex',
                    'boost_chrono', 'boost_program_options'])

if sys.platform != 'darwin':
    env.Append(LIBS = ['rt'])

env.Library('ifmap_test_util',
            ['ifmap_test_util.cc'])
env.Library('ifmap_test_util_server',
            ['ifmap_client_mock.cc', 'ifmap_test_util_server.cc',
             'ifmap_xmpp_client_mock.cc'])
env.Library('ifmap_test_util_agent',
            ['ifmap_test_util_agent.cc'])

env.Append(LIBPATH = '.')
env.Prepend(LIBS = ['ifmap_test_util', 'ifmap_test_util_server'])
env.Append(LIBPATH = env['TOP'] + '/base/test')
env.Prepend(LIBS = ['task_test'])

env.Append(CPPPATH = [env['TOP']])

test_suite = []
flaky_test_suite = []

def PrependLibraries(env, libs):
    for lib in libs:
        (path, libname) = lib.rsplit('/', 1)
        env.Append(LIBPATH = env['TOP'] + '/' + path)
        env.Prepend(LIBS = libname)

def AppendLibraries(env, libs):
    for lib in libs:
        (path, libname) = lib.rsplit('/', 1)
        env.Append(LIBPATH = env['TOP'] + '/' + path)
        env.Append(LIBS = libname)

def BuildTest(env, testname, sources, prepend_libs, append_libs,
              ts = test_suite):
    build_env = env.Clone()
    PrependLibraries(build_env, prepend_libs)
    AppendLibraries(build_env, append_libs)
    target = build_env.UnitTest(testname, sources)
    ts.append(target)
    env.Alias('src/ifmap:' + testname, target)
    env.Alias('controller/src/ifmap:' + testname, target)
    return target

BuildTest(env, 'ifmap_exporter_test', ['ifmap_exporter_test.cc'], [],
          ['schema/ifmap_vnc', 'schema/bgp_schema'])

BuildTest(env, 'ifmap_graph_walker_test', ['ifmap_graph_walker_test.cc'], [],
          ['schema/ifmap_vnc', 'schema/bgp_schema'])

BuildTest(env, 'ifmap_restart_test', ['ifmap_restart_test.cc'],
          ['schema/ifmap_vnc', 'schema/bgp_schema', 'xml/xml'], [])

BuildTest(env, 'ifmap_server_test', ['ifmap_server_test.cc'],
          [], ['schema/ifmap_vnc'])

BuildTest(env, 'ifmap_server_parser_test', ['ifmap_server_parser_test.cc'],
          [], ['schema/ifmap_vnc'])

BuildTest(env, 'ifmap_server_table_test', ['ifmap_server_table_test.cc'],
          ['schema/ifmap_vnc', 'schema/bgp_schema', 'xml/xml'], [])

BuildTest(env, 'ifmap_uuid_mapper_test', ['ifmap_uuid_mapper_test.cc'],
          [], ['schema/ifmap_vnc', 'schema/bgp_schema'])

BuildTest(env, 'ifmap_update_queue_test', ['ifmap_update_queue_test.cc'],
          ['schema/ifmap_vnc', 'schema/bgp_schema', 'xml/xml'], [])

BuildTest(env, 'ifmap_update_sender_test', ['ifmap_update_sender_test.cc'],
          ['schema/ifmap_vnc', 'schema/bgp_schema', 'xml/xml'], [],
          flaky_test_suite)

BuildTest(env, 'ifmap_xmpp_test', ['ifmap_xmpp_test.cc'],
          ['schema/ifmap_vnc', 'schema/bgp_schema', 'xml/xml'], [], 
          flaky_test_suite)

BuildTest(env, 'ifmap_stress_test', ['ifmap_stress_test.cc'],
          ['schema/ifmap_vnc', 'schema/bgp_schema', 'xml/xml'], [], 
          flaky_test_suite)

test = env.TestSuite('ifmap-test', test_suite)
flaky_test = env.TestSuite('ifmap-flaky-test', flaky_test_suite)
env.Alias('controller/src/ifmap:test', test)
env.Alias('controller/src/ifmap:flaky-test', flaky_test)
Return('test_suite')
