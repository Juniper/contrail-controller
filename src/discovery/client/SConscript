# -*- mode: python; -*-
#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#


Import('BuildEnv')
env = BuildEnv.Clone()

autogen_infra_sources = [
                 '#/tools/generateds/generateDS.py',
                 '#/tools/generateds/TypeGenerator.py',
                 '#/tools/generateds/ccsvc.py',
                 '#/tools/generateds/idl_parser.py',
                 '#/tools/generateds/ServiceGenerator.py',
                ]
autogen_sources = [
                 '#controller/src/schema/services.xsd',
                ]

# generate classes from services XML specification
autogen_script = './tools/generateds/generateDS.py'
autogen_cmd = autogen_script + \
            ' -f -l py -o ' + env['TOP'][1:] + '/discovery/client/discoveryclient/services -g service'
generated_files = [ 'services.py' ]
generated_rule = env.Command(generated_files,
                             '#controller/src/schema/services.xsd',
                             autogen_cmd + ' $SOURCE')

setup_sources = [
           'setup.py',
           'MANIFEST.in',
          ]
setup_sources_rules = []
for file in setup_sources:
    setup_sources_rules.append(env.Install("", "#controller/src/discovery/client/" + file))

local_sources = [
           '__init__.py',
           '../client.py',
           '../disc_utils.py',
           '../disc_consts.py',
          ]
local_sources_rules = []
for file in local_sources:
    local_sources_rules.append(env.Install("discoveryclient", "#controller/src/discovery/client/" + file))

import sys
SandeshGenFiles = env.SandeshGenCpp('discovery_client.sandesh')
SandeshGenFiles += env.SandeshGenCpp('discovery_client_stats.sandesh')
SandeshGenSrcs = env.ExtractCpp(SandeshGenFiles)
sandesh_objs = []
for src in SandeshGenSrcs:
    objname = src.replace('.cpp', '.o')
    obj = env.Object(objname, src)
    sandesh_objs.append(obj)

sandesh_common_files = ['__init__.py'] 
sandesh_common_sources = ['gen_py/' + ssrc for ssrc in sandesh_common_files]
sandesh_common_sources_rules = []
for file in sandesh_common_sources:
    sandesh_common_sources_rules.append(
        env.Install("discoveryclient/sandesh", "../../sandesh/common/" + file))
env.Depends(sandesh_common_sources_rules, Dir('../../sandesh/common/gen_py/'))

sandesh_gen_py_gfiles = env.SandeshGenPy('discovery_client.sandesh')
sandesh_gen_py_dirs = ['discovery_client']
for file in sandesh_gen_py_dirs:
    Dir('#/build/debug/discovery/client/gen_py/' + file)
sandesh_gen_py_files = sandesh_gen_py_dirs 
sandesh_gen_py_sources = ['gen_py/' + ssrc for ssrc in sandesh_gen_py_files]
sandesh_gen_py_rules = []
for file in sandesh_gen_py_sources:
    sandesh_gen_py_rules.append(env.Install("discoveryclient/sandesh", file))
env.Depends(sandesh_gen_py_rules, sandesh_gen_py_gfiles)

sdist_depends = [generated_rule]
sdist_depends.extend(setup_sources_rules)
sdist_depends.extend(local_sources_rules)
sdist_depends.extend(sandesh_common_sources_rules)
sdist_depends.extend(sandesh_gen_py_rules)
sdist_gen = env.Command('dist', 'setup.py', 'python setup.py sdist', chdir=1)

env.Default(sdist_gen)

if 'install' in BUILD_TARGETS:
    install_cmd = env.Command(None,
                              'setup.py',
                              'python setup.py install %s' %
                              env['PYTHON_INSTALL_OPT'],
                              chdir = 1)
    env.Depends(install_cmd, sdist_depends)
    env.Alias('install', install_cmd)



env.Depends(generated_rule, [autogen_infra_sources, autogen_sources, local_sources_rules])
env.Depends(local_sources_rules, autogen_infra_sources)

# install everything before building distribution
env.Depends(sdist_gen, sdist_depends)
env.Alias('src/discovery:client', sdist_gen)

def MapBuildDir(list):
    return map(lambda x: '#/' + Dir('..').path + '/../' + x, list)

env.Prepend(CPPPATH = env['TOP'])
env.Prepend(CPPPATH = env['TOP'] + '/discovery/client')
env.Prepend(CPPPATH = env['TOP'] + '/schema')


libdsclient = env.Library('ds',
                          sandesh_objs +
                          [
                           'discovery_client.cc',
                          ]
                          )


env.Prepend(LIBS = ['xml', 'pugixml', 
                    'httpc', 'http', 'http_parser', 'curl',
                    'io', 'boost_regex'])

libs = MapBuildDir(['xml', 'pugixml', 'io', 'schema'])
env.Append(LIBPATH=libs)

ds_test_suite = env.SConscript('test/SConscript',
                               exports='BuildEnv', duplicate = 0)

#import subprocess
#ShEnv = {env['ENV_SHLIB_PATH']: 'build/lib'} 

#for test in ds_test_suite:
    #cmd = test[0].path
    #logfile = open(cmd + '.log', 'w') 
    #subprocess.call([cmd], stdout=logfile, env=ShEnv)
