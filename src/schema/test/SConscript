#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#
# -*- mode: python; -*-

import re
import sys

Import('BuildEnv')
env = BuildEnv.Clone()

env.Append(LIBPATH = env['TOP'] + '/base')
env.Append(LIBPATH = env['TOP'] + '/ifmap')
env.Append(LIBPATH = env['TOP'] + '/db')
env.Append(LIBPATH = env['TOP'] + '/io')
env.Append(LIBPATH = env['TOP'] + '/xmpp')
env.Append(LIBPATH = env['TOP'] + '/schema')
env.Append(LIBPATH = env['TOP'] + '/bgp')
env.Append(LIBPATH = env['TOP'] + '/xml')

env.Prepend(LIBS = ['db', 'xmpp', 'peer_sandesh', 'sandesh', 'sandeshvns',
                    'process_info', 'io', 'crypto', 'ssl', 'base', 'gunit',
                    'pugixml', 'cassandra_cql', 'SimpleAmqpClient', 'rabbitmq',
                    'cassandra', 'gendb', 'http', 'http_parser',
                    'curl', 'ifmap_vnc', 'bgp_schema', 'boost_regex', 'xml'])

lib_ifmap_server = File('../../ifmap/libifmap_server.a')

if sys.platform != 'darwin':
    env.Prepend(LINKFLAGS =
                     ['-Wl,--whole-archive', '-lifmap_server', '-Wl,--no-whole-archive'])
else:
    env.Prepend(LINKFLAGS = ['-Wl,-force_load,' + lib_ifmap_server.path])

env.Prepend(LIBS = ['sandesh', 'http', 'http_parser', 'curl', 'db', 
                    'process_info', 'sandeshvns', 'io', 'base', 
                    'ssl', 'crypto', 'gunit', 'pugixml'])

if sys.platform not in ['win32', 'darwin']:
    env.Append(LIBS = ['rt'])

env.Append(CPPPATH = [env['TOP']])

def CCMapTest(env, testname):
    targets = env.IFMapAutogen(testname + '.xsd')
    cc_files = filter(lambda x: re.match(r'(.*)\.cc$', x.abspath), targets)
    cc_files.append(File(testname + '_test.cc'))
    test = env.Program(testname,  cc_files)
    return test

test_list = []
map_env = env.Clone()
map_env.Prepend(LIBS = ['ifmap_agent', 'ifmap_common', 'ifmapio', 'config_client_mgr'])
test_list.append(CCMapTest(map_env, 'ifmap_link_attr'))
test_list.append(CCMapTest(map_env, 'ifmap_deep_property'))
test_list.append(CCMapTest(map_env, 'ifmap_identity_property'))

#bgp_l3vpn_env = env.Clone()
#bgp_l3vpn_env.Append(LIBPATH = env['TOP'] + '/schema')
#bgp_l3vpn_env.Prepend(LIBS = ['xmpp_unicast'])
#test_list.append(
#    bgp_l3vpn_env.Program('xmpp_unicast', ['xmpp_unicast_test.cc']))

vnc_cfg_env = env.Clone()
vnc_cfg_env.Append(LIBPATH = env['TOP'] + '/schema')
vnc_cfg_env.Prepend(LIBS = ['ifmap_vnc', 'ifmap_common', 'ifmapio', 'config_client_mgr'])

env.Alias('src/schema:id_perms_test',
          vnc_cfg_env.UnitTest('id_perms_test', ['id_perms_test.cc']))

env.Alias('src/schema:display_name_test',
	vnc_cfg_env.UnitTest('display_name_test', ['display_name_test.cc']))

#vnc_cfg_env.Append(LIBPATH = '#/build/lib')
#vnc_cfg_env.Append(LIBS = ['ifmapio', 'ifmapclient', 'curl', 'libxml2'])
#vnc_cfg_test = vnc_cfg_env.Program('vnc_cfg_test', ['vnc_cfg_test.cc'])
#env.Alias('src/schema:vnc_cfg_test', vnc_cfg_test)

test = env.TestSuite('schema-test', test_list)

env.Alias('controller/src/schema:test', test)
