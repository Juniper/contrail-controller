/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

enum ServicesConsts {
    MAX_SANDESH_COUNT = 256,
    MAX_RETRIES = 64,
    MAX_RETRY_TIMEOUT = 60,
    MAX_AGING_TIMEOUT = 65535
}       
  
request sandesh DhcpInfo {
}

request sandesh ArpInfo {
}

request sandesh DnsInfo {
}

request sandesh IcmpInfo {
}

request sandesh MetadataInfo {
}

request sandesh ShowAllInfo {
}

request sandesh ClearAllInfo {
}

request sandesh PktTraceInfo {
    1: u32 num_buffers = 16;
    2: u32 flow_num_buffers = 16;
}

response sandesh PktStats {
    1: i32 total_rcvd;
    2: i32 dhcp_rcvd;
    3: i32 arp_rcvd;
    4: i32 dns_rcvd;
    5: i32 icmp_rcvd;
    6: i32 flow_rcvd;
    7: i32 dropped;
    8: i32 total_sent;
    9: i32 dhcp_sent;
    10: i32 arp_sent;
    11: i32 dns_sent;
    12: i32 icmp_sent;
    13: i32 dhcp_q_threshold_exceeded;
    14: i32 arp_q_threshold_exceeded;
    15: i32 dns_q_threshold_exceeded;
    16: i32 icmp_q_threshold_exceeded;
    17: i32 flow_q_threshold_exceeded;
}

response sandesh DhcpStats {
    1: i32 dhcp_discover;
    2: i32 dhcp_request;
    3: i32 dhcp_inform;
    4: i32 dhcp_decline;
    5: i32 dhcp_other;
    6: i32 dhcp_errors;
    7: i32 offers_sent;
    8: i32 acks_sent;
    9: i32 nacks_sent;
    10: i32 relay_request;
    11: i32 relay_response;
}

response sandesh ArpStats {
    1: i32 arp_entries;
    2: i32 arp_requests;           // received
    3: i32 arp_replies;            // received
    4: i32 arp_gracious;           // received
    5: i32 arp_resolved;
    6: i32 arp_max_retries_exceeded;
    7: i32 arp_errors;
    8: i32 pkts_dropped;
}

response sandesh DnsStats {
    1: i32 dns_requests;
    2: i32 dns_resolved;
    3: i32 dns_retransmit_reqs;
    4: i32 dns_unsupported;
    5: i32 dns_failures;
    6: i32 dns_drops;
}

response sandesh IcmpStats {
    1: i32 icmp_gw_ping;
    2: i32 icmp_gw_ping_err;
    3: i32 icmp_drop;
}

response sandesh MetadataResponse {
    1: i32 metadata_server_port;
    2: i32 metadata_requests;
    3: i32 metadata_responses;
    4: i32 metadata_proxy_sessions;
    5: i32 metadata_internal_errors;
}

response sandesh PktTraceInfoResponse {
    1: string resp = "   Success !!!   ";
    2: u32 num_buffers;
    3: u32 flow_num_buffers;
}

response sandesh PktErrorResp {
    1: string resp = "   Success !!!   ";
}

struct VrouterHdr {
    1: i16 ifindex;             // interface index
    2: i16 vrf;                 // VRF
    3: string cmd;              // Command
    4: i32 cmd_param;           // Command specific parameter
    5: i32 nh;                  // Nexthop
}

struct MacHdr {
    1: string dest_mac;
    2: string src_mac;
    3: string type;
}

struct ArpHdr {
    1: string htype;
    2: string protocol;
    3: i16 hw_size;
    4: i16 prot_size;
    5: string opcode;
    6: string sender_mac;
    7: string sender_ip;
    8: string target_mac;
    9: string target_ip;
}

struct Ipv4Hdr {
    1: i16 vers;
    2: i16 hdrlen;
    3: i16 tos;
    4: i16 len;
    5: string id;
    6: string frag;
    7: i16 ttl;
    8: string protocol;
    9: string csum;
    10: string src_ip;
    11: string dest_ip;
}

struct Icmpv4Hdr {
    1: string type;
    2: i16 code;
    3: string csum;
}

struct UdpHdr {
    1: i32 src_port;
    2: i32 dest_port;
    3: i16 length;
    4: string csum;
}

struct DhcpOption {
    1: string type;
    2: i16 len;
    3: string value;
}

struct Dhcpv4Hdr {
    1: string op;
    2: string htype;
    3: i16 hlen;
    4: i16 hops;
    5: string xid;
    6: i16 secs;
    7: string flags;
    8: string ciaddr;
    9: string yiaddr;
    10: string siaddr;
    11: string giaddr;
    12: string chaddr;
    13: string sname;
    14: string file;
    15: string cookie;
    16: string dhcp_options;
    17: string other_options;
}

struct DnsHdr {
    1: i32 xid;
    2: string flags;
    3: i16 ques;
    4: i16 ans;
    5: i16 auth;
    6: i16 add;
    7: string rest;
}

struct PktData {
    1: string direction;        // In or Out
    2: i32 len;                 // length of the packet
}

struct ArpPkt {
    1: PktData info;
    2: VrouterHdr agent_hdr;
    3: MacHdr mac_hdr;
    4: ArpHdr arp_hdr;
}

response sandesh ArpPktSandesh {
    1: string type;
    2: list<ArpPkt> pkt_list;
}

struct DhcpPkt {
    1: PktData info;
    2: VrouterHdr agent_hdr;
    3: MacHdr mac_hdr;
    4: Ipv4Hdr ip_hdr;
    5: UdpHdr udp_hdr;
    6: Dhcpv4Hdr dhcp_hdr;
}

response sandesh DhcpPktSandesh {
    1: string type;
    2: list<DhcpPkt> pkt_list;
}

struct DnsPkt {
    1: PktData info;
    2: VrouterHdr agent_hdr;
    3: MacHdr mac_hdr;
    4: Ipv4Hdr ip_hdr;
    5: UdpHdr udp_hdr;
    6: DnsHdr dns_hdr;
}

response sandesh DnsPktSandesh {
    1: string type;
    2: list<DnsPkt> pkt_list;
}

struct IcmpPkt {
    1: PktData info;
    2: VrouterHdr agent_hdr;
    3: MacHdr mac_hdr;
    4: Ipv4Hdr ip_hdr;
    5: Icmpv4Hdr icmp_hdr;
}

response sandesh IcmpPktSandesh {
    1: string type;
    2: list<IcmpPkt> pkt_list;
}

struct PktDump {
    1: PktData info;
    2: VrouterHdr agent_hdr;
    3: MacHdr mac_hdr;
    4: string pkt;
}

response sandesh PktSandesh {
    1: string type;
    2: list<PktDump> pkt_list;
}

///////////////////////////////////////////////////////////////////////////////

struct VmDnsRecord {
    1: string type;
    2: string name;
    3: string data;
    4: i32 ttl;
    5: string eclass;
}

struct VmDnsSandesh {
    1: string vm;
    2: string virtual_dns;
    3: string zone;
    4: string is_floating;
    5: list<VmDnsRecord> records;
}

request sandesh ShowDnsEntries {
}

response sandesh AgentDnsEntries {
    1: list<VmDnsSandesh> dns_list;
}

///////////////////////////////////////////////////////////////////////////////

struct ArpSandeshData {
    1: string ip;                // IP Address
    2: string vrf;               // VRF name
    3: string mac;               // MAC Address
    4: string state;             // Active / Static / Permanent / Resolving
}

request sandesh ShowArpCache {
}

response sandesh ArpCacheResp {
    1: list<ArpSandeshData> arp_list;
}

///////////////////////////////////////////////////////////////////////////////

trace sandesh ArpTrace {
    1: string op;
    2: string ip;
    3: string vrf;
    4: string mac;
}

trace sandesh ArpError {
    1: string err;
}

trace sandesh DhcpError {
    1: string error;
}

trace sandesh DhcpTrace {
    1: string msg;
}

trace sandesh MetadataTrace {
    1: string msg;
}
