# $Id: README,v 1.1.192.1 2009-08-13 16:44:41 kdickman Exp $

This set of files makes up the GMP (Group Management Protocol)
toolkit.  It is intended to be a portable, scalable, implementation of
IGMP (for v4) and MLD (for v6).

It makes minimal assumptions about the environment in which it runs.
It expects memory management, timers, patricia, and the
doubly-linked-list data structure called "threads".
It is hopefully devoid of unix-isms.  In particular, it does not
do any I/O, it does not assume the existence of printf() or its ilk, etc.

It has a complete implementation of both the host side and the router side
of the protocol.  Either or both may be compiled in as required.

GMP uses a "pull" model for interaction with both the top interface (to
protocol clients) and the bottom interface (to I/O.)  In both cases, a
callback is made letting the outside know that GMP has some data.  That
data can be fetched at any time in the future, allowing for throttling and
deferral as required.

The GMP implementation is bounded-state, so even if a consumer stalls
indefinitely, the memory footprint will eventually stop growing.  It also
does state compression, so if a consumer defers on reading out data, that
data is always guaranteed to reflect the latest state when it is read.

GMP expects a file called "gmpx_environment.h" to be defined in the local
environment in order to map its abstracted system calls to the local
environment.

All host-side files start with "gmph_".  All router-side files start with
"gmpr_".  Common files start with "gmp_".

Procedure names are similarly named.  Procedures calls for things
starting with "gmpx_" are expected to be part of the environment
definition.



Environment

The GMP toolkit is a portable source library.  It requires certain
services from the environment in which it runs.  These services are
called through procedures named gmpx_<foo> and are listed below.

The environment is defined by an application-specific file that is
included by the library called "gmpx_environment.h".  That file typically
contains #defines and typedefs and externs that bind the toolkit's
calls to the local environment.

The required definitions are as follows.  Note that if the exact type
of parameter or return value is not specified, the toolkit treats it in
a generic way and does not explicitly type it (for instance, zero/nonzero
procedure returns.)


Patricia library:

 gmpx_patroot
   An opaque type for a patricia root structure.

 gmpx_patnode
   An opaque type for a patricia node.

 gmpx_patroot *gmpx_patroot_init(keylen, offset)
   Initializes a patricia root.  Keylen is the length of the key in bytes.
   Offset is the byte offset from the start of the key to the start of
   the patricia node.

 gmpx_patnode *gmpx_patricia_lookup(gmpx_patroot *root, void *key)
   Looks up a patricia entry, returns a pointer to the patricia node,
   or NULL if not found.

 gmpx_patnode *gmpx_patricia_lookup_least(gmpx_patroot *root)
   Looks up the first entry in a patricia tree, returns a pointer to the
   patricia node, or NULL if the tree is empty.

 gmpx_patnode *gmpx_patricia_lookup_geq(gmpx_patroot *root, void *key)
   Looks up the first entry in a patricia tree with a key greater than
   or equal to the specified key, returning a pointer to the patricia
   node, or NULL if there are no entries satisfying the condition.

 gmpx_patricia_add(gmpx_patroot *root, gmpx_patnode *node)
   Adds the node to the patricia tree.  Returns nonzero if successful,
   zero if failed (e.g., key already in the tree).

 gmpx_patricia_delete(gmpx_patroot *root, gmpx_patnode *node)
   Deletes the node from the patricia tree.  Returns nonzero if successful,
   zero if failed (e.g., node is not in the tree).

 gmpx_patnode *gmpx_patricia_getnext(gmpx_patroot *root, gmpx_patnode *node)
   Returns the patricia node following the specified one.  If the specified
   node is NULL, returns the first node in the tree.  Returns NULL if there
   are no more nodes in the tree.

 gmpx_patroot_destroy(gmpx_patroot *root)
   Destroys the patricia tree root.  The toolkit ensures that all nodes are
   first deleted from the tree.

 GMPX_PATRICIA_OFFSET(structname, nodefield, keyfield)
   Returns the offset in a structure from the patricia node to the
   patricia key.  This should resolve to a bunch of pointer math.  This
   is used in calls to gmpx_patroot_init().

 GMPX_PATNODE_TO_STRUCT(procname, structname, nodefieldname)
   Creates an inline procedure that, given a pointer to an embedded
   gmpx_patnode in a structure, returns a pointer to the enclosing
   structure, or returns NULL if the node pointer is NULL.


Thread Library:

 The library for doubly-linked-list data structure.


Memory management:

 The bitvector toolkit expects a block memory management system, in which
 a block size is first defined, and then requests for specific block sizes
 are made thereafter (modeled on rpd's memory manager.)

 gmpx_block_tag
   An opaque type that defines a tag representing a memory block size.
   Semantically, this is the size itself (and in fact a sleazy way to
   implement this in a naked malloc() environment is to define this as
   an int and simply store the block size here.)  The tag must be a
   scalar (so that it can be compared to zero) and it must be nonzero
   when it is valid (since a zero value implies an uninitialized tag.)

 gmpx_block_tag gmpx_malloc_block_create(size, const char *name)
   Create a block tag for memory blocks of a particular size.  The name
   can be used for diagnostic purposes.  Returns the tag.

 void *gmpx_malloc_block(gmpx_block_tag tag)
   Allocate a block of memory of the size denoted by the tag.  Returns
   a pointer to the block, or NULL if out of memory.  The toolkit
   does not specify the pointer type of the returned value, but expects
   to be able to assign it to any pointer type without coercion (thus
   the void *).

 gmpx_free_block(gmpx_block_tag tag, void *block)
   Free a block of memory to the size pool specified by the tag.


Timer management:

 gmpx_timer
   An opaque type that represents a single timer.  The toolkit carries
   pointers to this structure and uses it to reference timers.

 gmpx_timer_callback
   The timer callback type.  It must be defined as:
     typedef void (*gmpx_timer_callback)(gmpx_timer *timer, void *context);

 gmpx_timer *gmpx_create_timer(void_t inst_context, const char *name,
	gmpx_timer_callback callback, void *context)
   Create a timer.  "inst_context" is the context value passed to
   gmpr_create_instance() or gmph_create_instance().  "name" is the name
   of the timer (for diagnostic purposes).  "callback" is a pointer to
   the timer callback routine.  "context" is an opaque value associated
   with the timer, which is passed to the callback routine to help
   disambiguate it.  Returns a pointer to the timer, or NULL if out of
   memory.

 gmpx_timer *gmpx_create_grouped_timer(gmp_timer_group group,
	void_t inst_context, const char *name, gmpx_timer_callback callback,
	void *context)
   Same as gmpx_create_timer(), except that it creates a timer that is
   part of a specific group of timers.  Timers are grouped so that they
   can be smeared as a set with gmpx_smear_timer_group().

 gmpx_destroy_timer(gmpx_timer *timer)
   Destroy a previously created timer.  The timer may be running when
   it is destroyed.

 gmpx_start_timer(gmpx_timer *timer, u_int32_t ivl, u_int jitter_pct)
   Start a timer.  "ivl" is the interval in milliseconds.
   "jitter_pct" is the maximum amount of jitter to subtract from the
   interval, expressed as a percentage (0-100) of the interval.

 gmpx_stop_timer(gmpx_timer *timer)
   Stop a timer.

 boolean gmpx_timer_running(gmpx_timer *timer)
   Returns TRUE if the timer is running, or FALSE if not

 u_int32_t gmpx_timer_time_remaining(gmpx_timer *timer)
   Returns the time remaining before the timer expires, in
   milliseconds.  Returns zero if the timer has expired, or is not
   running.

 gmpx_smear_timer_group(gmp_proto proto, gmp_timer_group group)
   Smear the timer group associated with the protocol.  Smearing
   spreads out the expiration time of the group of timers as evenly as
   possible, with the restriction that timers may expire earlier, but
   will never expire later, than they were scheduled to do.

 <callback>(gmpx_timer *timer, void *context)
   The form of the timer callback.  "context" is the timer context
   passed in the create() call.  Note that the timer is guaranteed to be
   stopped when the callback is made.


Miscellaneous stuff:

 varargs
   Need to be able to make procedure calls with varying numbers of
   parameters.

 gmpx_trace(void *context, format, parameters...)
   Issue a trace message.  "context" is the context value passed to
   gmpr_create_instance() or gmph_create_instance().  "format" is a
   printf-like formatting string.  The contents of the string are
   expected to be formatted.  A "%" denotes a parameter to be
   formatted; a single character defines the type.  'a' corresponds to an
   address (a pointer to a byte string in network order.)  'i'
   corresponds to an interface (a gmpx_intf_id value).  's' corresponds
   to a character string (a const char * pointer).  'u' corresponds to an
   unsigned number (a 32 bit integer.)  'x' corresponds to an unsigned
   number to be displayed in hexadecimal (a 32 bit integer).  '%%' is
   expected to be formatted as a single percent sign.  Any other characters
   are expected to be formatted as-is.

 gmpx_assert(condition)
   Crashes if the condition is not true.

 GMPX_UNUSED
   Used in procedure declarations after unused parameters to avoid
   generating compilation warnings, e.g. "int flort(int foo gmpx_UNUSED)".

 u_int32_t
   Must be typedefed to an unsigned, 32 bit scalar.

 boolean, TRUE, FALSE
   The boolean type and the TRUE and FALSE constants must be defined.
   TRUE must be nonzero, and FALSE must be zero.  There is no assumption
   about the size of the boolean type.

 gmpx_packet_attr
   An opaque attribute passed with received packets and passed up to the
   policy callback.

 gmpx_calculate_cksum(packet, length)
   Calculate the IP checksum for a packet, returning the checksum

 gmpx_post_event(void_t context, gmp_event_type type, parameters...)
   Issue an error message.  "context" is the context value passed to
   gmpr_create_instance() or gmph_create_instance().  "type" is the
   message type.

 GMPX_MANY_INTFS
   An integer constant that defines how many interfaces must be coming up
   at once before shifting from trying to rapidly send out the first
   general queries to smearing them across a general query interval.
   This provides a hook for avoiding sudden transmissions of large
   numbers of queries (and the resultant flood of reports.)

 GMPX_MAX_RTR_CLIENTS
   An integer constant that defines the maximum number of clients per
   gmpr instance.  This is used to allocate fixed memory for notification
   threads, and so should be kept as small as possible.  There is
   unlikely to be more than one or two separate clients per gmpr
   instance.
