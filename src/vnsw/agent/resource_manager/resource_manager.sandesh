/*
 * Copyright (c) 2016 Juniper Networks, Inc. All rights reserved.
 */

/**
 * Backup Interface Mpls Resource data
*/
struct  InterfaceIndexResource {
    1: string type;
    2: string uuid;
    3: string name;
    4: bool policy;
    5: u16 flags;
    6: string mac;
    7: u64 time_stamp;
}

/**
 * Backup Vrf Mpls Resource data
*/

struct  VrfMplsResource {
    1: string name;
    2: bool vxlan_nh;
    3: u64 time_stamp;
}

/**
 * Backup Vlan Mpls Resource data
*/

struct VlanMplsResource {
    1: string uuid;
    2: u16 tag;
    3: u64 time_stamp;
}

/**
 * Backup Route Mpls Resource data
*/
struct  RouteMplsResource {
    1: string vrf_name;
    2: string route_prefix;
    3: u64 time_stamp;
}

/**
 *  Backup VmInterface resource
*/
struct  VmInterfaceIndexResource {
    1: string uuid;
    2: string interface_name;
    3: u64 time_stamp;
}
/**
 * Backup Vrf resource
*/
struct  VrfIndexResource {
    1: string vrf_name;
    2: u64 time_stamp;
}

/**
 *  Backup Qos resource
*/
struct  QosIndexResource {
    1: string uuid;
    2: u64 time_stamp;
}

/**
 *  Backup bgp service as a resource
*/
struct  BgpAsServiceIndexResource {
    1: string uuid;
    2: u64 time_stamp;
}

/**
 * Backup Mirror resource
*/
struct  MirrorIndexResource {
    1: string analyzer_name;
    2: u64 time_stamp;
}

/**
 * Backup Next hop Resource interface/vlan/vrf/
 * Receive/Resolve/tunnel/pbb/
*/
struct NextHopResource {
    1: u16 type;
    2: string uuid;
    3: string name;
    4: bool intf_policy;
    5: u16 flags;
    6: string mac;
    7: string vrf_name;
    8: bool vxlan_nh;
    9: u16 tag;
    10: u64 sip;
    11: u64 dip;
    12: u32 isid;
    13: u32 sport;
    14: u32 dport;
    15: u16 nexthop_type;
    16: u16 tunnel_type;
    17: u16 intf_type;
    18: bool policy;
    19: u64 time_stamp;
}
/*
 * CompositeNH id to label map
 */
struct CompositeNHIdToLableMap {
    u32 nh_id;
    u32 label;
}
/**
 * Backup compositeNH resource
 */
struct CompositeNHIndexResource {
    1: string vrf_name;
    2: bool policy;
    3: u16 type;
    4:list<CompositeNHIdToLableMap> nhid_label_map;
}

/**
 * Map of Interface Mpls Resource data.
*/
buffer sandesh InterfaceIndexResourceMapSandesh {
    1: map<u32, InterfaceIndexResource> index_map;
    2: u64 time_stamp;
}

/**
 * Map of Vrf Mpls Resource data. 
*/
buffer sandesh VrfMplsResourceMapSandesh {
    1: map<u32, VrfMplsResource> index_map;
    2: u64 time_stamp;
}

/**
 * Map of Vlan Mpls Resource data.
*/
buffer sandesh VlanMplsResourceMapSandesh {
    1: map<u32, VlanMplsResource> index_map;
    2: u64 time_stamp;
}

/**
 * Map of Route Mpls Resource data. 
*/
buffer sandesh RouteMplsResourceMapSandesh {
    1: map<u32, RouteMplsResource> index_map;
    2: u64 time_stamp;
}

/**
 * @description: Trace message InterfaceMplsData
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh  InterfaceMplsData {
    1: string type;
    2: string uuid;
    3: string name;
    4: bool policy;
    5: string mac;
    6: u32 label;
    7: string operation;
}

/**
 * @description: Trace message VrfMplsData
 * @type: Trace
 * @severity: DEBUG
 */

traceobject sandesh  VrfMplsData {
    1: string name;
    2: bool vxlan_nh;
    3: u32 label;
    4: string operation;
}

/**
 * @description: Trace message VlanMplsData
 * @type: Trace
 * @severity: DEBUG
 */

traceobject sandesh VlanMplsData {
    1: string uuid;
    2: u16 tag;
    3: u32 label;
    4: string operation;
}

/**
 * @description: Trace message RouteMplsData
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh  RouteMplsData {
    1: string vrf_name;
    2: string route_prefix;
    3: u32 label;
    4: string operation;
}

buffer sandesh VmInterfaceIndexResourceMapSandesh {
    1: map<u32, VmInterfaceIndexResource> index_map;
    2: u64 time_stamp;
}

buffer sandesh VrfIndexResourceMapSandesh {
    1: map<u32, VrfIndexResource> index_map;
    2: u64 time_stamp;
}

buffer sandesh QosIndexResourceMapSandesh {
    1: map<u32, QosIndexResource> index_map;
    2: u64 time_stamp;
}

buffer sandesh BgpAsServiceIndexResourceMapSandesh {
    1: map<u32, BgpAsServiceIndexResource> index_map;
    2: u64 time_stamp;
}

buffer sandesh MirrorIndexResourceMapSandesh {
    1: map<u32, MirrorIndexResource> index_map;
    2: u64 time_stamp;
}

buffer sandesh NextHopIndexResourceMapSandesh {
    1: map<u32, NextHopResource> index_map;
    2: u64 time_stamp;
}

buffer sandesh CompositeNHIndexResourceMapSandesh {
    1: map<u32, CompositeNHIndexResource> index_map;
    2: u64 time_stamp;
}
