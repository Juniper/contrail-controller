/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

/**
 *  Agent KSync module is resposible to do the translation between the data model
 *   used by Agent and the datapath.
 *  Functionality of Agent KSync includes:
 *      Provide translation between data model of Agent and the Forwarding plane
 *      KSync will be aware of data model used in dataplane
 *      Oper-DB defines datamodule of Agent
 *      Keep the operational state of agent in-sync with the forwarding plane
 *      Keep Agent platform independent
 *  We need to have different implementation of Agent KSync based on the platform.
**/

/**
 *  Sandesh definition for ksync FAT flow entry
 */
struct KSyncIntfFatFlowInfo {
    1: u16 protocol;
    2: u16 port;
}

/**

/**
 * Sandesh definition for ksync interface entry
 */
struct KSyncIntfInfo {
    1: u32 idx;
    2: string name;
    3: string operation;
    4: optional u32 os_idx;
    5: optional u32 vrf_id;
    6: optional u32 active;
   12: optional bool hc_active;
    7: optional u32 policy_enabled;
    8: optional u32 service_enabled;
    9: optional string analyzer_name;
   10: optional u32 l2_active;
   11: optional list<KSyncIntfFatFlowInfo> fat_flows;
}

/**
 * @description: Trace message for ksync interface entry
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh KSyncIntf {
    1: KSyncIntfInfo info;
}

/**
 * Definition for ksync route entry
 */
struct KSyncRouteInfo {
    1: string addr;
    2: u32 plen;
    3: u32    vrf;
    4: string operation;
    5: optional u32 nh_idx;
    6: optional u32 label;
    7: string mac;
    8: string type;
}

/**
 * @description: Trace message for ksync route entry
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh KSyncRoute {
    1: KSyncRouteInfo info;
}

/**
 * Definition for ksync mpls entry
 */
struct KSyncMplsInfo {
    1: u32 label;
    2: string operation;
    3: u32 nh;
}

/**
 * @description: Trace message for ksync mpls entry
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh KSyncMpls {
    1: KSyncMplsInfo info;
}

/**
 * Log definition for ksync component next hop entry
 */
struct KSyncComponentNHLog {
    1: u32 nh_idx;
    2: u32 label;
}

/**
 * Definition for ksync next hop entry
 */
struct KSyncNhInfo {
    1: u32  index;
    2: string operation;
    3: string type;
    4: optional u32    vrf;
    5: optional string intf_name;
    6: optional string sip;
    7: optional string dip;
    8: optional u32 sport;
    9: optional u32 dport;
   10: optional bool valid;
   11: optional bool policy;
   12: optional bool vlan_tag;
   13: optional u32 sub_nh_count;
   14: optional list<KSyncComponentNHLog> sub_nh_list;
   15: optional u32 sub_type;
   16: optional u32 out_if_index;
}

/**
 * @description: Trace message for ksync next hop entry
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh KSyncNH {
    1:KSyncNhInfo info;
}

/**
 * @description: Trace message for ksync module
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh KSyncTrace {
    1: string message;
}

/**
 * Definition for ksync vxlan entry
 */
struct KSyncVxLanInfo {
    1: u32 label;
    2: string operation;
    3: u32 nh;
}

/**
 * @description: Trace message for ksync vxlan entry
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh KSyncVxLan {
    1: KSyncVxLanInfo info;
}

/**
 * @description: Trace message for Vnsw Interface events
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh VnswIfInfoTrace {
    1: string info;
}

/**
 * Structure definition for interface in ksync db
 */
struct KSyncItfSandeshData {
    1: i32 interface_id;
    2: string interface_name;     // Key
    3: string ipv4_active;
    4: string layer3_forwarding;
    5: string l2_active;
    6: string mac;
    7: string smac;
    8: i32 flow_key_nh_id;
    9: i32 network_id;
    10: i32 os_index;
    11: string has_service_vlan;
    12: string dhcp_service;
    13: string drop_new_flows;
    14: i32 ip;
    15: string  health_check;
    16: string pbb_mac;
    17: i32 fd;       // FD opened for this
    18: string metadata_l2_active;
    19: string metadata_ip_active;
    20: string bridging;
    21: string policy_enabled;
    22: i32 rx_vlan_id;
    23: i32 tx_vlan_id;
    24: i32 vrf_id;
    25: string  persistent;
    26: string no_arp;
    27: string display_name;
    28: string flood_unknown_unicast;
    29: string learning;
    30: i32 isid;
    31: i32 pbb_cmac_vrf;
    32: string analyzer_name;
    33: string etree_leaf;
    34: string pbb_interface;
}


/**
 * @description: Request message for interface details from oper db
 * @cli_name: read oper interface list
 */
request sandesh KSyncItfReq {
}

/**
 * Response message for interface details
 */
response sandesh KSyncItfResp {
    /** List of interface information */
    1: list<KSyncItfSandeshData> KSyncitf_list;
}

/**
 * Structure definition for nexthop in ksync db
 */
struct KSyncNhListSandeshData {
    1: i32 nh_id;
    2: i32 vrf_id;
    3: i32 label;
    4: string valid;
    5: string policy;
    6: string is_mcast_nh;
    7: string defer;
    8: i32 vlan_tag;
    9: string is_local_ecmp_nh;
    10: string is_bridge;
    11: string vxlan_nh;
    12: string flood_unknown_unicast;
    13: i32 isid;
}

/**
 * @description: Request message for nexthop details from ksync db
 * @cli_name: read ksync nexthop list
 */
request sandesh KSyncNhListReq {
}

/**
 * Response message for interface details
 */
response sandesh KSyncNhListResp {
    /** List of interface information */
    1: list<KSyncNhListSandeshData> KSyncNhList_list;
}
