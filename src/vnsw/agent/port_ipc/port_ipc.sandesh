/*
 * Copyright (c) 2015 Juniper Networks, Inc. All rights reserved.
 */

/**
 *  Message definitions for port_ipc module
 *
 *  port_ipc module is responsible for handling port add/delete messages
 *
 *  port_ipc module communicates between instance service and config module
 *  in agent
 *
 */

/**
 * @description: Trace message for config add port
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh ConfigAddPortEnqueue {
    1: string op;
    2: string port_uuid;
    3: string instance_uuid;
    4: string vn_uuid;
    5: string ip_address;
    6: string system_name;
    7: string mac_address;
    8: string display_name;
    9: i16 tx_vlan_id;
    10: i16 rx_vlan_id;
    11: string vm_project_uuid;
    12: string port_type;
    13: string ip6_address;
    14: i32 version;
    15: byte vhostuser_mode;
}

/**
 * @description: Trace message for config delete port
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh ConfigDeletePortEnqueue {
    1: string op;
    2: string port_uuid;
    3: i32 version;
}

/**
 * @description: Trace message for config port info
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh ConfigPortInfo {
    1: string info;
}

/**
 * @description: Trace message for vgw config add and deletes
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh ConfigVgwEnqueue {
    1: string op;
    2: string json;
}

/**
 * @description: Trace message for adding port keyed with VM+VN
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh ConfigAddVmVnPortEnqueue {
    1: string op;
    2: string vm_uuid;
    3: string vn_uuid;
    4: string vm_name;
    5: string vm_id;
    6: string host_ifname;
    7: string vm_ifname;
    8: string vm_namespace;
    9: i32 version;
}

/**
 * @description: Trace message for deleting port keyed with VM+VN
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh ConfigDeleteVmVnPortEnqueue {
    1: string op;
    2: string vm_uuid;
    3: string vn_uuid;
    4: i32 version;
}

/**
 * @description: Trace message for config of port keyed with VM+VN
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh ConfigVmVnPortInfo {
    1: string info;
}

/**
 * @description: Introspect request for vmi-based port subscription requests
 * @cli_name: read vmi port subscription list
 */
request sandesh FetchVmiPortSubscriptionReq {
    /** Interface name */
    1: string ifname;
    /** virtual machine interface uuid */
    2: string vmi_uuid;
}

/**
 * Response for vmi-based port subscription requests
 */
struct SandeshVmiPortSubscriptionInfo {
    1: string ifname;
    2: u32 version;
    3: string vmi_uuid;
    4: string vm_uuid;
    5: string vm_name;
    6: string vn_uuid;
    7: string ip4_addr;
    8: string ip6_addr;
    9: string mac;
    10: i16 tx_vlan;
    11: i16 rx_vlan;
    12: byte vhostuser_mode;
}

/**
 * Response for vmi-based port subscription requests
 */
response sandesh SandeshVmiPortSubscriptionResp {
    1: list<SandeshVmiPortSubscriptionInfo> port_list
}

/**
 * @description: Introspect request for vmvn-based port subscription requests
 * @cli_name: read vmvn port subscription list
 */
request sandesh FetchVmVnPortSubscriptionReq {
    /** Interface name */
    1: string ifname;
    /** virtual machine interface uuid */
    2: string vm_uuid;
}

/**
 * Response for vmvn-based port subscription requests
 */
struct SandeshVmVnPortSubscriptionInfo {
    1:  string ifname;
    2:  u32 version;
    3:  string vm_uuid;
    4:  string vn_uuid;
    5:  string vmi_uuid;
    6:  string vm_name;
    7:  string vm_identifier;
    8:  string vm_ifname;
    9:  string vm_namespace;
}

/**
 * Response for vmvm-based port subscription requests
 */
response sandesh SandeshVmVnPortSubscriptionResp {
    1: list<SandeshVmVnPortSubscriptionInfo> port_list;
}


/**
 * @description: Introspect request for vmi-uuid to vm-uuid+vn-uuid tree
 * @cli_name: read vmitovmvn list
 */
request sandesh FetchVmiToVmVnUuidReq {
    /** virtual machine interface uuid */
    1: string vmi_uuid;
}

/**
 * Response for vmi-uuid to vm-uuid+vn-uuid tree request
 */
struct SandeshVmiToVmVnInfo {
    1:  string vmi_uuid;
    2:  string vm_uuid;
    3:  string vn_uuid;
    4:  string sub_interface;
    5:  u16 vlan_tag;
    6:  string parent_uuid;
    7:  string mac;
}

/**
 * Response for vmi-uuid to vm-uuid+vn-uuid tree request
 */
response sandesh SandeshVmiToVmVnResp {
    1: list<SandeshVmiToVmVnInfo> port_list;
}

/**
 *  @description: Introspect request for <vm-uuid, vn-uuid> to vmi-uuid tree
 *  @cli_name: read vmuuidvnuuid to vmiuuid list
 */
request sandesh FetchVmVnToVmiUuidReq{
    /** virtual machine interface uuid */
    1: string vm_uuid;
    /** virtual network interface uuid */
    2: string vn_uuid;
}

/**
 * Response for <vm-uuid, vn-uuid> to vmi-uuid to tree
 */
struct SandeshVmVnToVmiInfo {
    1:  string vm_uuid;
    2:  string vn_uuid;
    3:  string vmi_uuid;
}

/**
 * Response for <vm-uuid, vn-uuid> to vmi-uuid to tree
 */
response sandesh SandeshVmVnToVmiResp {
    1: list<SandeshVmVnToVmiInfo> port_list;
}
