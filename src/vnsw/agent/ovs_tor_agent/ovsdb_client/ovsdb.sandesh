/*
 * Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
 */

/**
 *  The ovsdb module supports extending a cluster to include baremetal servers
 *   and other virtual instances connected to a TOR switch supporting OVSDB protocol.
 *
 *  The ovsdb clinet module interacts with the tor switch for all ovsdb interactions
 *  It programs the differnet OVSDB tables on the TOR switch and receives the local 
 *   unicast table entries from it.
 *
 */

/****************************************************************************
  Sandesh definitions for OVSDB Client
 ****************************************************************************/

/*
 * Sandesh definition for ovsdb messages to tor switch
 */
struct SandeshOvsdbTxnStats {
    1: u64 txn_initiated;
    2: u64 txn_succeeded;
    3: u64 txn_failed;
    4: u64 txn_pending;
    5: u64 pending_send_msg;
}

/**
 * Sandesh definition for ovsdb client session
 */
struct SandeshOvsdbClientSession {
    1: string status;
    2: string remote_ip;
    3: u16 remote_port;
    4: string connection_time;
    5: SandeshOvsdbTxnStats txn_stats;
}

/**
 * Sandesh definition for ovsdb client configuration
 */
struct SandeshOvsdbClient {
    1: string protocol;
    2: string server;
    3: u16 port;
    4: string tor_service_node;
    5: i32 keepalive_interval;
    6: i32 ha_stale_route_interval;
    7: list<SandeshOvsdbClientSession> sessions;
}

/**
 * Response message for ovsdb client configuration
 */
response sandesh OvsdbClientResp {
    1: SandeshOvsdbClient client;
}

/**
 * Request message to get ovsdb client configuration
 */
request sandesh OvsdbClientReq {
}

/**
 * @description: Trace message for ovsdb client configuration request
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh OvsdbTrace {
    1: string log;
}

/**
 * @description: Error message for ovsdb client configuration request
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh OvsdbError {
    1: string error;
}

/**
 * Request message to get ovsdb table entries filtered by given key
 */
request sandesh OvsdbPageReq {
    1: string key;
}

/**
 * Sandesh definition for ovsdb table entry
 */
struct OvsdbPageRespData {
    1: string prev_page (link="OvsdbPageReq");
    2: string next_page (link="OvsdbPageReq");
    3: string first_page (link="OvsdbPageReq");
    4: string all (link="OvsdbPageReq");
    5: u32 table_size;
    6: string entries;
}

/**
 * Response message for ovsdb table entries filtered by given key
 */
response sandesh OvsdbPageResp {
    1: OvsdbPageRespData req;
}

/**
 *  Sandesh definitions for Physical Switch.
 */
struct OvsdbPhysicalSwitchEntry {
    1: string state;
    2: string name;
    3: string tunnel_ip;
}

/**
 * Response message for ovsdb physical switch list
 */
response sandesh OvsdbPhysicalSwitchResp {
    1: list<OvsdbPhysicalSwitchEntry> pswitch;
}

/**
 * Request message for ovsdb physical switch list
 */
request sandesh OvsdbPhysicalSwitchReq {
    1: string session_remote_ip;
    2: u16 session_remote_port;
}

/**
 * Sandesh definition for physical switch
 */
struct SandeshPhysicalSwitchInfo {
    1: string op;
    2: string name;
}

/**
 * @description: Trace message for ovsdb physical switch config
 * @severity: DEBUG
 */
traceobject sandesh OvsdbPhysicalSwitch {
    1: SandeshPhysicalSwitchInfo p_switch;
}

/**
 * Sandesh definitions for Physical Port.
 */
struct OvsdbPhysicalPortVlanInfo {
    1: u16 vlan;
    2: string logical_switch;
    3: i64 in_pkts;
    4: i64 in_bytes;
    5: i64 out_pkts;
    6: i64 out_bytes;
}

/**
 * Sandesh definitions for Physical Port entry
 */
struct OvsdbPhysicalPortEntry {
    1: string state;
    2: string switch_name;
    3: string name;
    4: list<OvsdbPhysicalPortVlanInfo> vlans;
}

/**
 * Response message for ovsdb physical port entry list
 */
response sandesh OvsdbPhysicalPortResp {
    1: list<OvsdbPhysicalPortEntry> port;
}

/**
 * Request message for ovsdb physical port entry list
 */
request sandesh OvsdbPhysicalPortReq {
    1: string session_remote_ip;
    2: u16 session_remote_port;
    3: string name;
}

/**
 * Sandesh definitions for Logical Switch entry
 */
struct OvsdbLogicalSwitchEntry {
    1: string state;
    2: string name;
    3: string physical_switch;
    4: i64 vxlan_id;
    5: bool vxlan_id_available;
    6: i64 ovs_vxlan_id;
    7: string tor_service_node;
    8: bool delete_in_progress;
    9: optional string message;
   10: optional i64 mcast_local_size;
   11: optional i64 ucast_local_size;
   12: optional bool mcast_remote_set;
   13: optional i64 old_mcast_remote_size;
   14: optional bool local_mac_ref_set;
}

/**
 * Response message for ovsdb logical switch entry list
 */
response sandesh OvsdbLogicalSwitchResp {
    1: list<OvsdbLogicalSwitchEntry> lswitch;
}

/**
 * Request message for ovsdb logical switch entry list
 */
request sandesh OvsdbLogicalSwitchReq {
    1: string session_remote_ip;
    2: u16 session_remote_port;
    3: string name;
    4: u32 vxlan_id;
}

/**
 * Sandesh defenition for logical switch configuration
 */
struct SandeshLogicalSwitchInfo {
    1: string op;
    2: string name;
    3: u64 vxlan;
    4: string device_name;
}

/**
 * @description: Trace message ovsdb switch configuration
 * @severity: DEBUG
 */
traceobject sandesh OvsdbLogicalSwitch {
    1: SandeshLogicalSwitchInfo l_switch;
}

/****************************************************************************
  Sandesh definitions for Vlan Port Bindings.
 ****************************************************************************/

/**
 * Sandesh definition for ovsdb port binding entry
 */
struct OvsdbVlanPortBindingEntry {
    1: string state;
    2: string physical_port;
    3: string physical_device;
    4: string logical_switch;
    5: u16 vlan;
}

/**
 * Response message for ovsdb port binding list
 */
response sandesh OvsdbVlanPortBindingResp {
    1: list<OvsdbVlanPortBindingEntry> bindings;
}

/**
 * Request message to get ovsdb port binding entry list
 */
request sandesh OvsdbVlanPortBindingReq {
    1: string session_remote_ip;
    2: u16 session_remote_port;
    3: string physical_port;
}

/****************************************************************************
  Sandesh definitions for Unicast Mac Local.
 ****************************************************************************/

/**
 * Sandesh definition for ovsdb unicast local mac entry
 */
struct OvsdbUnicastMacLocalEntry {
    1: string state;
    2: string mac;
    3: string logical_switch;
    4: string dest_ip;
}

/**
 * Response message for unicast local mac entry list
 */
response sandesh OvsdbUnicastMacLocalResp {
    1: list<OvsdbUnicastMacLocalEntry> macs;
}

/**
 * Request message to get unicast local mac entry list
 */
request sandesh OvsdbUnicastMacLocalReq {
    1: string session_remote_ip;
    2: u16 session_remote_port;
    3: string logical_switch;
    4: string mac;
}

/****************************************************************************
  Sandesh definitions for Vrf OVSDB.
 ****************************************************************************/

/**
 * Sandesh definition for ovsdb vrf entry
 */
struct OvsdbVrfEntry {
    1: string state;
    2: string logical_switch;
    3: string unicast_remote_table (link="OvsdbPageReq");
}

/**
 * Response message for ovsdb vrf entry list
 */
response sandesh OvsdbVrfResp {
    1: list<OvsdbVrfEntry> vrfs;
}

/**
 * Request message for ovsdb vrf entry list
 */
request sandesh OvsdbVrfReq {
    1: string session_remote_ip;
    2: u16 session_remote_port;
    3: string logical_switch;
    4: string mac;
}

/****************************************************************************
  Sandesh definitions for Unicast Mac Remote.
 ****************************************************************************/

/**
 * Sandesh definition for ovsdb remote unicast mac entry
 */
struct OvsdbUnicastMacRemoteEntry {
    1: string state;
    2: string mac;
    3: string logical_switch;
    4: string dest_ip;
    5: bool self_exported;
    6: u32 sequence;
    7: u32 self_sequence;
    8: bool ecmp_suppressed;
}

/**
 * Response message for ovsdb remote unicast entry list
 */
response sandesh OvsdbUnicastMacRemoteResp {
    1: list<OvsdbUnicastMacRemoteEntry> macs;
}

/**
 * Request message for ovsdb remote unicast mac entry list
 */
request sandesh OvsdbUnicastMacRemoteReq {
    1: string session_remote_ip;
    2: u16 session_remote_port;
    3: string logical_switch;
    4: string mac;
}

/**
 * Sandesh definition for remote unicast mac
 */
struct SandeshUnicastMacRemoteInfo {
    1: string op;
    2: string mac;
    3: string logical_switch;
    4: string dest_ip;
}

/**
 * @description: Trace message for ovsdb remote mac
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh OvsdbUnicastMacRemote {
    1: SandeshUnicastMacRemoteInfo ucast_remote;
}

/****************************************************************************
  Sandesh definitions for Multicast Mac Local.
 ****************************************************************************/

/**
 * Definition for ovsdb multicast local mac entry
 */
struct OvsdbMulticastMacLocalEntry {
    1: string state;
    2: string mac;
    3: string logical_switch;
    4: i64 vxlan_id;
    5: list<string> tor_ip;
}

/**
 * Response message for ovsdb multicat local mac entries list
 */
response sandesh OvsdbMulticastMacLocalResp {
    1: list<OvsdbMulticastMacLocalEntry> macs;
}

/**
 * Request message to get ovsdb multicat local mac entries list
 */
request sandesh OvsdbMulticastMacLocalReq {
    1: string session_remote_ip;
    2: u16 session_remote_port;
    3: string logical_switch;
}

/**
 *  Sandesh definitions for HA Stale Dev VN.
 */
struct OvsdbHaStaleDevVnExport {
    1: string state;
    2: string dev_name;
    3: string dev_ip;
    4: string vn_uuid;
    5: string vn_name;
    6: u64 vxlan_id;
    7: string l2_route_table (link="OvsdbPageReq");
}

/**
 *  Response message for HA Stale Dev VN list
 */
response sandesh OvsdbHaStaleDevVnExportResp {
    1: list<OvsdbHaStaleDevVnExport> dev_vn;
}

/**
 *  Request message for HA Stale Dev VN list
 */
request sandesh OvsdbHaStaleDevVnExportReq {
    1: string dev_name;
    2: optional string vn_uuid;
}

/**
 *  Sandesh definitions for HA Stale L2 Route.
 */
struct OvsdbHaStaleL2RouteExport {
    1: string state;
    2: string dev_ip;
    3: string vn_name;
    4: string vrf_name;
    5: string mac;
    6: u64 vxlan_id;
    7: string status;
}

/**
 *  Response message for HA Stale L2 route list
 */
response sandesh OvsdbHaStaleL2RouteExportResp {
    1: list<OvsdbHaStaleL2RouteExport> l2_route;
}

/**
 * Request message for HA Stale L2 route list
 */
request sandesh OvsdbHaStaleL2RouteExportReq {
    1: string dev_name;
    2: string vn_uuid;
    3: optional string mac;
}
