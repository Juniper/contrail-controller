/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

/**
 *  Message definitions for oper module
 *
 * The Oper-DB module holds operational state of different objects in Agent.
 * operational state processes the configuration and creates different tables
 * appropriate for agent.
 *
 * Some of the important tables in Oper-DB are:
 * Virtual-Network: Table of all virtual networks with uuid as key.
 * Vrf: Vrf table entries represent routing instance for a vrf.
 * Virtual-machine: Table stores all virtual-machines spawned on the compute node.
 * Interface: Table containing all interfaces in agent.
 * Other Tables for routes, nexthops, mpls label, multicast routes, vxlan
 *
 */

/**
 * Max no of sandesh connections allowed
 */
enum AgentConsts {
    MAX_SANDESH_COUNT = 256
}

request sandesh PageReq {
    /** key for oper table */
    1: string key;
}

/**
 * Structure definition for oper table entries in agent introspect
 */
struct PageReqData {
    /** Link to previous page */
    1: string prev_page (link="PageReq");
    /** Link to next page */
    2: string next_page (link="PageReq");
    /** Link to first page */
    3: string first_page (link="PageReq");
    /** Link to all pages */
    4: string all (link="PageReq");
    /** Size of oper table */
    5: u32 table_size;
    /** Number of entries in oper table */
    6: string entries;
}

/**
 * Response message fetching oper table entries
 */
response sandesh Pagination {
    /** Page data request */
    1: PageReqData req;
}

/**
 * Structure definition for service vlan entry in oper db
 */
struct ServiceVlanSandeshList {
   /** tag value for service vlan */
   1: i16 tag;
   /** Vrf name associated to service vlan */
   2: string vrf_name (link="VrfListReq");
   /** Ipv4 address associated to service vlan */
   3: string ip_addr;
   /** Ipv6 address associated to service vlan */
   6: string ip6_addr;
   /** Mpls label associated to service vlan */
   4: i16 label;
   /** Boolean value which indicates if service vlan is installed */
   5: string installed;
   /** Boolean value which indicates if v4 route is installed on service vlan
    */
   7: string v4_route_installed;
   /** Boolean value which indicates if v6 route is installed on service vlan
    */
   8: string v6_route_installed;
}

/**
 * Port mapping definition
 */
struct SandeshPortMapping {
   /** IP protocol */
   1: u16 protocol;
   /** Port number of packet */
   2: u16 port;
   /** Translated port number */
   3: u16 nat_port;
}

/**
 * Structure definition for floating ip entry in oper db
 */
struct FloatingIpSandeshList {
   /** Ip address for floating ip */
   1: string ip_addr;
   /** Vrf name associated to floating ip */
   2: string vrf_name (link="VrfListReq");
   /** Boolean value which indicates if floating ip is installed */
   3: string installed;
   /** Fixed ip address associated to floating ip */
   4: string fixed_ip;
   /** floating-ip direction */
   5: string direction;
   /** port-map enabled */
   6: bool port_map_enabled;
   /** port-mapping array */
   7: list<SandeshPortMapping> port_map;
}

/**
 * Structure definition for alias ip entry in oper db
 */
struct AliasIpSandeshList {
   /** Ip address for Alias ip */
   1: string ip_addr;
   /** Vrf name associated to alias ip */
   2: string vrf_name (link="VrfListReq");
   /** Boolean value which indicates if alias ip is installed */
   3: string installed;
}

/**
 * Structure definition for static route entry in oper db
 */
struct StaticRouteSandesh {
   /** Vrf name associated to static route */
   1: string vrf_name (link="VrfListReq");
   /** Ip address associated to static route */
   2: string ip_addr;
   /** Prefix associated to static route */
   3: i32    prefix;
   /** Mac address associated to static route */
   4: optional string mac_addr;
   /** Communities list associated to static route */
   5: optional list<string> communities;
   6: optional u32 label;
}

/**
 * Structure definition for security group list on interface
 */
struct VmIntfSgUuid {
    /** Uuid of security group associated to vm interface */
    1: string sg_uuid (link="SgListReq");
}

/**
 * Structure definition for bridge domain list on interface
 */
struct VmIntfBridgeDomainUuid {
    /** Uuid of Bridge Domain associated to vm interface */
    1: string bridge_domain_uuid (link="BridgeDomainSandeshReq");
}

struct ApplicationPolicySetLink {
    1: string application_policy_set (link="ApplicationPolicySetReq");
}

struct SecurityLoggingObjectLink {
    1: string slo_uuid (link="SLOListReq");
}

struct VmiTagData {
    1: string name;
    2: i32 id;
    3: list<ApplicationPolicySetLink> application_policy_set_list;
}

/**
 * Structure definition for interface in oper db
 */
struct ItfSandeshData {
    /** Index value for interface in oper db table */
    1: i32 index;
    /** Name of the interface */
    2: string name;
    /** Uuid of the interface */
    3: string uuid;
    /** Name of vrf associated to interface */
    4: string vrf_name (link="VrfListReq");
    /** Boolean value which indicates if interface is capable of forwarding */
    5: string active;
   /** Boolean value which indicates if interface is capable of Ipv4
    * forwarding
    */
   49: optional string ipv4_active;
   /** Boolean value which indicates if interface is capable of L2
    * forwarding
    */
   28: string l2_active;
   /** Boolean value which indicates if interface is capable of Ipv6
    * forwarding
    */
   35: optional string ip6_active;
   /** Boolean value which indicates if health check mechanism is enabled for
    * the interface
    */
   53: optional string health_check_active;
    /** Boolean value which indicates if dhcp service is enabled */
    6: string dhcp_service;
    /** Boolean value which indicates if dns service is enabled */
    7: string dns_service;
    /** Type of the interface which can be eth/vport/host */
    8: string type;
    /** Mpls label associated with interface */
    9: i32 label;
   /** Mpls l2 label associated with interface */
   25: i32 l2_label;
   /** vxlan id associated with interface */
   26: i32 vxlan_id;
   /** Uuid of virtual-network interface is part of */
   10: string vn_name (link="VnListReq");
   /** Uuid of virtual-machine */
   11: string vm_uuid (link="VmListReq");
   /** Name of virtual-machine */
   12: string vm_name;
   /** Ip address associated with interface */
   13: string ip_addr;
   /** Mac address associated with interface */
   14: string mac_addr;
   /** Boolean value which indicates if policy is enabled on interface */
   15: string policy;
   /** Floating ip list associated with interface */
   16: list<FloatingIpSandeshList> fip_list;
   /** Metadata ip address associated with interface */
   17: string mdata_ip_addr;
   /** List of service vlans associated with interface */
   18: list<ServiceVlanSandeshList> service_vlan_list;
   /** Os interface index */
   19: i32 os_ifindex;
   /** Field which indicates if fabric port is associated with interface */
   20: string fabric_port;
   /** Field which indicates if linklocal service is enabled for interface */
   21: string alloc_linklocal_ip;
   /** Name of mirror analyzer associated with interface */
   22: string analyzer_name; 
   /** Configured name for interface */
   23: string config_name;
   /** List of security-groups associated with interface */
   24: list<VmIntfSgUuid> sg_uuid_list;
   /** List of static routes associated with interface */
   27: list<StaticRouteSandesh> static_route_list;
   /** Project uuid of vm to which interface belongs */
   30: string vm_project_uuid;
   /** Admin state of interface which indicates if it is active and
    * operational
    */
   31: string admin_state;
   /** Index of Flow key nh for the interface */
   32: i32 flow_key_idx;
   /** List of allowed address pairs associated with interface */
   33: optional list<StaticRouteSandesh> allowed_address_pair_list;
   /** Ipv6 address associated with interface */
   34: optional string ip6_addr;
   /** Local preference value associated with interface */
   36: i32 local_preference;
   /** Transmit vlan id associated with interface */
   37: i16 tx_vlan_id;
   /** Receive vlan id associated with interface */
   38: i16 rx_vlan_id;
   /** Name of the parent interface */
   39: string parent_interface;
   /** Subnet value for the interface */
   40: optional string subnet;
   /** Subnet type for interface(Tor/Gateway/Tap/VMI vlan-sub-if/Remote VM) */
   41: optional string sub_type;
   /** VRF assign acl associated with interface */
   42: optional string vrf_assign_acl_uuid (link="AclReq");
   /** VMI type for interface(VM/Service Chain/Service instance/baremetal/
    * gateway/remove vm/sriov
    */
   43: optional string vmi_type;
   /** Transport type(Ethernet/Socket/PMD) */
   44: string transport;
   /** Uuid of logical interface associated with interface */
   45: string logical_interface_uuid;
   /** Boolean value which indicates if unknown unicast packets to be flooded */
   46: optional bool flood_unknown_unicast;
   /** Physical device name for the interface */
   47: string physical_device;
   /** Physical interface name for the interface */
   48: string physical_interface;
   /** List of fixed ipv4 associated with interface */
   50: list<string> fixed_ip4_list;
   /** List of fixed ipv6 associated with interface */
   51: list<string> fixed_ip6_list;
   /** List of fat flows associated with interface */
   52: list<string> fat_flow_list;
   /** Field which indicates if Metadata ip is active on interface for
    * link local services
    */
   54: optional string metadata_ip_active;
   /** Ip address of health check service associated with interface */
   55: optional string service_health_check_ip;
   /** Uuid of qos configuration associated with interface */
   56: optional string qos_config (link="AgentQosConfigSandeshReq");
   /** List of Alias ip associated with interface */
   57: list<AliasIpSandeshList> alias_ip_list;
   /** Boolean value which indicates to drop new flows for interface */
   58: bool drop_new_flows;
   /** List of bridge domain entries configured on this interface */
   59: list<VmIntfBridgeDomainUuid> bridge_domain_list;
   /** List of tags associated to VMI */
   60: list<VmiTagData> vmi_tag_list;
   /** Policy set ACL to be applied */
   61: list<string> policy_set_acl_list;
   /** List of security-logging-objects configured on this interface */
   62: list<SecurityLoggingObjectLink> slo_list;
   /** Mode of vhostuser */
   63: byte vhostuser_mode;
   /** If current VMI is SI VMI, then below field is uuid of VMI of other
       end of SI */
   64: string si_other_end_vmi;
}

/**
 * Structure definition for virtual-network ipam in oper db
 */
struct VnIpamData {
    /** Ip subnet prefix for virtual-network ipam */
    1: string ip_prefix;
    /** Ip subnet prefix length for virtual-network ipam */
    2: i32 prefix_len;
    /** Gateway address for virtual-network ipam */
    3: string gateway;
    /** Name for virtual-network ipam */
    4: string ipam_name;
    /** Field which indicates if dhcp is enabled for virtual-network ipam */
    5: string dhcp_enable;
    /** Ip address of dns server for virtual-network ipam */
    6: string dns_server;
}

/**
 * Structure definition for virtual-network ipam host routes
 */
struct VnIpamHostRoutes {
    /** Name of virtual-network ipam for host routes */
    1: string ipam_name;
    /** List of host routes associated with virtual-network ipam */
    2: list<string> host_routes;
}

/**
 * Structure definition for virtual network in oper db
 */
struct VnSandeshData {
    /** Name of virtual network */
    1: string name;
    /** Uuid of virtual network */
    2: string uuid;
    /** Uuid of acl associated with virtual network */
    3: string acl_uuid (link="AclReq");
    /** Uuid of mirror acl associated with virtual network */
    4: string mirror_acl_uuid (link="AclReq");
    /** Uuid of configured mirror acl associated with virtual network */
    5: string mirror_cfg_acl_uuid (link="AclReq");
    /** Name of vrf associated with virtual network */
    6: string vrf_name (link="VrfListReq");
    /** List of ipam data associated with virtual network */
    7: list<VnIpamData> ipam_data;
    /** List of ipam host routes associated with virtual network */
    8: list<VnIpamHostRoutes> ipam_host_routes;
    /** Boolean value which indicates if layer2 forwarding is enabled for
     * virtual network
     */
    9: bool layer2_forwarding;
    /** Boolean value which indicates if ipv4 forwarding is enabled for
     * virtual network
     */
    10: bool ipv4_forwarding;
    /** Boolean value which indicates if virtual network is active and
     * operational
     */
    11: bool admin_state;
    /** Vxlan id associated with virtual network */
    12: i32 vxlan_id;
    /** Configured vxlan id associated with virtual network */
    13: i32 config_vxlan_id;
    /** Vn id for virtual network */
    14: i32 vn_id;
    /** Boolean value which indicates if rpf checking is enabled on virtual
     * network
     */
    15: bool enable_rpf;
    /** Boolean value which indicates if bridging is enabled on virtual
     * network
     */
    16: bool bridging;
    /** Boolean value which indicates if flooding of unknown unicast packets
     * is enabled on virtual network
     */
    17: bool flood_unknown_unicast;
    /** Etree mode enabled or disabled for PBB Backbone VN */
    18: bool pbb_etree_enabled;
    /** Layer-2 control word enabled */
    19: bool layer2_control_word;
    /** List of security-logging-objects associated with virtual network */
    20: list<SecurityLoggingObjectLink> slo_list;
}

/**
 * Structure definition for security group
 */
struct SgSandeshData {
    /** Reference count for security group db entry */
    1: i32 ref_count;
    /** id for security group entry */
    2: i32 sg_id;
    /** Uuid of security group entry */
    3: string sg_uuid;
    /** Uuid of acl associated with security group */
    4: string acl_uuid (link="AclReq");
    /** Uuid of egress acl associated with security group */
    5: string egress_acl_uuid (link="AclReq");
    /** Uuid of ingress acl associated with security group */
    6: string ingress_acl_uuid (link="AclReq");
}

/**
 * Structure definition for security group list for vm
 */
struct VmSgUuid {
    /** Uuid of security group associated with virtual machine */
    1: string sg_uuid (link="SgListReq");
}

/**
 * Structure definition for virtual machine in oper db
 */
struct VmSandeshData {
    /** Uuid for virtual machine */
    1: string uuid;
    /** List of security group uuids associated with virtual machine */
    2: optional list<VmSgUuid> sg_uuid_list;
    /** Boolean value which indicates whether to drop new flows for virtual
     * machine
     */
    3: bool drop_new_flows;
}

/**
 * Structure definition for multicast route in oper db
 */
struct McastData {
    /** Type of multicast route */
    1: string type;
    /** Source ip address associated with multicast route */
    2: optional string sip;
    /** Destination ip address associated with multicast route */
    3: optional string dip;
    /** Mpls label associated with multicast route */
    4: optional i32 label;
    /** Interface associated with multicast route */
    5: optional string itf (link="ItfReq");
    /** Vlan tag associated with multicast route */
    6: optional i16 vlan_tag
}

/**
 * Structure definition for  FabricComposite next hop in oper db
 */
struct FabricCompositeData {
    /** Type of fabric composite next hop */
    1: string type;
    /** Source ip address associated with fabric composite next hop */
    2: optional string sip;
    /** Destination ip address associated with fabric composite next hop */
    3: optional string dip;
    /** List of multicast nh associated with fabric composite next hop */
    4: optional list <McastData> mc_list;  //Multicast sub nh list
}

/**
 * Structure definition for L2Composite next hop in oper db
 */
struct L2CompositeData {
    /** Type of l2 composite next hop */
    1: string type;
    /** Source ip address associated with l2 composite next hop */
    2: optional string sip;
    /** Destination ip address associated with l2 composite next hop */
    3: optional string dip;
    /** Fabric composite next hop associated with l2 composite next hop */
    4: optional FabricCompositeData fabric_comp;
    /** List of multicast next hop associated with l2 composite next hop */
    5: optional list <McastData> mc_list;
}

/**
 * Structure definition for L3Composite next hop in oper db
 */
struct L3CompositeData {
    /** Type of l3 composite next hop */
    1: string type;
    /** Source ip address associated with l3 composite next hop */
    2: optional string sip;
    /** Destination ip address associated with l3 composite next hop */
    3: optional string dip;
    /** Fabric composite next hop associated with l3 composite next hop */
    4: optional FabricCompositeData fabric_comp;
    /** List of multicast next hop associated with l3 composite next hop */
    5: optional list <McastData> mc_list;
}

/**
 * Structure definition for MulticastComposite next hop in oper db
 */
struct MulticastCompositeData {
    /** Type of multicast composite next hop */
    1: string type;
    /** Source ip address associated with multicast composite next hop */
    2: optional string sip;
    /** Destination ip address associated with multicast composite next hop */
    3: optional string dip;
    /** List of multicast next hop associated with multicast composite next
     *  hop
     */
    4: optional list <McastData> mc_list;
}

/**
 * Structure definition for MulticastFamilyComposite next hop in oper db
 */
struct MulticastFamilyCompositeData {
    /** Type of multicast family composite next hop */
    1: string type;
    /** Source ip address associated with multicast family composite next
     * hop
     */
    2: optional string sip;
    /** Destination ip address associated with multicast family composite next
     * hop
     */
    3: optional string dip;
    /** Fabric data associated with multicast family composite next hop */
    4: optional MulticastCompositeData fabric_comp;
    /** Evpn data associated with multicast family composite next hop */
    5: optional MulticastCompositeData evpn_comp;
    /** Interface data associated with multicast family composite next hop */
    6: optional MulticastCompositeData interface_comp;
}

/**
 * Structure definition for next hop in oper db
 */
struct NhSandeshData {
    /** Type of next hop */
    1: string type;
    /** Reference count for next hop db entry */
    2: i32 ref_count;
    /** Field to indicate if next hop is valid */
    3: optional string valid;
    /** Field which indicates if policy is enabled on next hop entry */
    4: optional string policy;
    /** Source ip address associated with next hop in case of tunnel nh */
    5: optional string sip;
    /** Destination ip address associated with next hop in case of tunnel nh */
    6: optional string dip;
    /** Vrf associated with next hop in case of tunnel nh */
    7: optional string vrf (link="VrfListReq");
    /** Interface name in case of interface nh */
    8: optional string itf (link="ItfReq");
    /** Mac address associated with next hop in case of interface nh */
    9: optional string mac;
   /** Source port associated with next hop in case of mirror nh */
   10: optional i32 sport;
   /** Destination port associated with next hop in case of mirror nh */
   11: optional i32 dport;
   /** Field which indicates if it is multicast nh */
   12: optional string mcast;
   /** Mpls label associated with next hop */
   13: optional i32 label;
   /** List of multicast sub nh associated with next hop */
   14: optional list <McastData> mc_list;
   /** Vlan tag associated with next hop */
   15: optional i16 vlan_tag;
   /** Type of tunnel associated with next hop(MPLSoGRE, MPLSoUDP, VXLAN) */
   16: optional string tunnel_type;
   /** Field which indicates if next hop is used for local ecmp */
   17: optional string local_ecmp;
   /** Fabric composite data associated with next hop */
   18: optional FabricCompositeData fabric_comp;
   /** L2 composite data associated with next hop */
   19: optional L2CompositeData l2_comp;
   /** L3 composite data associated with next hop */
   20: optional L3CompositeData l3_comp;
   /** Next hop index in next hop oper db table */
   21: i32 nh_index;
   /** Interface composite data associated with next hop */
   22: optional MulticastCompositeData interface_comp;
   /** Evpn composite data associated with next hop */
   23: optional MulticastCompositeData evpn_comp;
   /** Boolean value which indicates if vxlan is associated with vrf nh */
   24: optional bool vxlan_flag;
   /** Boolean value which indicates to flood unknown unicast packets for nh */
   25: optional bool flood_unknown_unicast;
   /** I-SID identifier for bridge domain */
   26: i32 isid;
   /** Is learning enabled on this nexthop */
   27: bool learning_enabled;
   /** Is the nexthop root or leaf for etree mode */
   28: bool etree_leaf;
   /** Layer 2 control word */
   29: bool layer2_control_word;
   /** PBB B-MAC for PBB NH */
   30: optional string pbb_bmac;
}

/**
 * Structure definition for NamespaceState in oper db
 */
struct NamespaceStateSandeshData {
    /** Process id of instance manager task */
    1: i32 pid;
    /** Run status of instance manager task */
    2: i32 status;
    /** Command associated with instance manager task */
    3: string cmd;
    /** Status type for instance state(starting,stopping...) */
    4: i32 status_type;
    /** Errors observed for instance manager task */
    5: optional string errors;
}

/**
 * Structure definition for PathPreference
 */
struct PathPreferenceSandeshData {
    /** Sequence number for agent path */
    1: i32 sequence;
    /** Preference value for agent path which can be Low/High */
    2: i32 preference;
    /** Boolean value which indicates if it is ecmp path */
    3: bool ecmp;
    /** Boolean value which indicates to wait for traffic before setting
     * path preference to High
     */
    4: optional bool wait_for_traffic;
    /** Dependent ip address for agent path */
    5: optional string dependent_ip;
}

/**
 * Structure definition for Path
 */
struct PathSandeshData {
    /** Next hop information for agent path */
    1: NhSandeshData nh;
    /** Mpls label for path */
    2: i32 label;
    /** Vxlan id for path */
    3: i32 vxlan_id;
    /** Peer which is originating the path */
    4: string peer;
    /** List of Destination vn for path */
    5: list<string> dest_vn_list (link="VnListReq");
    /** Field which indicates if nh is resolved for path */
    6: string unresolved;
    /** Ip address of gateway associated with path */
    7: optional string gw_ip;
    /** Vrf associated with path */
    8: optional string vrf (link="VrfListReq");
   /** List of security group associated with path */
   10: optional list<i32> sg_list;
   /** Supported tunnel encap associated with path */
   11: string supported_tunnel_type;
   /** Active tunnel encap associated with path */
   12: string active_tunnel_type;
   /** stale path */    
   13: optional bool stale;
   /** Path preference information for path */
   14: optional PathPreferenceSandeshData path_preference_data;
   /** Parent information for path */
   15: optional string info;
   /** Active mpls label associated with path */
   16: optional i32 active_label;
   /** Field which indicates whether to flood dhcp packets */
   17: optional string flood_dhcp;
   /** Name of virtual-machine associated with path */
   18: optional string vm_name;
   /** Boolean value which indicates if ecmp is suppressed for path */
   19: optional bool ecmp_suppressed;
   /** Ecmp hashing fields associated with path */
   20: optional string ecmp_hashing_fields;
   /** Communities associated with path */
   21: optional list<string> communities;
   /** path sequence number */
   22: optional u64 peer_sequence_number;
   /** PBB etree leaf configuration */
   23: bool etree_leaf;
   /** Layer 2 control word */
   24: bool layer2_control_word;
   /** Tags associated with route */
   25: optional list<i32> tag_list;
}

/**
 * Structure definition for unicast route in oper db
 */
struct RouteUcSandeshData {
    /** Source ip address of unicast route */
    1: string src_ip;
    /** Source prefix length of unicast route */
    2: i32 src_plen;
    /** Source vrf associated with unicast route */
    3: string src_vrf (link="VrfListReq");
    /** List of paths associated with unicast route */
    4: list<PathSandeshData> path_list;
    /** Boolean value which indicates if it is ipam subnet route */
    5: optional bool ipam_subnet_route;
    /** Boolean value which indicates if this is part of an IPAM subnet and
        if its a host-route */
    8: optional bool ipam_host_route;
    /** Boolean value which indicates if it is used to proxy arp requests */
    6: optional bool proxy_arp;
    /** Boolean value which indicates if it is multicast route */
    7: bool multicast;
}

/**
 * Structure definition for multicast route in oper db
 */
struct RouteMcSandeshData {
    /** Source ip address of multicast route */
    1: string src;
    /** Destination ip address of multicast route */
    2: string grp;
    /** Next hop associated with multicast route */
    3: NhSandeshData nh;
}

/**
 * Structure definition for L2 route in oper db
 */
struct RouteL2SandeshData {
    /** Mac address associated with l2 route */
    1: string mac;
    /** Source vrf associated with l2 route */
    2: string src_vrf (link="VrfListReq");
    /** List of paths associated with l2 route */
    4: list<PathSandeshData> path_list;
}

/**
 * Structure definition for evpn route in oper db
 */
struct RouteEvpnSandeshData {
    /** Mac address associated with evpn route */
    1: string mac;
    /** Source vrf associated with evpn route */
    2: string src_vrf (link="VrfListReq");
    /** Ip address associated with evpn route */
    3: string ip_addr;
    /** List of paths associated with evpn route */
    4: list<PathSandeshData> path_list;
}

/**
 * Structure definition for Vrf in oper db
 */
struct VrfSandeshData {
    /** Name of vrf */
    1: string name;
    /** Vrf index set for inet4 unicast table */
    2: i32 ucindex  (link="Inet4UcRouteReq");
    /** Vrf index set for inet4 multicast table */
    3: i32 mcindex  (link="Inet4McRouteReq");
    /** Vrf index set for l2 table */
    4: i32 l2index  (link="Layer2RouteReq");
    /** Field which indicates if it is config or gateway vrf */
    5: string source;
    /** Vrf index set for inet6 unicast table */
    6: i32 uc6index (link="Inet6UcRouteReq");
    /** Virtual network associated with vrf */
    7: string vn (link="VnListReq");
    /** Label used for route lookup on this vrf */
    8: i32 table_label;
    /** Vxlan id associated with vrf */
    9: i32 vxlan_id;
   /** Vrf index set for evpn table */
   10: i32 evpnindex  (link="EvpnRouteReq");
   /** Vrf index set for bridge table */
   11: i32 brindex  (link="BridgeRouteReq");
   /** Route distinguisher associated with vrf */
   12: string RD;
   /** MAC aging timeout */
   13: i32 mac_aging_time;
   /** Layer 2 control word */
   14: bool layer2_control_word;
   /** Forwarding VRF */
   15: string forwarding_vrf;
}

/**
 * Structure definition for mpls label in oper db
 */
struct MplsSandeshData {
    /** Mpls label value */
    1: i32 label;
    /** Label type - invalid/vport_nh/mcast_nh */
    2: string type;
    /** Next hop associated with mpls label */
    3: NhSandeshData nh;
}

/**
 * Structure definition for mirror packet
 */
struct MirrorEntrySandeshData {
    /** Count of flows referring to mirror db entry */
    1: i32 ref_count;
    /** Analyzer name associated with mirror entry */
    2: string analyzer_name;
    /** Source ip address associated with mirror entry */
    3: optional string sip;
    /** Destination ip address of analytics server associated with mirror
     * entry
     */
    4: optional string dip;
    /** vrf associated with mirror entry */
    5: optional string vrf (link="VrfListReq");
    /** Source port associated with mirror entry */
    6: optional i32 sport;
    /** Destination port associated with mirror entry */
    7: optional i32 dport;
    /** Next hop associated with mirror entry */
    8: NhSandeshData nh;
}

/**
 * @description: Request message for agent init state
 * @cli_name: read agent init state
 */
request sandesh AgentInitStateReq {
}

/**
 * Response message for agent init state
 */
response sandesh AgentInitState {
    /** Agent initialization state */
    1: string state;
}

/**
 * Structure definition for security group log
 */
struct SgObjectLogInfo {
    /** Event for security group object log - add/delete/change */
    1: string event;
    /** Uuid value of security group object log */
    2: string uuid;
    /** Security group id */
    3: u32 id;
    /** Uuid of acl associated with security group */
    4: string acl_uuid;
    /** Reference count for security group db entry */
    5: u32 ref_count;
    /** Uuid of egress acl associated with security group */
    6: string egress_acl_uuid;
    /** Uuid of ingress acl associated with security group */
    7: string ingress_acl_uuid;
}

/**
 * @description: Trace message for security group object
 * @type: Trace
 * @severity: DEBUG
 * @object: SgEntry
 */
objectlog sandesh SgObjectLog {
    /** Information of security group entry */
    1: SgObjectLogInfo sg;
}

/**
 * @description: Trace log for security group object in vrouter-agent oper DB
 * @type: Trace
 * @severity: DEBUG
 * @object: SgEntry
 */
traceobject sandesh SgObjectTrace {
    /** Information of security group entry */
    1: SgObjectLogInfo sg;
}

/**
 * @description: Request message for security group request
 * @cli_name: read oper sg list
 */
request sandesh SgListReq {
    /** Security group name */
    1: string name;
}

/**
 * Response message for security group list from oper db
 */
response sandesh SgListResp {
    /** List of security group information */
    1: list<SgSandeshData> sg_list;
}

/**
 * @description: Request message for virtual network list from oper db
 * @cli_name: read oper vn list
 */
request sandesh VnListReq {
    /** Name of virtual network */
    1: string name;
    /** Uuid of virtual network */
    2: string uuid;
    /** Vxlan id associated with virtual network */
    3: string vxlan_id;
    /** Ipam name associated with virtual network */
    4: string ipam_name;
}

/**
 * Response message for virtual network list
 */
response sandesh VnListResp {
    /** List of virtual network information */
    1: list<VnSandeshData> vn_list;
}

/**
 * @description: Request message for virtual machine list from oper db
 * @cli_name: read oper vm list
 */
request sandesh VmListReq {
    /** Uuid of virtual machine */
    1: string uuid;
}

/**
 * Response message for virtual machine list
 */
response sandesh VmListResp {
    /** List of virtual machine information */
    1: list<VmSandeshData> vm_list;
}

/**
 * @description: Request message for next hop list from oper db
 * @cli_name: read oper nexthop list
 */
request sandesh NhListReq {
    /** Type of next-hop */
    1: string type;
    /** Index of next-hop */
    2: string nh_index;
    /** Field which indicates if policy is enabled for next-hop */
    3: string policy_enabled;
}

/**
 * Response message for virtual nh list
 */
response sandesh NhListResp {
    /** List of next-hop information */
    1: list<NhSandeshData> nh_list;
}

/**
 * @description: Request message for vrf list from oper db
 * @cli_name: read oper vrf list
 */
request sandesh VrfListReq {
    /** Name of vrf */
    1: string name;
}

/**
 * Response message for vrf list
 */
response sandesh VrfListResp {
    /** List of vrf information */
    1: list<VrfSandeshData> vrf_list;
}

/**
 * @description: Request message for Inet4 Unicast routes from oper db
 * @cli_name: read oper route inet4 list
 */
request sandesh Inet4UcRouteReq {
    /** Vrf index associated with unicast route entries */
    1: i32 vrf_index = 0;
    /** Source Ip address of unicast route */
    2: string src_ip;
    /** Ip prefix length of unicast route */
    3: u16 prefix_len;
    /** Boolean value which indicates to display stale unicast routes */
    4: bool stale = 0;
}

/**
 * Response message for Inet4 Unicast routes
 */
response sandesh Inet4UcRouteResp {
    /** List of unicast route information */
    1: list<RouteUcSandeshData> route_list;
}

/**
 * @description: Request message for Inet6 Unicast routes from oper db
 * @cli_name: read oper route inet6 list
 */
request sandesh Inet6UcRouteReq {
    /** Vrf index associated with inet6 unicast route entries */
    1: i32 vrf_index = 0;
    /** Source Ip address of inet6 unicast route */
    2: string src_ip;
    /** Ip prefix length of inet6 unicast route */
    3: u16 prefix_len;
    /** Boolean value which indicates to display stale inet6 unicast routes */
    4: bool stale = 0;
}

/**
 * Response message for Inet6 Unicast routes
 */
response sandesh Inet6UcRouteResp {
    /** List of inet6 unicast route information */
    1: list<RouteUcSandeshData> route_list; // routes
}

/**
 * @description: Request message for Inet4 multicast routes from oper db
 * @cli_name: read oper route mcast list
 */
request sandesh Inet4McRouteReq {
    /** Vrf index associated with multicast route entries */
    1: i32 vrf_index = 0;
    /** Boolean value which indicates to display stale multicast routes */
    2: bool stale = 0;
}

/**
 * Response message for Inet4 multicast routes
 */
response sandesh Inet4McRouteResp {
    /** List of multicast route information */
    1: list<RouteMcSandeshData> route_list;
}

/**
 * @description: Request message for L2 routes from oper db
 * @cli_name: read oper route l2 list
 */
request sandesh Layer2RouteReq {
    /** Vrf index associated with l2 route entries */
    1: i32 vrf_index = 0;
    /** Mac address associated with l2 route */
    2: string mac;
    /** Boolean value which indicates to display stale l2 routes */
    3: bool stale = 0;
}

/**
 * Response message for L2 routes
 */
response sandesh Layer2RouteResp {
    /** List of l2 route information */
    1: list<RouteL2SandeshData> route_list;
}

/**
 * @description: Request message for bridge routes from oper db
 * @cli_name: read oper route bridge list
 */
request sandesh BridgeRouteReq {
    /** Vrf index associated with bridge route entries */
    1: i32 vrf_index = 0;
    /** Mac address associated with bridge route */
    2: string mac;
    /** Boolean value which indicates to display stale bridge routes */
    3: bool stale = 0;
}

/**
 * Response message for bridge routes
 */
response sandesh BridgeRouteResp {
    /** List of bridge route information */
    1: list<RouteL2SandeshData> route_list;
}

/**
 * @description: Request message for evpn routes from oper db
 * @cli_name: read oper route evpn list
 */
request sandesh EvpnRouteReq {
    /** Vrf index associated with evpn route entries */
    1: i32 vrf_index = 0;
    /** Mac address associated with evpn route */
    2: string mac;
    /** Boolean value which indicates to display stale evpn routes */
    3: bool stale = 0;
}

/**
 * Response message for evpn routes
 */
response sandesh EvpnRouteResp {
    /** List of bridge route information */
    1: list<RouteEvpnSandeshData> route_list;
}

/**
 * @description: Request message for interface details from oper db
 * @cli_name: read oper interface list
 */
request sandesh ItfReq {
    /** Name of the interface */
    1: string name;
    /** Type of the interface - physical,vmi... */
    2: string type;
    /** Uuid of the interface */
    3: string uuid;
    /** Virtual network associated with interface */
    4: string vn;
    /** Mac address associated with interface */
    5: string mac;
    /** Ipv4 address associated with interface */
    6: string ipv4_address;
    /** Ipv6 address associated with interface */
    7: string ipv6_address;
    /** Uuid of parent interface associated with this interface */
    8: string parent_uuid;
    /** Field which indicates if interface is capable of ip forwarding */
    9: string ip_active;
    /** Field which indicates if interface is capable of ipv6 forwarding */
    10: string ip6_active;
    /** Field which indicates if interface is capable of l2 forwarding */
    11: string l2_active;
}

/**
 * Response message for interface details
 */
response sandesh ItfResp {
    /** List of interface information */
    1: list<ItfSandeshData> itf_list;
}

/**
 * @description: Request message for mpls label list from oper db
 * @cli_name: read oper mpls list
 */
request sandesh MplsReq {
    /** Mpls label type - invalid/vport_nh/mcast_nh */
    1: string type;
    /** Mpls label value */
    2: string label;
}

/**
 * Response message for mpls label
 */
response sandesh MplsResp {
    /** List of mpls label information */
    1: list<MplsSandeshData> mpls_list;
}

/**
 * Structure definition for vrf assignment
 */
struct VrfAssignSandeshData {
    /** Type of vrf assignment - invalid/vlan */
    1: string type;
    /** Vlan tag value associated with vrf assignment */
    2: u16 vlan_tag;
    /** Interface associated with vrf assignment */
    3: string itf (link="ItfReq");
    /** Vrf associated with vrf assignment */
    4: string vrf (link="VrfListReq");
}

/**
 * @description: Request message for vrf assignment list
 * @cli_name: read oper vrfassign list
 */
request sandesh VrfAssignReq {
    /** Uuid of vrf assignment entry */
    1: string uuid;
}

/**
 * Response message for vrf assignment
 */
response sandesh VrfAssignResp {
    /** List of vrf assignment information */
    1: list<VrfAssignSandeshData> vrf_assign_list;
}

/**
 * @description: Request message for mirror entry
 * @cli_name: read oper mirror list
 */
request sandesh MirrorEntryReq {
    /** Name of analyzer to mirror entry */
    1: string analyzer_name;
}

/**
 * Response message for miror entry
 */
response sandesh MirrorEntryResp {
    /** List of mirror entry information */
    1: list<MirrorEntrySandeshData> mirror_entry_list;
}

/**
 * Response message for invalid input
 */
response sandesh ErrorResp {
    /** Response field for invalid input */
    1: string resp = "   Invalid Input !!!   ";
}

/**
 * @description: Request message for LinkLocalServiceInfo
 * @cli_name: read oper linklocalservice list
 */
request sandesh LinkLocalServiceInfo {
}

/**
 * Structure definition for Link Local Service
 */
struct LinkLocalServiceData {
    /** Name of linklocal service */
    1: string linklocal_service_name;
    /** Ip address associated with linklocal service */
    2: string linklocal_service_ip;
    /** Port associated with linklocal service */
    3: i32    linklocal_service_port;
    /** Dns server used for link local service */
    4: string ipfabric_dns_name;
    /** Ip address list of ipfabric associated with link local service */
    5: list<string> ipfabric_ip;
    /** Port of ipfabric associated with link local service */
    6: i32    ipfabric_port;
}

/**
 * Response message for LinkLocalServiceInfo
 */
response sandesh LinkLocalServiceResponse {
    /** List of linklocal service information */
    1: list<LinkLocalServiceData> service_list;
}

/**
 *  Structure range for acl properties like protocol, port
 */
struct SandeshRange {
    /** Minumum value for range */
    1: i32 min;
    /** Maximum value for range */
    2: i32 max;   
}

/** 
 *  Structure definition of acl action string
 */
struct ActionStr {
    /** Action used for acl - pass/deny... */
    1: string action;
}

/**
 * Structure definition for acl action
 */
struct AclAction {
    /** Acl id associated with acl action entry */
    1: string acl_id;
    // 2: bool sg;
    /** List of acl actions */
    3: list<ActionStr> action_l;
    /** Type of acl associated with acl action entry */
    4: string acl_type;
}

/**
 * Structure definition of Id for AclEntry
 */
struct AceId {
    /** Id used for acl entry */
    1: string id;
}

/**
 * Structure definition for AclEntry
 */
struct AclEntrySandeshData {
    /** Id for acl entry */
    1: string ace_id;
    /** Type of rule associated with acl entry - terminal/non-terminal */
    2: string rule_type;
    /** Source parameter associated with acl entry - ip/network id/sg id */
    3: string src;
    /** Destination parameter associated with acl entry - ip/network id/
     * sg id
     */
    4: string dst;
    /** List of source port range for acl entry */
    5: list <SandeshRange> src_port_l;
    /** List of destination port range for acl entry */
    6: list <SandeshRange> dst_port_l;
    /** List of protocol range for acl entry */
    7: list <SandeshRange> proto_l;
    /** List of actions associated with acl entry */
    8: list <ActionStr> action_l;
    /** Type of source parameter - ip/network/sg */
    9: string src_type;
    /** Type of destination parameter -ip/network/sg */
    10: string dst_type;
    /** Uuid of acl entry */
    11: string uuid;
    /** Match condition for new firewall rules */
    12: optional string match_condition;
}

/**
 * Structure definition for flow
 */
struct FlowSandeshData {
    /** List of acl entries associated with flow */
    1: list <AceId> ace_l;
    /** Vrf used for flow key */
    2: string vrf;
    /** Source ip address used for flow key */
    3: string src;
    /** Destination ip address used for flow key */
    4: string dst;
    /** Source port used for flow key */
    5: i32 src_port;
    /** Destination port used as flow key parameter */
    6: i32 dst_port;
    /** Protocol used as flow key parameter */
    7: i16 protocol;

    /** Boolean field which indicates if this is ingress flow */
    8: bool ingress;
    /** List of match actions used for flow entry */
    9: list <ActionStr> action_l;
    /** List of acl actions used for flow entry */
    10: list <AclAction> acl_action_l;
    /** Uuid of flow */
    11: string flow_uuid;
    /** Handle which contains flow entry index */
    12: string flow_handle;
    /** Destination vrf associated with flow entry */
    13: string dest_vrf;
    /** Source virtual network associated with flow entry */
    14: string source_vn;
    /** Destination virtual network associated with flow entry */
    15: string dest_vn;
    /** List of source security group associated with flow entry */
    16: list<u32> source_sg_id_l;
    /** List of destination security group associated with flow entry */
    17: list<u32> dest_sg_id_l;
    /** Number of packet bytes subjected to flow entry */
    18: string bytes;
    /** Number of packets subjected to flow entry */
    19: string packets;
    /** Time at which flow entry is setup */
    20: string setup_time;
    /** Time at which flow entry information is fetched */
    21: string current_time;
    /** Time at which flow entry is teardown */
    22: string teardown_time;
    /** Field which indicates if there exists corresponding reverse flow */
    23: string reverse_flow;
    /** Field which indicates if nat is used for flow match */
    24: string nat;
    /** Field which indicates if to deny the packets */
    25: string implicit_deny;
    /** Field which indicates if this is short flow */
    26: optional string short_flow;
    /** Utc time at which flow entry is setup */
    27: optional u64 setup_time_utc;
    /** Boolean field which indicates if flow is associated with
     * l3 forwarding
     */
    28: bool l3_flow;
    /** Source mac address of packet associated with flow */
    29: string smac;
    /** Destination mac address of packet associated with flow */
    30: string dmac;
    /** List of source vn associated with flow entry */
    31: list<string> source_vn_list;
    /** List of destination vn associated with flow entry */
    32: list<string> dest_vn_list;
}

/**
 * Structure definition for vxlan
 */
struct VxLanSandeshData {
    /** Label for vxlan entry */
    1: i32 vxlan_id;
    /** Next hop associated with vxlan entry */
    2: NhSandeshData nh;
    /** Name of vrf associated with vxlan entry */
    3: optional string vrf_name;
}

/**
 * Structure definition for ServiceInstance
 */
struct ServiceInstanceSandeshData {
    /** Uuid of service instance */
    1: string uuid;
    /** Type of service - load balancer/source-nat */
    2: string service_type;
    /** Type of virtualization - vm/network-namespace/vr-instance */
    3: string virtualization_type;
    /** Id of service instance */
    4: string instance_id;
    /** Uuid of vmi which is acting as left interface */
    5: string vmi_inside;
    /** Uuid of vmi which is acting as right interface */
    6: string vmi_outside;
    /** Namespace state information associated with service instance */
    7: NamespaceStateSandeshData ns_state;
}

/**
 * acl entry and associated flow count definition
 */
struct AceIdFlowCnt {
    /** Id of acl entry for flow count entry*/
    1: string ace_id;
    /** Counter for flow count entry */
    2: i32 flow_cnt;
}

/**
 * Structure definition for Acl
 */
struct AclSandeshData {
    /** Uuid of acl flow entry */
    1: string uuid (link="AclFlowReq");
    /** Boolean value which indicates if this is dynamic */
    2: bool dynamic_acl;
    /** List of acl entries information */
    3: list<AclEntrySandeshData> entries;
    /** Name of acl entry */
    4: string name;
}

/**
 * @description: Request Acl object with given uuid
 * @cli_name: read oper acl list
 */
request sandesh AclReq {
    /** Uuid of acl entry */
    1: string uuid;
}

/**
 * Response for Acl list
 */
response sandesh AclResp {
    /** List of acl entry information */
    1: list<AclSandeshData> acl_list;
}

/**
 * @description: Request message for flow_entries per acl
 * @cli_name: read oper acl flow
 */
request sandesh AclFlowReq {
    /** Uuid of flow entry per acl */
    1: string uuid;
}

request sandesh NextAclFlowReq {
    /** Iteration key for next flow acl entry */
    1: string iteration_key;
}

/**
 * Response message for flow_entry for an acl
 */
response sandesh AclFlowResp {
    /** Flow hit count for acl flow entry */
    1: i32 flow_count;
    /** Flow miss count for acl flow entry */
    2: i32 flow_miss;
    /** List of flow entry information for acl */
    3: list <FlowSandeshData> flow_entries;
    /** Iteration key for next acl flow entry */
    4: string iteration_key (link="NextAclFlowReq");
}

/**
 * @description: Get flow count for an acl with given uuid
 * @cli_name: read oper acl flowcount
 */
request sandesh AclFlowCountReq {
    /** Uuid of acl flow entry */
    1: string uuid;
}

request sandesh NextAclFlowCountReq {
    /** Iteration key for next acl flow count entry */
    1: string iteration_key;
}

/**
 * Response message for flow count for an acl
 */
response sandesh AclFlowCountResp {
    /** Flow hit count for acl flow entry */
    1: i32 flow_count;
    /** Flow miss count for acl flow entry */
    2: i32 flow_miss;
    /** List of acl ids for acl flow entry */
    3: list<AceIdFlowCnt> aceid_cnt_list;
    /** Iteration key for next acl flow count entry */
    4: string iteration_key (link="NextAclFlowCountReq");
}

// ACL Traces

/**
 * @description: Trace message for acl error
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh AclErr {
    /** Description for acl errors */
    1: string err;
}

/**
 * @description: Trace message for acl info
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh AclInfo {
    /** Description for acl information */
    1: string str;
}

/**
 * @description: Trace message for acl statistics 
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh AclAclTrace {
    /** Information for acl statistics */
    1: string info;
    /** Uuid of acl entry */
    2: string uuid;
    /** Information for acl */
    3: AclSandeshData acl;
}

/**
 * @description: Trace message for acl entry
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AclEntryTrace {
    /** Information for acl entry */
    1: AclEntrySandeshData acl_entry;
}

/**
 * @description: Trace message for Path Preference
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh PathPreferenceTrace {
    /** Vrf associated with agent path */
    1: string vrf;
    /** Ip address associated with agent path */
    2: string ip;
    /** Preference value associated with agent path - Low/High */
    3: i32 preference;
    /** Sequence number for agent path */
    4: i32 sequence;
    /** State associated with agent path */
    5: string state;
    /** Timeout value to clear stale agent paths */
    6: i32 retry_timeout;
    /** Dependent ip address for agent path */
    7: string dependent_ip;
    8: i32 flap_count;
}

/**
 * @description: Request for mirror create from agent introspect
 * @cli_name: create mirror
 */
request sandesh MirrorCreateReq {
    /** Handle for mirror create request */
    1: string handle;

    /** Vn to be applied for mirror packets */
    2: string apply_vn;

    /** Source vn for mirroring */
    3: string src_vn;
    /** Source ip prefix for mirroring */
    4: string src_ip_prefix;
    /** Source ip prefix length for mirroring */
    5: i32 src_ip_prefix_len;

    /** Destination vn for mirroring */
    6: string dst_vn;
    /** Destination ip prefix for mirroring */
    7: string dst_ip_prefix;
    /** Destination ip prefix length for mirroring */
    8: i32 dst_ip_prefix_len;

    /** Source port start value for mirroring, -1 for any */
    9: i32 start_src_port;
    /** Source port end value for mirroring, will be same as start value if not provided
     */
    10: i32 end_src_port;

    /** Destination port start value for mirroring, -1 for any */
    11: i32 start_dst_port;
    /** Destination port end value for mirroring, will be same as start value if not provided
     */
    12: i32 end_dst_port;

    /** Protocol for mirroring, -1 for any */
    13: i32 protocol;

    /** Ip address of mirror destination */
    14: string ip;
    /** Udp port of mirror destination */
    15: i32 udp_port;
    /** Time period for mirroring in seconds */
    16: i32 time_period;
    /** Vrf applied for mirror packets */
    17: string mirror_vrf;
    /** Mode of next-hop associated with mirroring - dynamic/static */
    18: optional string nhmode;
    /** Boolean field which indicates presence of juniper header in mirror packets */
    19: optional bool juniperheader;
    /** Mac address of analyzer vm for mirroring */
    20: optional string analyzer_vm_mac;
    /** Ip address of tunnel-endpoint where tunnel is terminated for mirror packets */
    21: optional string vtep_dst_ip;
    /** Mpls label for mirroring */
    22: optional i32 vni;
    /** nic assisted mirroring */
    23: optional bool nic_assisted_mirroring;
    /** nic assisted mirror vlan */
    24: optional u16 nic_assisted_mirroring_vlan;
}

/**
 * Response for mirror create
 */
response sandesh MirrorCfgResp {
    /** Response message for mirror create request */
    1: string resp = "  Success  ";
}

/**
 * @description: Request mirror delete from agent introspect
 * @cli_name: delete mirror
 */
request sandesh MirrorDeleteReq {
    /** Handle for mirror delete request */
    1: string handle;
}

/**
 * @description: Mirror cfg display
 * @cli_name: read oper mirror list
 */
request sandesh MirrorCfgDisplayReq {
    /** Handle for mirror configuration display request */
    1: string handle;
}

/**
 * @description: Request for VxLan info
 * @cli_name: read oper vxlan list
 */
request sandesh VxLanReq {
    /** Id of vxlan entry */
    1: string vxlan_id;
}

/**
 * Structure definition for VxLanConfigEntry
 */
struct VxLanConfigEntry {
    /** Id of vxlan entry */
    1: u32 vxlan_id;
    /** Uuid of vn associated with vxlan entry */
    2: string vn_uuid;
    /** vrf associated with vxlan entry */
    3: string vrf;
    /** Boolean field which indicates if to flood unknown unicast packets
     * in vxlan */
    4: bool flood_unknown_unicast;
    /** Boolean field which indicates if vxlan is active */
    5: bool active;
}

/**
 * Response message for VxLan config list from oper db
 */
response sandesh VxLanConfigResp {
    /** List of vxlan config information */
    1: list<VxLanConfigEntry> vxlan_config_entries;
}

/**
 * @description: Response for VxLan config
 * @cli_name: read oper vxlan config list
 */
request sandesh VxLanConfigReq {
    /** Id of vxlan entry */
    1: u32 vxlan_id;
    /** Vn associated with vxlan entry */
    2: string vn;
    /** Boolean field which indicates if vxlan is active */
    3: string active;
}

/**
 * Response for VxLan entry list from oper db
 */
response sandesh VxLanResp {
    /** List of vxlan information */
    1: list<VxLanSandeshData> vxlan_list;
}

/**
 * @description: Request for ServiceInstance list with given uuid
 * @cli_name: read oper si list
 */
request sandesh ServiceInstanceReq {
    /** Uuid of service instance */
    1: string uuid;
}

/**
 * Response for ServiceInstance list
 */
response sandesh ServiceInstanceResp {
    /** List of service instance information */
    1: list<ServiceInstanceSandeshData> service_instance_list;
}

/**
 * Structure definition for mirror config
 */
struct MirrorCfgSandesh {
    /** Handle for mirror config */
    1: string handle;

    /** Vn to be applied for mirror packets */
    2: string apply_vn (link="MirrorCfgVnInfoReq");

    /** Source vn for mirroring */
    3: string src_vn;
    /** Source ip prefix for mirroring */
    4: string src_ip_prefix;
    /** Source ip prefix length for mirroring */
    5: i32 src_ip_prefix_len;

    /** Destination vn for mirroring */
    6: string dst_vn;
    /** Destination ip prefix for mirroring */
    7: string dst_ip_prefix;
    /** Destination ip prefix length for mirroring */
    8: i32 dst_ip_prefix_len;

    /** Source port start value for mirroring, -1 for any */
    9: i32 start_src_port;
    /** Source port end value for mirroring, will be same as start value if
     * not provided
     */
    10: i32 end_src_port;

    /** Destination port start value for mirroring, -1 for any */
    11: i32 start_dst_port;
    /** Destination port end value for mirroring, will be same as start value if
     * not provided
     */
    12: i32 end_dst_port;

    /** Protocol for mirroring, -1 for any */
    13: i32 protocol;

    /** Ip address of mirror destination */
    14: string ip;
    /** Udp port of mirror destination */
    15: i32 udp_port;
    /** Time period for mirroring in seconds */
    16: i32 time_period;
    /** Vrf applied for mirror packets */
    17: string mirror_vrf;
}

/**
 * Response for mirror cfg display
 */
response sandesh MirrorCfgDisplayResp {
    /** List of mirror config information */
    1: list<MirrorCfgSandesh> mcfg_l;
}

/**
 * @description: Request for mirror cfg vn info
 * @cli_name: read oper mirror vn list
 */
request sandesh MirrorCfgVnInfoReq {
    /** Name of vn associated with mirror config */
    1: string vn_name;
}

/**
 * Structure definition for vn and attached acl
 */
struct VnAclInfo {
    /** Name of vn associated with mirror acl */
    1: string vn_name;
    /** Uuid of vn associated with mirror acl */
    2: string vn_uuid;
    /** Uuid of dynamic acl for mirroring */
    3: string dyn_acl_uuid;
    /** Number of vn acl entries for mirroring */
    4: i32 num_of_entries;
}

/**
 * Response for mirror cfg vn info
 */
response sandesh MirrorCfgVnInfoResp {
    /** List of vn acl information in mirror config */
    1: list <VnAclInfo> vn_acl_info_l;
}

/**
 * Structure definition for interface mirror config
 */
struct IntfMirrorCfgSandesh {
    /** Handle for interface mirror config */
    1: string handle;
    /** Uuid of interface associated with mirror config */
    2: optional string intf_uuid;
    /** Name of interface associated with mirror config */
    3: optional string intf_name;
    /** Ip address of mirror destination in mirror config */
    4: optional string ip;
    /** Udp port of mirror destination in mirror config */
    5: optional i32 udp_port;
    /** Time period for mirroring in seconds in mirror config */
    6: optional i32 time_period;
    /** Vrf applied for mirror packets in mirror config */
    7: optional string mirror_vrf;
}

/**
 * @description: Request for Interface Mirror Create
 * @cli_name: create mirror interface
 */
request sandesh IntfMirrorCreateReq {
    /** Handle for interface mirror create request */
    1: string handle;
    /** Uuid of interface for mirroring */
    2: optional string intf_uuid;
    /** Name of interface for mirroring */
    3: optional string intf_name;
    /** Ip address of mirror destination */
    4: optional string ip;
    /** Udp port of mirror destination */
    5: optional i32 udp_port;
    /** Time period for mirroring in seconds */
    6: optional i32 time_period;
    /** Vrf applied for mirror packets */
    7: optional string mirror_vrf;
    /** Mode of next-hop associated with mirroring - dynamic/static */
    8: optional string nhmode;
    /** Boolean field which indicates presence of juniper header in mirror packets */
    9: optional bool juniperheader;
   /** Mac address of analyzer vm for mirroring */
   10: optional string analyzer_vm_mac;
   /** Ip address of tunnel-endpoint where tunnel is terminated for mirror packets */
   11: optional string vtep_dst_ip;
   /** Mpls label for mirroring */
   12: optional i32 vni;
   /** nic assisted mirroring */
   13: optional bool nic_assisted_mirroring;
   /** nic assisted mirror vlan */
   14: optional u16 nic_assisted_mirroring_vlan;
}

/**
 * @description: Request for Interface Mirror Delete
 * @cli_name: delete mirror interface
 */
request sandesh IntfMirrorDeleteReq {
    /** Handle for interface mirror delete request */
    1: string handle;
}

/**
 * @description: Request for Interface Mirror Config
 * @cli_name: read oper mirror interface list
 */
request sandesh IntfMirrorCfgDisplayReq {
    /** Handle for interface mirror display request */
    1: string handle;
}

/**
 * Response for Interface Mirror list
 */
response sandesh IntfMirrorCfgDisplayResp {
    /** List of interface mirror config information */
    1: list <IntfMirrorCfgSandesh> imcfg_l;
}

/**
 * @description: Trace message for interface mirror
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh IntfMirror {
    /** Type of operation for interface mirroring */
    1: string operation;
    /** Interface mirror configuration information */
    2: IntfMirrorCfgSandesh ms;
}

/**
 * @description: Trace message for unresolved next hop
 * @type: Trace
 * @severity: DEBUG
 */
response sandesh UnresolvedNHResp {
    /** List of next-hop information for unresolved nh */
    1: list<NhSandeshData> nh_list;
}

/**
 * Response message for unresolved route list
 */
response sandesh UnresolvedRouteResp {
    /** List of unicast route information for unresolved route */
    1: list<RouteUcSandeshData> route_list;
}

/**
 * @description: Request message for unresolved nexthop list
 * @cli_name: read oper unresolvednh list
 */
request sandesh UnresolvedNH {
}

/**
 * @description: Get unresolved routes
 * @cli_name: read oper unresolvedroute list
 */
request sandesh UnresolvedRoute {
}

/**
 * Definition for agent log level
 */
enum AgentLogEvent {
    ADD,
    DELETE,
    CHANGE,
    DELETE_TRIGGER,
    RESYNC
}

/**
 * Structure definition for vm object log
 */
struct VmObjectLogInfo {
    /** Type of event for vm object log - add/delete/change */
    1: string event;
    /** Uuid of vm entry for vm object log */
    2: string uuid (key="ObjectVMTable")
    /** List of security group uuids associated with vm entry */
    3: optional list<string> sg_uuid_list;
    /** Reference count for vm db entry for vm object log */
    4: i32 ref_count;
}

/**
 * @description: log message for vm object
 * @type: Trace
 * @severity: DEBUG
 * @object: VmEntry
 */
objectlog sandesh VmObjectLog {
    /** Vm information used for vm object log */
    1: VmObjectLogInfo vm;
}

/**
 * Structure definition for vn ipam log
 */
struct VnObjectLogIpam {
    /** Ip prefix associated with vn ipam */
    1: string ip_prefix;
    /** Ip prefix length associated with vn ipam */
    2: i32    prefix_len;
    /** Gateway ip address associated with vn ipam */
    3: optional string gateway_ip;
    /** Name of ipam associated with vn */
    4: string ipam_name;
    /** Field which indicates if dhcp is enabled for virtual-network ipam */
    5: string dhcp_enable;
    /** Ip address of dns server for virtual-network ipam */
    6: string dns_server;
}

/**
 * Structure definition for vn object log
 */
struct VnObjectLogInfo {
    /** Type of event for vm object log - add/delete/change */
    1: string event;
    /** Uuid of virtual network */
    2: string uuid;
    /** Name of virtual network */
    3: string name (key="ObjectVNTable")
    /** Uuid of acl associated with virtual network */
    4: optional string acl_uuid;
    /** Uuid of mirror acl associated with virtual network */
    5: optional string mirror_acl_uuid;
    /** Uuid of configured mirror acl associated with virtual network */
    6: optional string mirror_cfg_acl_uuid;
    /** Name of vrf associated with virtual network */
    7: optional string vrf;
    /** List of ipam data associated with virtual network */
    8: optional list <VnObjectLogIpam> ipam_list;
    /** Boolean value which indicates if ipv4 forwarding is enabled for
     * virtual network
     */
    9: optional bool ipv4_forwarding;
    /** Boolean value which indicates if bridging is enabled on virtual
     * network
     */
   10: optional bool bridging;
    /** Boolean value which indicates if virtual network is active and
     * operational
     */
   11: optional bool admin_state;
}

/**
 * @description: Statistics for vn object log
 * @type: Trace
 * @severity: DEBUG
 * @object: VnEntry
 */
objectlog sandesh VnObjectLog {
    /** Vn information for vn object log */
    1: VnObjectLogInfo vn;
}

/**
 * Structure definition for vrf object log
 */
struct VrfObjectLogInfo {
    /** Type of event for vrf object log - add/delete/change */
    1: string event;
    /** Name of vrf */
    2: string name (key="ObjectRoutingInstance")
    /** Index value of vrf db entry */
    4: optional i32 index;
}

/**
 * @description: log for vrf
 * @type: Trace
 * @severity: DEBUG
 * @object: VrfEntry
 */
objectlog sandesh VrfObjectLog {
    /** Vrf information for vrf object log */
    1: VrfObjectLogInfo vrf;
}

/**
 * Structure definition for floating ip
 */
struct FloatingIPInfo {
    /** Vrf name associated to floating ip */
    1:string vrf_name;
    /** Ip address for floating ip */
    2:string ip_address;
}

/**
 * Structure definition for interface
 */
struct InterfaceInfo {
    /** Name of the interface */
    1: string name;
    /** Index value for interface in oper db table */
    2: i32 index;
    /** Type of event for interface trace log - add/delete/change */
    3: string op;
    /** Virtual-machine associated with interface */
    4: optional string vm;
    /** Virtual-network associated with interface */
    5: optional string vn;
    /** Vrf associated with interface */
    6: optional string vrf;
    /** Ip address associated with interface */
    7: optional string ip_address;
    /** Mac address associated with interface */
    8: optional string mac;
    /** Floating ip list associated with interface */
    9: optional list<FloatingIPInfo> fip;
   /** vxlan id associated with interface */
   10: optional i32 vxlan_id;
   /** Project of vm to which interface belongs */
   11: string vm_project;
}

/**
 * Structure definition for route
 */
struct RouteInfo {
    /** Source ip address of route */
    1: string ip;
    /** Vrf associated with route */
    2: string vrf;
    /** Type of event for route trace log - add/delete */
    3: string op;
    /** Type of next hop associated with route - interface/tunnel/... */
    4: optional string nh_type;
    /** Name of peer associated with route path */
    5: optional string peer;
    /** Tunnel destination ip for tunnel next hop associated with route */
    6: optional string dest_server;
    /** Tunnel destination vrf for tunnel next hop associated with route */
    7: optional string dest_server_vrf;
    /** Name of interface for interface next hop associated with route */
    8: optional string intf;
    /** Mac address of route */
    9: optional string mac;
   /** Boolean value if route path is ecmp */
   10: bool ecmp;
}

/**
 * @description: log for interface
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh OperInterface {
    /** Interface information for trace log */
    1: InterfaceInfo intf_info;
}

/**
 * Structure definition for oper config for an object
 */
struct OperConfigInfo {
    /** Name of logical interface */
    1: string name;
    /** Uuid of logical interface */
    2: string uuid;
    /** Message for vlan-tag existence of logical interface */
    3: string message;
}

/**
 * @description: log for oper config
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh OperConfig {
    /** Information of oper config for logical interface */
    1: OperConfigInfo info;
}

/**
 * @description: log for oper route
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh OperRoute {
    /** Information of oper route */
    1: RouteInfo route_info;
}

/**
 * Structure definition for mpls log
 */
struct MplsObjectLogInfo {
    /** Type of event for mpls log - add/delete/change */
    1: string event;
    /** Type of mpls label - invalid/vport_nh/mcast_nh */
    2: string type;
    /** Mpls label value */
    3: i32 label;
    /** Type of next-hop associated with mpls label - interface/vlan/composite */
    4: optional string nh_type;
    /** Type of interface associated with mpls label - vmi/invalid */
    5: optional string intf_type;
    /** Uuid of interface associated with mpls label */
    6: optional string intf_uuid;
    /** Name of interface associated with mpls label */
    7: optional string intf_name;
    /** Field which indicates if policy is enabled for mpls label */
    8: optional string policy;
    /** Vlan tag associated with mpls label for vlan nh */
    9: optional i16 vlan_tag;
}

/**
 * @description: log for mpls
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh OperMpls {
    /** Information of mpls object */
    1: MplsObjectLogInfo mpls;
}

/**
 * Structure definition for ComponentNHLog
 */
struct ComponentNHLogInfo {
    /** Type of component nh - tunnel/interface/vlan/composite */
    1: string type;
    /** Mpls label associated with component nh */
    2: i32    label;
    /** Interface name associated with component interface nh */
    3: optional string intf_name;
    /** Tunnel destination ip associated with component tunnel nh */
    4: optional string server_ip;
    /** Index for component nh entry */
    5: i32 component_nh_id;
}

/**
 * Structure definition for next hop log
 */
struct NextHopObjectLogInfo {
    /** Type of event for next hop log - add/delete/change/resync */
    1: string event;
    /** Type of next hop */
    2: string type;
    /** Field which indicates if policy is enabled on next hop entry */
    3: string policy;
    /** Field which indicates if next hop is valid */
    4: string valid;
    /** Source ip address associated with next hop in case of tunnel nh */
    5: optional string source_ip;
    /** Destination ip address associated with next hop in case of tunnel nh */
    6: optional string dest_ip;
    /** Vrf associated with next hop in case of tunnel nh */
    7: optional string vrf;
    /** Source port associated with next hop in case of mirror nh */
    8: optional i16 source_port;
    /** Destination port associated with next hop in case of mirror nh */
    9: optional i16 dest_port;
    /** Type of interface associated with next hop - vmi/vhost/... */
    10: optional string intf_type;
    /** Uuid of interface associated with next hop */
    11: optional string intf_uuid;
    /** Name of interface associated with next hop */
    12: optional string intf_name;
    /** Vlan tag associated with next hop */
    13: optional i16 vlan_tag;
    /** Field which indicates if next hop is resolved */
    14: optional string resolved;
    /** Mac address associated with next hop, can be arpnh mac/vlan mac/
     * intf mac
     */
    15: optional string mac;
    /** List of component nh log info */
    16: optional list<ComponentNHLogInfo> nh_list;
    /** Type of tunnel for next-hop - MPLSoGRE, MPLSoUDP, VXLAN */
    17: optional string tunnel_type;
    /** Index of next hop entry */
    18: i32 id;
}

/**
 * Structure definition for vxlan object log
 */
struct VxLanObjectLogInfo {
    /** Type of event for vxlan log - add/delete/change */
    1: string event;
    /** Label for vxlan entry */
    2: i32 vxlan_id;
    /** Type of nh associated with vxlan entry - vrf/invalid */
    3: optional string nh_type;
    /** /** Name of vrf associated with vxlan entry */
    4: optional string vrf_name;
}

/**
 * @description: log for vxlan
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh OperVxLan {
    /** Information of vxlan object */
    1: VxLanObjectLogInfo VxLan;
}

/**
 * @description: log for next hop
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh OperNextHop {
    /** Information of nexthop object */
    1: NextHopObjectLogInfo nh;
}

/**
 * @description: Log for agent route
 * @type: systemlog
 * @severity: DEBUG
 * @cause: Normal operation
 */
trace sandesh AgentRouteLog {
    /** Message for agent route */
    1: string message;
    /** Ip address of agent route */
    2: string ip;
    3: "in VRF";
    /** Vrf associated with agent route */
    4: string vrf;
    /** Peer associated with agent route */
    5: string peer;
}

/**
 * @description: log for multicast info 
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh MulticastInfo {
    /** Message for multicast entry */
    1: string message;
    /** Information for multicast entry */
    2: string info;
}

/**
 * @description: log for multicast
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh MulticastLog {
    /** Message for multicast entry */
    1: string message;
    /** Name of vrf associated with multicast entry */
    2: string vrf_name;
    /** Destination ip address of multicast entry */
    3: string dst_ip;
    /** Label of multicast entry */
    4: i32 label;   
}

/**
 * @description: Trace meassage for oper module
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh OperTrace {
    /** Message for oper module */
    1: string message;
}

/**
 * @description: Trace meassage for vrf
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh OperVrf {
    /** message for vrf entry */
    1: string message;
    /** Name of vrf entry */
    2: string vrf_name;
}

/**
 * @description: Trace message for mpls
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh MplsTrace {
    /** Message for mpls change */
    1: string message;
    /** Mpls label value */
    2: u32 label;
}

/**
 * @description: Trace meassage for agent route walk
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentRouteWalkerTrace {
    1: string name;
    2: string message;
    6: string vrf_name;
    8: string route_table_type;
}

/**
 * @description: Trace meassage for agent db walk
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh AgentDBWalkLog {
    /** Message for agent db walk */
    1: string message;
    /** Name of agent db table */
    2: string table_name;
    3: "walkid:";
    /** Id of walk for agent db table */
    4: i32 walk_id;
    5: "peer:";
    /** Peer associated with agent db walk */
    6: string peer;
    /** Field which indicates route state for db walk */
    7: string add_del_route;
    8: "pending walks:";
    /** Value for pending walks for agent db table */
    9: i32 pending_walks;
}

/**
 * @description: system log for interface configuration
 * @type: systemlog
 * @severity: DEBUG
 * @cause: Normal operation
 */
systemlog sandesh InterfaceConfiguration {
    1: string f1;
    /** Uuid of interface */
    2: string interface_uuid;
    3: string f2
    /** Uuid of interface configuration */
    4: string config_uuid;
    5: string f3
    /** Uuid of interface compute */
    6: string compute_uuid;
}

/**
 * @description: system log for logical interface configuration
 * @type: systemlog
 * @severity: DEBUG
 * @cause: Normal operation
 */
systemlog sandesh LogicalInterfaceConfiguration {
    1: string msg1;
    /** Name of logical interface */
    2: string logical_interface_name;
    3: string msg2
    /** Name of physical interface */
    4: string physical_interface_name;
    5: string msg3
    /** Name of prouter */
    6: string prouter_name;
}

/**
 * @description: system log for flow
 * @type: systemlog
 * @severity: DEBUG
 * @cause: Normal operation
 */
systemlog sandesh FlowLog {
    /** Index of flow entry */
    1: u32 flow_id;
    /** Message for flow entry */
    2: string message;
}

/**
 * @description: system log for agent route walk
 * @type: systemlog
 * @severity: DEBUG
 * @cause: Normal operation
 */
systemlog sandesh AgentRouteWalkerLog {
    1: "walkid:";
    /** Walk id for agent route walker */
    2: u32 walk_id;
    3: "walktype:";
    /** Message for agent route walker */
    5: string message;
    /** Name of vrf for agent route walker */
    6: string vrf_name;
}

/**
 * @description: system log for global vrouter config
 * @type: systemlog
 * @severity: DEBUG
 * @cause: Normal operation
 */
systemlog sandesh GlobalVrouterLog {
    /** Message for global vrouter configuration */
    1: string message;
}

/**
 * @description: Trace message for security group
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh OperSg {
    /** Message for security group db entry */
    1: string message;
    /** Uuid of security group db entry */
    2: string uuid;
}

/**
 * @description: Trace message for BridgeDomain
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh OperBridgeDomain {
    /** Message for bridge-domain db entry */
    1: string message;
    /** Uuid of bridge-domain db entry */
    2: string uuid;
    /** ISID of bridge-domain db entry */
    3: i32 isid;
}

/**
 * @description: Trace message for Tags
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh OperTag {
    /** Message for Tag db entry */
    1: string message;
    /** Uuid of Tag db entry */
    2: string uuid;
}

/**
 * Structure definition for PhysicalDevice
 */
struct SandeshDevice {
    /** Uuid of physical device */
    1: string uuid;
    /** Name of fabric queue associated with physical device */
    2: string fq_name;
    /** Name of physical device */
    3: string name;
    /** Vendor name of physical device */
    4: string vendor;
    /** Ip address associated with physical device */
    5: string ip_address;
    /** Management protocol associated with physical device */
    6: string management_protocol;
    /** Boolean value which indicates mastership role for physical device */
    7: bool master;
}

/**
 * Response message for physical device list
 */
response sandesh SandeshDeviceListResp {
    /** List of physical device information */
    1: list<SandeshDevice> device_list;
}

/**
 * @description: Request physical device list
 * @cli_name: read oper physicaldevice list
 */
request sandesh SandeshDeviceReq {
    /** Name of physical device */
    1: string name;
}

/**
 * Structure definition for physical device object log
 */
struct DeviceObjectLogInfo {
    /** Type of event for physical device - add/delete/change */
    1: string event;
    /** Uuid of physical device */
    2: string uuid;
    /** Reference count for physical device db entry */
    3: i32 ref_count;
    /** Name of fabric queue associated with physical device */
    4: string fq_name;
    /** Name of physical device */
    5: string name;
    /** Name of vendor for physical device */
    6: string vendor;
    /** Ip address associated with physical device */
    7: string ip_address;
    /** Management protocol associated with physical device */
    8: string management_protocol;
}

/**
 * @description: System log for physical device
 * @type: Trace
 * @severity: DEBUG
 * @object: PhysicalDevice
 */
objectlog sandesh DeviceObjectLog {
    /** Physical device information */
    1: DeviceObjectLogInfo device;
}

/**
 * Structure definition for PhysicalDeviceVn
 * Oper table
 */
struct SandeshPhysicalDeviceVn {
    /** Uuid of physical device */
    1: string device_uuid;
    /** Uuid of virtual-network */
    2: string vn_uuid;
    /** Name of physical device */
    3: string device;
    /** Name of Virtual network */
    4: string vn;
    /** Id of vxlan associated with physical device vn */
    5: i32 vxlan_id;
}

/**
 * Response messdage for physical device vn list
 */
response sandesh SandeshPhysicalDeviceVnListResp {
    /** List of physical device vn information */
    1: list<SandeshPhysicalDeviceVn> port_list;
}

/**
 * @description: Request physical device vn list
 * @cli_name: read oper physicaldevvn list
 */
request sandesh SandeshPhysicalDeviceVnReq {
    /** Name of physical device */
    1: string device;
    /** Name of virtual network */
    2: string vn;
}

/**
 * Structure definition for physical device vn config tree
 */
struct SandeshConfigPhysicalDeviceVn {
    /** Uuid of physical device */
    1: string device_uuid;
    /** Uuid of virtual network */
    2: string vn_uuid;
    /** Uuid of virtual machine interface */
    3: string vmi_uuid;
    /** Id of vxlan associated with physical device vn config */
    4: i32 vxlan_id;
    /** Id of virtual network entry */
    5: i32 vn_id;
}

/**
 * Response for physical device vn config list
 */
response sandesh SandeshConfigPhysicalDeviceVnListResp {
    /** List of physical device config information */
    1: list<SandeshConfigPhysicalDeviceVn> device_vn_list;
}

/**
 * @description: Request for physical device vn list config
 * @cli_name: read oper physicaldevvnconfig list
 */
request sandesh SandeshConfigPhysicalDeviceVnReq {
    /** Name of physical device */
    1: string device;
}

/**
 * Structure definition for physical device vn log
 */
struct PhysicalDeviceVnObjectLogInfo {
    /** Type of event for physical device vn - add/del/change */
    1: string event;
    /** Uuid of physical device */
    2: string device_uuid;
    /** Uuid of virtual network */
    3: string vn_uuid;
    /** Reference count of physical device vn db entry */
    4: i32 ref_count;
    /** Name of physical device */
    5: string device;
    /** Name of virtual network */
    6: string vn;
}

/**
 * @description: log message for physical device vn
 * @type: Trace
 * @severity: DEBUG
 * @object: PhysicalDeviceVn
 */
objectlog sandesh PhysicalDeviceVnObjectLog {
    /** Information of physical device vn object */
    1: PhysicalDeviceVnObjectLogInfo port;
}

/**
 * Structure definition for vrouter limits
 */
struct VrouterObjectLimits {
    /** Maximum mpls labels supported by vrouter */
    1: u32 max_labels;
    /** Maximum next hops supported by vrouter */
    2: u32 max_nexthops;
    /** Maximum interfaces supported by vrouter */
    3: u32 max_interfaces;
    /** Maximum vrfs supported by vrouter */
    4: u32 max_vrfs;
    /** Maximum mirror entries supported by vrouter */
    5: u32 max_mirror_entries;
    /** Maximum bridge entries supported by vrouter */
    6: u32 vrouter_max_bridge_entries;
    /** Maximum overflow bridge entries supported by vrouter */
    7: u32 vrouter_max_oflow_bridge_entries;
    /** Version information of vrouter build */
    8: string vrouter_build_info;
    /** Maximum flow entries supported by vrouter */
    9: u32 vrouter_max_flow_entries;
   /*** Maximum of overflow entries supported by vrouter */
   10: u32 vrouter_max_oflow_entries;
   /*** vrouter priority tagging*/
   11: bool vrouter_priority_tagging;
}

/**
 * @description: Request vrouter limit parameters
 * @cli_name: read oper vrouter object limits
 */
request sandesh VrouterObjectLimitsReq {
}

/**
 * Response for vrouter limits
 */
response sandesh VrouterObjectLimitsResp {
    /** Information of vrouter object limits */
    1: VrouterObjectLimits vrouter_object_limit;
}

/**
 * Structure definition for IFMapDependency NodeEvent policies
 */
struct IFMapReactEvent {
    /** Event for ifmap node */
    1: string event;
    /** List of reactors for ifmap node */
    2: list<string> reactors;
}

/**
 * Structure definition for if map node policies
 */
struct IFMapNodePolicy {
    /** Name of ifmap node */
    1: string node;
    /** List of ifmap reactor events */
    2: list<IFMapReactEvent> events;
}

/**
 * Response for if map node policy list
 */
response sandesh IFMapNodePolicyResp {
    /** List of ifmap node policy information */
    1: list<IFMapNodePolicy> policies;
}

/**
 * @description: Request message for if map node policy list
 * @cli_name: read oper ifnode policy list
 */
request sandesh IFMapNodePolicyReq {
    /** Name of ifmap node */
    1: string node;
}

/**
 * @description: Trace message for health check
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh HealthCheckTrace {
    /** Log message for health check trace */
    1: string log;
}

/**
 * Structure definition for health check instance
 */
struct HealthCheckInstanceSandeshData {
    /** Vm interface associated with health check instance */
    1: string vm_interface (link="ItfReq");
    /** Metadata ip address associated with health check instance */
    2: string metadata_ip;
    /** Service ip address associated with health check instance */
    3: string service_ip;
    /** Ip address of health check instance */
    4: string health_check_ip;
    /** Boolean field which indicates if health check instance is active */
    5: bool active;
    /** Boolean field which indicates if health check instance is running */
    6: bool running;
    /** Time of last update by health check instance */
    7: string last_update_time;
}

/**
 * Structure definition for health check service
 */
struct HealthCheckSandeshData {
    /** Uuid of health check service */
    1: string uuid;
    /** Name of health check service */
    2: string name;
    /** Type of health check service - segment/end-to-end/link-local */
    13: string service_type;
    /** Type of monitor for health check service - HTTP,... */
    3: string monitor_type;
    /** Http method for health check service */
    4: string http_method;
    /** Url path for health check service */
    5: string url_path;
    /** Expected codes for health check service */
    6: string expected_codes;
    /** Delay for health check service */
    7: u32 delay;
    /** Delay in usecs for health check service */
    11: u64 delay_usecs;
    /** Timeout for health check service */
    8: u32 timeout;
    /** Timeout in usecs for health check service */
    12: u64 timeout_usecs;
    /** Maximum retries for health check service */
    9: u32 max_retries;
    /** List of health check instance information */
    10: list<HealthCheckInstanceSandeshData> inst_list;
}

/**
 * @description: Request health check instances list
 * @cli_name: read oper healthcheck instances list
 */
request sandesh HealthCheckSandeshReq {
    /** Uuid of health check instance */
    1: string uuid;
}

/**
 * Health check list
 */
response sandesh HealthCheckSandeshResp {
    /** List of heal check instance information */
    1: list<HealthCheckSandeshData> hc_list;
}

/**
 * Structure definition for bgp as a service
 */
struct BgpAsAServiceSandeshList {
   /** Peer ip address associated with bgp as a service */
   1: string vm_bgp_peer_ip;
   /** Vm nat source port for bgp as a service */
   2: i32 vm_nat_source_port;
   /** Uuid of vmi for bgp as a service */
   3: string vmi_uuid (link="ItfReq");
}

/**
 * @description: Request bgp service list
 * @cli_name: read oper bgp service list
 */
request sandesh BgpAsAServiceSandeshReq {
}

/**
 * bgp service list response message
 */
response sandesh BgpAsAServiceSandeshResp {
    /** List of bgp as a service information */
    1: list<BgpAsAServiceSandeshList> bgp_as_a_service_list;
}

/**
 * @description: Trace message for bgp service
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh BgpAsAServiceTrace {
    /** Message for bgp service object */
    1: string message;
}

/**
 * @description: Trace message for InstanceManager
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh InstanceManagerTrace {
    /** Message for instance manager object */
    1: string message;
}

/**
 * Structure definition for QOS queue
 */
struct QosQueueSandeshData {
    /** Uuid of qos queue */
    1: string uuid;
    /** Name of qos queue */
    2: string name;
    /** Id of qos queue db entry */
    3: u32 id;
}

/**
 * @description: Sandesh request for QOS queue
 * @cli_name: read oper qosqueue list
 */
request sandesh QosQueueSandeshReq {
    /** Uuid of qos queue */
    1: string uuid;
    /** Name of qos queue */
    2: string name;
    /** Id of qos queue db entry */
    3: string id;
}

/**
 * Sandesh response for QOS queue
 */
response sandesh QosQueueSandeshResp {
    /** List of qos queue information */
    1: list<QosQueueSandeshData> qos_queue_list;
}

/**
 * Structure definition for QOS config
 */
struct ForwardingClassSandeshData {
    /** Uuid of qos config */
    1: string uuid;
    /** Id of qos config db entry */
    2: u32 id;
    /** Name of qos config */
    3: string name;
    /** Dscp value in qos config */
    4: u32 dscp;
    /** Vlan priority value in qos config */
    5: u32 vlan_priority;
    /** Mpls expansion in qos config */
    6: u32 mpls_exp;
    /** Qos queue associated with qos config */
    7: u32 qos_queue (link="QosQueueSandeshReq");
}

/**
 * @description: Request QOS forwarding class list
 * @cli_name: read oper fc list
 */
request sandesh ForwardingClassSandeshReq {
    /** Uuid of qos config instance */
    1: string uuid;
    /** Name of qos config instance */
    2: string name;
    /** Id of qos config instance db entry */
    3: string id;
}
/**
 * Response to QOS config request
 */
response sandesh ForwardingClassSandeshResp {
    /** List of qos config information */
    1: list<ForwardingClassSandeshData> fc_list;
}

/**
 * Structure definition of QOS forwarding class
 */
struct QosForwardingClassSandeshPair {
    /** Qos value associated with qos forwarding class */
    1: u32 qos_value;
    /** Id of qos forwarding class */
    2: u32 forwarding_class_id (link="ForwardingClassSandeshReq");
}
/**
 * Structure definition for QOS config
 */
struct AgentQosConfigSandeshData {
    /** Uuid of qos config */
    1: string uuid;
    /** Name of qos config */
    2: string name;
    /** Type of qos config - vhost/fabric/default */
    3: string type;
    /** Id of qos config db entry */
    4: u32 id;
    /** List of dscp pair in qos config */
    5: optional list<QosForwardingClassSandeshPair> dscp_list;
    /** List of vlan priority in qos config */
    6: optional list<QosForwardingClassSandeshPair> vlan_priority_list;
    /** List of mpls expansion in qos config */
    7: optional list<QosForwardingClassSandeshPair> mpls_exp_list;
    /** Default forwarding class in qos config */
    8: u32 default_forwarding_class;
    /** Boolean value which indicates if qos config is trusted */
    9: bool trusted;
}

/**
 * @description: Request QOS config instances list
 * @cli_name: read oper qc instances list
 */
request sandesh AgentQosConfigSandeshReq {
    /** Uuid of qos config instance */
    1: string uuid;
    /** Name of qos config instance */
    2: string name;
    /** Id of qos config instance db entry */
    3: string id;
}

/**
 * Response to QOS config request
 */
response sandesh AgentQosConfigSandeshResp {
    /** List of qos config instance information */
    1: list<AgentQosConfigSandeshData> qc_list;
}

struct BridgeDomainSandeshData {
    /** UUID of bridge domain instance */
    1: string uuid;
    /** Name of the bridge domain instance */
    2: string name;
    /** ISID configured on bridge domain */
    3: i32 isid;
    /** VN bridge domain belong to */
    4: string vn (link="VnListReq");
    /** VRF correspoding to this bridge domain */
    5: string vrf (link="VrfListReq");
    /** Learning enabled on this bridge */
    6: string learning_enabled;
    /** PBB etree mode enabled */
    7: string pbb_etree_enabled;
}

/**
 * @description: Request message to get operdb bridge domain list
 * @cli_name: read oper bridgedoamin list
 */
request sandesh BridgeDomainSandeshReq {
    /** UUID of bridge domain to query for */
    1: string uuid;
    /** Name for bridge domain to query for */
    2: string name;
}

response sandesh BridgeDomainSandeshResp {
    /** List of bridge domain */
    1: list<BridgeDomainSandeshData> bd_list;
}

struct TagSandeshData {
    /** UUID of Tag instance */
    1: string uuid;
    /** Name of the Tag instance */
    2: string name;
    /** ID of Tag */
    3: u32 id;
    /** List of application policy set associated to this tag */
    4: list<ApplicationPolicySetLink> application_policy_set_list;
}

/**
 * @description: Request message to get operdb Tag list
 * @cli_name: read oper bridgedoamin list
 */
request sandesh TagSandeshReq {
    /** UUID of Tag to query for */
    1: string uuid;
    /** Name for Tag to query for */
    2: string name;
}

response sandesh TagSandeshResp {
    /** List of Tag */
    1: list<TagSandeshData> tag_list;
}

/**
 * @description: Request to add QOS queue
 * @cli_name: create qos queue
 */
request sandesh AddQosQueue {
    /** Uuid of qos queue to be added */
    1: u32 uuid;
    /** Name of qos queue to be added */
    2: string name;
    /** Id of qos queue to be added */
    3: u16 id;
}

/**
 * @description: Request to delete QOS queue
 * @cli_name: delete qos queue
 */
request sandesh DeleteQosQueue {
    /** Uuid of qos queue to be deleted */
    1: u32 uuid;
}

/**
 * @description: Request to add QOS forwarding class
 * @cli_name: create forwarding class
 */
request sandesh AddForwardingClass {
    /** Uuid of qos forwarding class to be added */
    1: u32 uuid;
    /** Id of qos forwarding class to be added */
    2: u32 id;
    /** Dscp value of qos forwarding class to be added */
    3: u32 dscp_value;
    /** Mpls expansion of qos forwarding class to be added */
    4: u32 mpls_exp;
    /** Vlan priority of qos forwarding class to be added */
    5: u32 vlan_priority;
    /** Uuid of qos queue associated with forwarding class to be added */
    6: u32 qos_queue_uuid;
    /** Name of qos forwarding class to be added */
    7: string name;
}

/**
 * @description: Request to delete QOS forwarding class
 * @cli_name: delete forwarding class
 */
request sandesh DeleteForwardingClass {
    /** Uuid of qos forwarding class to be deleted */
    1: u32 uuid;
}

/**
 * @description: Request to add QOS config
 * @cli_name: create qos config
 */
request sandesh AddQosConfig {
    /** Uuid of qos config to be added */
    1: u32 uuid;
    /** Name of qos config to be added */
    2: string name;
    /** Type of qos config to be added - vhost/fabric/default */
    3: string type;
    /** Dscp value of qos config to be added */
    4: u32 dscp;
    /** Dscp forwarding class id of qos config to be added */
    5: u32 dscp_forwarding_class_id;
    /** Vlan priority of qos config to be added */
    6: u32 vlan_priority;
    /** Vlan priority forwarding class id of qos config to be added */
    7: u32 vlan_priority_forwarding_class_id;
    /** Mpls expansion of qos config to be added */
    8: u32 mpls_exp;
    /** Mpls expansion forwarding class id of qos config to be added */
    9: u32 mpls_exp_forwarding_class_id;
}

/**
 * @description: Request to delete QOS config
 * @cli_name: delete qos config
 */
request sandesh DeleteQosConfig {
    /** Uuid of qos config to be deleted */
    1: u32 uuid;
}

/**
 * @description: Request to add vmi QOS config
 * @cli_name: create vmi qos config
 */
request sandesh AddVmiQosConfig {
    /** Uuid of vmi associated with qos config to be added */
    1: string vmi_uuid;
    /** Uuid of qos config to be added */
    2: string qos_config_uuid;
}

/**
 * Response to QOS config
 */
response sandesh QosResponse {
    /** Response message for qos config */
    1: string resp;
}

struct PolicyLinkData {
    1: string firewall_policy (link="AclReq");
}

struct ApplicationPolicySetSandeshData {
    /** Name of application policy set */
    1: string name;
    /** Uuid of application policy set*/
    2: string uuid;
    /** Uuid of acl associated with policy set */
    3: list<PolicyLinkData> firewall_policy_list;
    /** Is application policy set global */
    4: bool is_global;
}

/**
 * @description: Request message for Application policy set
 * @cli_name: read oper application policy set list
 */
request sandesh ApplicationPolicySetReq {
    /** Uuid of virtual network */
    1: string uuid;
    /** Name of virtual network */
    2: string name;
}

/**
 * Response message for virtual network list
 */
response sandesh ApplicationPolicySetResp {
    /** List of virtual network information */
    1: list<ApplicationPolicySetSandeshData> application_policy_set_list;
}

/**
 * Structure definition for security-logging-object in oper db
 */
struct SLOSandeshRule {
    /** Uuid of security-logging-object Rule */
    1: string uuid;
    /** Rate of security-logging-object Rule */
    2: i32 rate;
}

/**
 * Structure definition for security-logging-object in oper db
 */
struct SLOSandeshData {
    /** Name of security-logging-object */
    1: string name;
    /** Uuid of security-logging-object  */
    2: string uuid;
    /** Rate of security-logging-object  */
    3: i32 rate;
    /** List of security-logging-object rules */
    4: list<SLOSandeshRule> rules;
}

/**
 * Request message for Security-logging-object list from oper db
 */
request sandesh SLOListReq {
    /** Uuid of security-logging-object  */
    1: string uuid;
}

/**
 * Response message for security logging object list
 */
response sandesh SLOListResp {
    /** List of security logging objects information */
    1: list<SLOSandeshData> slo_list;
}
