/*
 * Copyright (c) 2015 Juniper Networks, Inc. All rights reserved.
 */

/**
 *  Message definitions for agent profile .
 *
 * This module is responsible for generating debug information for agent
 * by querying oper db table
 *
 */

/**
 * Structure definition for oper db table
 */
struct SandeshDBTableStats {
    /** Name of oper db table */
    1: string table;
    /** Count for db entries in table */
    2: u64 db_entry_count;
    /** Count for table walks */
    3: u64 walker_count;
    /** Count for table enqueues */
    4: u64 enqueue_count;
    /** Count for table inputs */
    5: u64 input_count;
    /** Count for table notifies */
    6: u64 notify_count;
}

/**
 * Structure definition for oper db table entry
 */

struct SandeshDBTableStatsInfo {
    /** Index for oper db table entry statistics */
    1: u16 index;
    /** Time at which entry details are fetched */
    2: string time_str;
    /** List of db table stats */
    3: list<SandeshDBTableStats> stats;
}

/**
 * Response message for db table entry list
 */
response sandesh SandeshDBTableStatsList {
    /** List of db table entry stats */
    1: list<SandeshDBTableStatsInfo> stats;
}

/**
 * @description: Request messae to get db table entry list from agent introspect
 * @cli_name: read dbtable stats list
 */
request sandesh SandeshDBTableStatsRequest {
    /** Data sent for last 'count' entries */
    1: u16 count;
}

/**
 * Structure definition for flow statistics
 */
struct SandeshFlowStats {
    /** Index for Flow statistics */
    1:  u16 index;
    /** Time at which details are fetched */
    2:  string time_str;
    /** Count for entries in Flow Table */
    4:  u64 flow_count;
    /** Count for Flow Table additions */
    5:  u64 add_count;
    /** Count for Flow Table deletions */
    7:  u64 del_count;
    /** Count for Flow revaluations which are triggered by db entry change */
    8:  u64 reval_count;
    /** Count for Flow recomputations due to change in route */
    9:  u64 recompute_count;
   /** Count for Vrouter responses of flow events */
   10:  u64 vrouter_responses;
   /** Count for Vrouter errors */
   11:  u64 vrouter_error;
   /** Count for Flow Audits */
   12:  u64 audit_count;
}

/**
 * Response message for flow stats list
 */
response sandesh SandeshFlowStatsList {
    /** List of Flow Statistics */
    1: list<SandeshFlowStats> stats;
}

/**
 * @description: Request message to get agent flow stats
 * @cli_name: read flow stats
 */
request sandesh SandeshFlowStatsRequest {
    /** Data to be sent for last 'count' entries */
    1: u16 count;
}

/**
 * Structure definition for summary of flow work-queues
 */
struct SandeshFlowQueueSummaryOneInfo {
    /** Count for entries in Flow Work-Queue */
    1: u64 qcount;
    /** Count for dequeue of entries in Flow Work-Queue */
    2: u64 dequeues;
    /** Count for enqueue of entries in Flow Work-Queue */
    3: u64 enqueues;
    /** Maximum size observed for Flow Work-Queue */
    4: u64 max_qlen;
    /** Number of times queue task is scheduled */
    5: u64 starts;
    /** Cumulative time expired for queue task execution */
    6: u64 busy_msec;
}

/**
 * Structure definition for Flow Tokens
 */
struct SandeshFlowTokenInfo {
    /** Count for flow add tokens */
    1: i32 add_tokens;
    /** Count for flow add token full failures */
    2: u64 add_token_full;
    /** Count for flow add token restarts */
    3: u64 add_token_restarts;
    /** Count for ksync tokens */
    4: i32 ksync_tokens;
    /** Count for ksync token full failures */
    5: u64 ksync_token_full;
    /** Count for ksync token restarts */
    6: u64 ksync_token_restarts;
    /** Count for flow update tokens */
    7: i32 update_tokens;
    /** Count for flow update token full failures */
    8: u64 update_token_full;
    /** Count for flow update token restarts */
    9: u64 update_token_restarts;
   /** Count for flow delete tokens */
   10: i32 delete_tokens;
   /** Count for flow delete token full failures */
   11: u64 delete_token_full;
   /** Count for flow delete token restarts */
   12: u64 delete_token_restarts;
}

/**
 * Structure definition for Flow Queue Summary
 */
struct SandeshFlowQueueSummaryInfo {
    /** Index for flow queue summary information */
    1: u32 index;
    /** Time at which flow queue details are fetched */
    2: string time_str;
    /** Flow token statistics */
    3: SandeshFlowTokenInfo token_stats;
    /** Summary information for flow event queue */
    4: SandeshFlowQueueSummaryOneInfo flow_event_queue;
    /** Summary information for flow token queue */
    5: SandeshFlowQueueSummaryOneInfo flow_tokenless_queue;
    /** Summary information for flow ksync queue */
    6: SandeshFlowQueueSummaryOneInfo flow_ksync_queue;
    /** Summary information for flow delete queue */
    7: SandeshFlowQueueSummaryOneInfo flow_delete_queue;
    /** Summary information for flow update queue */
    8: SandeshFlowQueueSummaryOneInfo flow_update_queue;
    /** Summary information for flow management queue */
    9: SandeshFlowQueueSummaryOneInfo flow_mgmt_queue;
   /** Summary information for flow statistics queue */
   10: SandeshFlowQueueSummaryOneInfo flow_stats_queue;
   /** Summary information for packet handler queue */
   11: SandeshFlowQueueSummaryOneInfo pkt_handler_queue;
   /** Summary information for ksync transmit queue */
   12: SandeshFlowQueueSummaryOneInfo ksync_tx_queue;
   /** Summary information for ksync receive queue */
   13: SandeshFlowQueueSummaryOneInfo ksync_rx_queue;
}

/**
 * Response message for flow-queue summary counts
 */
response sandesh SandeshFlowQueueSummaryResp {
    /** List of flow-queue summary information */
    1: list<SandeshFlowQueueSummaryInfo> summary;
}

/**
 * @description: Request message to get summary of flow work-queues
 * @cli_name: read flowqueue list
 */
request sandesh SandeshFlowQueueSummaryRequest{
}

/**
 * Structure definition for agent profile task
 */
struct TaskProfileStats {
    /** Index for agent profile task statistics */
    1:  u16 index;
    /** Count for enqueued flow tasks */
    2:  i32 flow_run;
    /** Count for waiting flow tasks */
    3:  i32 flow_wait;
    /** Count for deferred flow tasks */
    4:  i32 flow_defer;
    /** Count for enqueued db tasks */
    5:  i32 db_run;
    /** Count for waiting db tasks */
    6:  i32 db_wait;
    /** Count for deferred db tasks */
    7:  i32 db_defer;
    /** Count for enqueued statistics tasks */
    8:  i32 stats_run;
    /** Count for waiting statistics tasks */
    9:  i32 stats_wait;
    /** Count for deferred statistics tasks */
   10:  i32 stats_defer;
    /** Count for enqueued io tasks */
   11:  i32 io_run;
    /** Count for waiting io tasks */
   12:  i32 io_wait;
    /** Count for deferred io tasks */
   13:  i32 io_defer;
    /** Count for enqueued flow response tasks */
   14:  i32 flow_resp_run;
    /** Count for waiting flow response tasks */
   15:  i32 flow_resp_wait;
    /** Count for deferred flow response tasks */
   16:  i32 flow_resp_defer;
    /** Count for enqueued sandesh receive tasks */
   17:  i32 sandesh_rcv_run;
    /** Count for waiting sandesh receive tasks */
   18:  i32 sandesh_rcv_wait;
    /** Count for deferred sandesh receive tasks */
   19:  i32 sandesh_rcv_defer;
    /** Count for enqueued bgp config tasks */
   20:  i32 bgp_cfg_run;
    /** Count for waiting bgp config tasks */
   21:  i32 bgp_cfg_wait;
    /** Count for deferred bgp config tasks */
   22:  i32 bgp_cfg_defer;
    /** Count for enqueued ksync tasks */
   23:  i32 ksync_run;
    /** Count for waiting ksync tasks */
   24:  i32 ksync_wait;
    /** Count for deferred ksync tasks */
   25:  i32 ksync_defer;
}

/**
 * Response message for profile task
 */
response sandesh SandeshTaskStatsList {
    /** List of profile task statistics */
    1: list<TaskProfileStats> stats;
}

/**
 * @description: Request message to get profile task stats from agent introspect
 * @cli_name: read profile task list
 */
request sandesh SandeshTaskStatsRequest {
    /** Data sent for last 'count' entries */
    1: u16 count;
}

/**
 * Response message for SandeshSetTaskProfileParams
 * Shows modified parameters
 */
response sandesh SandeshProfileParams {
    /** Maximum time a task can take to execute
     */
    1: u16    task_exec_threshold;
    /** Maximum time a task can take to move to run state from the time it is enqueued
     */
    2: u16    task_schedule_threshold;
    /** Value for queue delay measure */
    3: bool   measure_queue_run_time;
}

/**
 * @description: Request to tune to task-profiling parameters
 * @cli_name: create task profile parameters
 */
request sandesh SandeshSetProfileParams {
    /** Maximum time a task can take to execute
     */
    1: u16    task_exec_threshold;
    /** Maximum time a task can take to move to run state from the time it is enqueued
     */
    2: u16    task_schedule_threshold;
    /** Value for queue delay measure */
    3: bool   measure_queue_run_time;
}
