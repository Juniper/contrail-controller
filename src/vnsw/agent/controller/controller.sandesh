/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

/**
 *  Message definitions for agent controller module.
 *
 * This module manages the communication between Agent and Contrail-Controller
 * Agent connects to two Contrail-Controllers for redundancy.
 * 2 XMPP channels are opened with each of the Contrail-Controllers.
 *
 * A Configuration Channel to send IFMap configuration to agent.
 * A Route Channel to exchange routes between agent and Contrail-Controller.
 *
 */

/**
 * Sandesh definition for transmit and receive xmpp sessions to controller.
 */
struct ControllerProtoStats {
    /** Number of Controller sessions open */
    1: u32 open;
    /** Number of Controller sessions running keepalive */
    2: u32 keepalive;
    /** Number of Controller  sessions update */
    3: u32 update;
    /** Number of Controller sessions close */
    4: u32 close;
}

struct ControllerEndOfConfigStats {
    /** last config receive time */
    1: string last_config_receive_time;
    /** config update receive */
    2: string inactivity_detected_time;
    /** config enqueued for process */
    3: string end_of_config_processed_time;
    /** EOC observed because of fallback or inactivity */
    4: string end_of_config_reason;
    /** start time */
    5: string last_start_time;
    6: bool running;
}

struct ConfigCleanupStats {
    1: string last_start_time;
    2: u64 cleanup_sequence_number;
    3: bool running;
}

struct ConfigStats {
    1: ControllerEndOfConfigStats end_of_config_stats;
    2: ConfigCleanupStats config_cleanup_stats;
}

struct ControllerEndOfRibRxStats {
    /** End of rib sent time */
    1: string end_of_rib_rx_time;
    /** EOR observed because of fallback or eor seen */
    2: string end_of_rib_reason;
    /** start time */
    3: string last_start_time;
    4: bool running;
}

struct ControllerEndOfRibTxStats {
    /** End of rib sent time */
    1: string end_of_rib_tx_time;
    /** last route publish time */
    2: string last_route_published_time;
    /** EOR observed because of fallback or inactivity */
    3: string end_of_rib_reason;
    /** start time */
    4: string last_start_time;
    5: bool running;
}

struct ControllerEndOfRibStats {
    /** End of rib tx */
    1: ControllerEndOfRibTxStats tx;
    /** End of rib rx */
    2: ControllerEndOfRibRxStats rx;
}

/**
 * Sandesh definition for xmpp channel between agent and controller
 */
struct AgentXmppData {
    /** controller IP Address */
    1: string controller_ip;
    /** Xmpp channel established or down */
    2: string state;
    /** Controller Peer name */
    3: string peer_name;
    /** Peer Address */
    4: string peer_address;
    /** Config controller */
    5: optional string cfg_controller;
    /** Multicast controller */
    6: optional string mcast_controller;
    /** Last state  of xmpp states */
    7: string last_state;
    /** Last event of xmpp states */
    8: string last_event;
    /** Last state at of xmpp states  */
    9: string last_state_at;
    /**  Xmpp Channel Flap count */
    10: u32 flap_count;
    /** Xmpp last time Flap */
    11: string flap_time;
    /** DSCP value used in IP header of XMPP packets */
    19: u16 dscp;
    /** Xmpp receive protocol stats */
    12: ControllerProtoStats rx_proto_stats;
    /** Xmpp transmit protocol stats */
    13: ControllerProtoStats tx_proto_stats;
    /** Xmpp authentication type */
    14: string xmpp_auth_type;
    /** Unicast sequence number */
    15: u64 sequence_number;
    /** channel ready state time */
    16: string last_ready_time;
    /** End of rib */
    17: ControllerEndOfRibStats end_of_rib_stats;
    /** End of config */
    18: ConfigStats config_stats;
}

/**
 *  Sandesh definition for xmpp channel between agent and dns service
 */
struct AgentXmppDnsData {
    /** Dns Controller IP */
    1: string dns_controller_ip;
    /** Xmpp channel state established or down */
    2: string state;
    /** Peer name */
    3: string peer_name;
    /** Peer Address */
    4: string peer_address;
    /** Last state  of xmpp states  */
    5: string last_state;
    /** Last event of xmpp states */
    6: string last_event;
    /** Last state at of xmpp states  */
    7: string last_state_at;
    /**  Xmpp Channel Flap count */
    8: u32 flap_count;
    /** Xmpp last time Flap */
    9: string flap_time;
    /** DSCP value used in IP header of XMPP packets */
    19: u16 dscp;
    /** Xmpp dns receive protocol stats */
    10: ControllerProtoStats rx_proto_stats;
    /** Xmpp transmit protocol stats */
    11: ControllerProtoStats tx_proto_stats;
    /** Xmpp authentication type */
    12: string xmpp_auth_type;
}

/**
 * Sandesh definition for xmpp connection in use by agent.
 */
struct AgentXmppInUseConnections {
    /** In Use Controller IP */
    1: string controller_ip;
    /** In Use Controller Port */
    2: u32 controller_port;
}

/**
 * Sandesh definition for randomized statically configured Xmpp
 * server list.
 */
struct AgentRandomizedXmppConfigConnections {
    1: string controller_ip;
    2: u32 controller_port;
}

/**
 * @description: Trace message for agent xmpp connection with controller
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentXmppTrace {
    /**  Controller peer */
    1: string peer;
    /** vrf name */
    2: string vrf;
    /** xmpp event */
    3: string event;
}

/**
 * @description: Trace message for vmi subscribe to controller for route export
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentXmppIFMapVmExportTrace {
    /** Virtual-machine name */
    1: string vm;
    /** Virtual-machine-interface name */
    2: string vmi;
    /** xmpp event for route export */
    3: string event;
}

/**
 * @description: Trace message for config seq number for controller subscription
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentXmppIFMapSeqTrace {
    /** Xmpp Server index */
    1: u32 xmpp_server_index,
    /** Config sequence number for controller subscription */
    2: u64 new_seq_num;
    /** Xmpp event for subscription */
    3: string event;
}

/**
 * @description: Trace message for Routing instance for the route ,route-prefix
 * and next hop information exported to controller
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentXmppRouteExport {
    /** Controller Peer */
    1: string peer;
    /** route exported in vrf */
    2: string vrf;
    /** IP address exported */
    3: string ip;
    /** is route associated */
    4: bool associate;
    /** mpls label */
    5: u32 label;
}

/**
 * @description: Trace message for Routing instance for the route ,route-prefix
 * next hop information , vxlan id , gateway etc imported from controller
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentXmppRouteImport {
    /** Controllet Peer */
    1: string peer;
    /** route imported in vrf */
    2: string vrf;
    /** IP address imported */
    3: string ip;
    /** IP prefix len */
    4: u16 plen;
    /** Nexthop for the route imported */
    5: string nexthop;
    /** Mpls label */
    6: u32 label;
    /** virtual-network name */
    7: string vn;
}

/**
 * @description: Trace message for multicast subscription for vrf from agent to controller
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentXmppMcastSubscribe {
    /** Multicast Peer */
    1: string peer;
    /** Multicast subscription for the Vrf made from agent */
    2: string vrf;
    /** Multicast Source */
    3: string source;
    /** Multicast group */
    4: string group;
}

/**
 * @description: Trace message for agent xmpp session
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentXmppSession {
    /** Controller Peer */
    1: string peer;
    /** Xmpp Session event */
    2: string event;
    /** Xmpp Session tree builder */
    3: string tree_builder;
    /** Xmmp Session message */
    4: string message;
}

/**
 * @description: Trace message for agent discovery connection
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh AgentXmppDiscoveryConnection {
    /** Xmpp Agent discovery message */
    1: string message;
    2: "index =";
    /** index */
    3: u16 index;
    4: "server =";
    /** Xmpp discovery server */
    5: string server;
    /** Xmpp channel discovery data */
    6: string data;
}

/**
 * @description: Trace message for agent for traversing multiple controller peers
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh AgentXmppWalker {
    /** Xmpp Walker message */
    1: string message;
    /** Controller node name */
    2: string node_name;
    /** Controller Peer */
    3: string peer;
}

/**
 * @description: Trace message for agent xmpp connection timer
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh AgentXmppTimer {
    /** Xmpp timer operation for the connection established from agent */
    1: string operation;
    /** Xmpp timer name for the connection established from agent */
    2: string timer_name;
    /** Xmpp channel */
    3: string channel;
}

/**
 * @description: Trace message for agent xmpp connection from particular controller
 * @type: Trace
 * @severity: DEBUG
 */
trace sandesh AgentXmppMessage {
    1: "Control-node: ";
    /** IP address received from controller */
    2: string IPaddress;
    /** Port received from controller */
    3: "Port";
    4: i32 port;
    /** Size of the message */
    5: "Size: ";
    6: i32 size;
    /** Packet from controller */
    7: "Packet: ";
    8: string packet;
    9: "$";
}

/**
 * @description: Request message for agent xmpp connection status request with controller
 * @cli_name: read xmpp connection status
 */
request sandesh AgentXmppConnectionStatusReq {
}

/**
 * Response for agent xmpp connection status
 */
response sandesh AgentXmppConnectionStatus {
    /** Connection status response from agent */
    1: list<AgentXmppData>peer;
}

/**
 * @description: Request message for agent dns subscription status
 * @cli_name: read dns connection status
 */
request sandesh AgentDnsXmppConnectionStatusReq {
}

/**
 * Response message for agent dns subscription status
 */
response sandesh AgentDnsXmppConnectionStatus {
    /** Dns Xmmp Connection status response from agent */
    1: list<AgentXmppDnsData>peer;
}
