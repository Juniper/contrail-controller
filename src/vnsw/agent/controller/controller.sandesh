/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

/**
 *  Message definitions for agent controller module.
 *
 * This module manages the communication between Agent and Contrail-Controller
 * 2 XMPP channels are opened with each of the Contrail-Controllers.
 *
 * A Configuration Channel to send IFMap configuration to agent.
 * A Route Channelto exchange routes between agent and Contrail-Controller.
 *
 */

/**
 * Statistics of session to controller.
 */
struct ControllerProtoStats {
    1: u32 open;
    2: u32 keepalive;
    3: u32 update;
    4: u32 close;
}

/**
 * Statistics representing xmpp connection to controller.
 */
struct AgentXmppData {
    1: string controller_ip;
    2: string state;
    3: string peer_name;
    4: string peer_address;
    5: optional string cfg_controller;
    6: optional string mcast_controller;
    7: string last_state;
    8: string last_event;
    9: string last_state_at;
    10: u32 flap_count;
    11: string flap_time;
    12: ControllerProtoStats rx_proto_stats;
    13: ControllerProtoStats tx_proto_stats;
    14: string xmpp_auth_type;
}

/**
 * Statistics representing dns subscription for agent.
 */
struct AgentXmppDnsData {
    1: string dns_controller_ip;
    2: string state;
    3: string peer_name;
    4: string peer_address;
    5: string last_state;
    6: string last_event;
    7: string last_state_at;
    8: u32 flap_count;
    9: string flap_time;
    10: ControllerProtoStats rx_proto_stats;
    11: ControllerProtoStats tx_proto_stats;
    12: string xmpp_auth_type;
}

/**
 * Statistics representing discovery service subscription for agent.
 */
struct AgentDiscoveryXmppConnections {
    1: string discovery_controller_ip;
    2: u32 discovery_controller_port;
}

/**
 * Statistics representing xmpp connection in use by agent.
 */
struct AgentXmppInUseConnections {
    1: string controller_ip;
    2: u32 controller_port;
}

/**
 * @description: Trace message for agent xmpp connection with controller
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentXmppTrace {
    1: string peer;
    2: string vrf;
    3: string event;
}

/**
 * @description: Trace message for vmi add/del on the compute node 
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentXmppIFMapVmExportTrace {
    1: string vm;
    2: string vmi;
    3: string event;
}

/**
 * @description: trace message for xmpp channel seq number
 * @type: Trace
 * @severity: DEBUG
 */
traceobject sandesh AgentXmppIFMapSeqTrace {
    1: u32 xmpp_server_index,
    2: u64 new_seq_num;
    3: string event;
}

/**
 * @description: Trace message for Routing instance for the route ,route-prefix
 * and next hop information exported to controller
 * @type: Trace
 * @severity: DEBUG
 */

traceobject sandesh AgentXmppRouteExport {
    1: string peer;
    2: string vrf;
    3: string ip;
    4: bool associate;
    5: u32 label;
}

/**
 * @description: Trace message for Routing instance for the route ,route-prefix
 * next hop information , vxlan id , gateway etc imported from controller
 * @type: Trace
 * @severity: DEBUG
 */

traceobject sandesh AgentXmppRouteImport {
    1: string peer;
    2: string vrf;
    3: string ip;
    4: u16 plen;
    5: string nexthop;
    6: u32 label;
    7: string vn;
}

/**
 * @description: Trace message for multicast subscription for agent
 * @type: Trace
 * @severity: DEBUG
 */

traceobject sandesh AgentXmppMcastSubscribe {
    1: string peer;
    2: string vrf;
    3: string source;
    4: string group;
}

/**
 * @description: Trace message for agent xmpp session
 * @type: Trace
 * @severity: DEBUG
 */

traceobject sandesh AgentXmppSession {
    1: string peer;
    2: string event;
    3: string tree_builder;
    4: string message;
}

/**
 * @description: Trace message for agent discovery connection
 * @type: Trace
 * @severity: DEBUG
 */

trace sandesh AgentXmppDiscoveryConnection {
    1: string message;
    2: "index =";
    3: u16 index;
    4: "server =";
    5: string server;
    6: string data;
}

/**
 * @description: Trace message for agent for traversing multiple controllers
 * @type: Trace
 * @severity: DEBUG
 */

trace sandesh AgentXmppWalker {
    1: string message;
    2: string node_name;
    3: string peer;
}

/**
 * @description: Trace message for agent xmpp connection timer
 * @type: Trace
 * @severity: DEBUG
 */

trace sandesh AgentXmppTimer {
    1: string operation;
    2: string timer_name;
    3: string channel;
}

trace sandesh AgentXmppMessage {
    1: "Received xmpp message from: ";
    2: string IPaddress;
    3: "Port";
    4: i32 port;
    5: "Size: ";
    6: i32 size;
    7: "Packet: ";
    8: string packet;
    9: "$";
}

/**
 * @description: Request message for agent xmpp connection status request with controller
 * @type: Trace
 * @severity: DEBUG
 */
request sandesh AgentXmppConnectionStatusReq {
}

/**
 * @description: Response for agent xmpp connection status
 * @type: Trace
 * @severity: DEBUG
 */
response sandesh AgentXmppConnectionStatus {
    1: list<AgentXmppData>peer;
}

/**
 * @description: Request  message for agent dns subscription connection status request
 * @type: Trace
 * @severity: DEBUG
 */
request sandesh AgentDnsXmppConnectionStatusReq {
}

/**
 * @description: Response message for agent dns subscription connection status
 * @type: Trace
 * @severity: DEBUG
 */
response sandesh AgentDnsXmppConnectionStatus {
    1: list<AgentXmppDnsData>peer;
}

/**
 * @description: Request message for agent discovery subscription connection status request
 * @type: Trace
 * @severity: DEBUG
 */
request sandesh AgentDiscoveryXmppConnectionsRequest {
}

/**
 * @description: Response for agent discovery subscription connection
 * @type: Trace
 * @severity: DEBUG
 */
response sandesh AgentDiscoveryXmppConnectionsResponse {
    1: list<AgentDiscoveryXmppConnections>xmpp_discovery_list;
    2: list<AgentXmppInUseConnections>xmpp_inuse_connections;
}

request sandesh AgentDiscoveryDnsXmppConnectionsRequest {
}

response sandesh AgentDiscoveryDnsXmppConnectionsResponse {
    1: list<AgentDiscoveryXmppConnections>xmpp_discovery_list;
    2: list<AgentXmppInUseConnections>xmpp_inuse_connections;
}
