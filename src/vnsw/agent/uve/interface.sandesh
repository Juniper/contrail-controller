/*
 * Copyright (c) 2015 Juniper Networks, Inc. All rights reserved.
 */

include "vnsw/agent/uve/port_bmap.sandesh"
include "vnsw/agent/uve/vrouter.sandesh"

/**
 * Uve definitions for interface
 */

/**
 * Structure definition for holding Floating Ip information
 */
struct VmFloatingIPAgent {
    /** Name of virtual-network of Floating-IP */
    1: string virtual_network;
    /** Floating IP Address */
    2: string ip_address;
}

/**
 * Structure definition for holding Floating Ip statistics information
 */
struct VmFloatingIPStats {
    /** Name of virtual-network of Floating-IP */
    1: string virtual_network;
    /** Floating IP Address */
    2: string ip_address;
    /** Count of incoming packets */
    3: u64 in_pkts;
    /** Count of incoming bytes */
    4: u64 in_bytes;
    /** Count of outgoing packets */
    5: u64 out_pkts;
    /** Count of outgoing bytes */
    6: u64 out_bytes;
}

/**
 * Structure definition for holding virtual-machine-interface's statistics
 */
struct VmInterfaceStats {
    /** Count of incoming packets */
    1: u64 in_pkts;
    /** Count of incoming bytes */
    2: u64 in_bytes;
    /** Count of outgoing packets */
    3: u64 out_pkts;
    /** Count of outgoing bytes */
    4: u64 out_bytes;
}

/**
 * Structure definition for holding Health Check information
 */
struct VmHealthCheckInstance {
    /** Name of Health check service */
    1: string name;
    /** UUID of Health check service */
    2: string uuid;
    /** Contains 'true' if the health check service is currently running and
     * 'false' otherwise
     */
    3: bool is_running;
    /** Contains "Active" if the health check service is active and "InActive"
     * otherwise
     */
    4: string status;
}

/**
 * Structure definition for holding number of flow hits for a given SG ACL Rule
 */
struct SgAclRuleStats {
    /** UUID of Security Group Rule */
    1: string rule;
    /** Number of flows that match the current SG rule */
    2: u64 count;
}

/**
 * Structure definition for holding virtual-machine-interface information
 */
struct UveVMInterfaceAgent {
    /** Name of Virtual Machine Interface */
    1: string                name (key="ObjectVMITable")
    /** Value 'true' indicates VMI is removed. Holds value of 'false' otherwise*/
    2: optional bool         deleted
    /** Primary IP version 4 address of VMI in dotted decimal notation */
    3: optional string ip_address;
    /** Name of virtual-network to which this VMI belongs */
    4: string virtual_network;
    /** Hardware address of VMI */
    5: optional string mac_address;
    /** MPLS label of VMI */
    6: optional u32 label;
    /** Value 'true' indicates VMI is active. This means that
     * It has received VM, VN and VRF configuration
     * It is administratively UP
     * Its VN is administratively UP
     * Has OS interface which has valid index and is in UP state
     * Has non-zero MAC address assigned
     * It is not deleted.
     * Its health check status is active.
     * It has one of IPv4 address, IPv6 address or bridging enabled
     If None of the above conditions are true, then it will have 'false'
     */
    7: optional bool active;
    /** Name of the virtual machine instance to which this VMI belongs */
    8: string vm_name;
    /** Ipv4 address of gateway. It is picked from the subnet of primary IP
     * address of VMI
     */
    9: optional string gateway;
    /** Value 'true' indicates VMI is L2 active. This means that
     * It has received VM, VN and VRF configuration
     * It is administratively UP
     * Its VN is administratively UP
     * Has OS interface which has valid index and is in UP state
     * Has non-zero MAC address assigned
     * It is not deleted.
     * Its health check status is active.
     * Has bridging enabled
     If None of the above conditions are true, then it will have 'false'
     */
   10: optional bool l2_active;
    /** UUID of VMI */
   11: optional string uuid;
    /** Primary IP version 6 address of VMI */
   12: optional string ip6_address;
    /** Value 'true' indicates VMI is IPv6 active. This means that
     * It has received VM, VN and VRF configuration
     * It is administratively UP
     * Its VN is administratively UP
     * Has OS interface which has valid index and is in UP state
     * Has non-zero MAC address assigned
     * It is not deleted.
     * Its health check status is active.
     * It has IPv6 address assigned
     If None of the above conditions are true, then it will have 'false'
     */
   13: optional bool ip6_active;
    /** List of Floating IPs associated with VMI */
   15: optional list<VmFloatingIPAgent> floating_ips;

    /** UUID of Virtual machine to which the VMI belongs */
   19: string vm_uuid;
    /** Value 'true' indicates VMI is IPv4 active. This means that
     * It has received VM, VN and VRF configuration
     * It is administratively UP
     * Its VN is administratively UP
     * Has OS interface which has valid index and is in UP state
     * Has non-zero MAC address assigned
     * It is not deleted.
     * Its health check status is active.
     * It has IPv4 address assigned
     If None of the above conditions are true, then it will have 'false'
     */
   22: optional bool ip4_active;
    /** Contains 'true' if the health check status of VMI is active and 'false'
     * Otherwise
     */
   23: optional bool is_health_check_active;
    /** List of health check objects associated with VMI */
   24: optional list<VmHealthCheckInstance> health_check_instance_list;
    /** Per VMI based list of SG rules matching flows. Also contains statistics
     *  of number of flows matching this (SG-rule, VMI) tuple
     */
    /** Contains 'true' if the VMI is administratively UP and 'false' otherwise
     */
   27: optional bool admin_state;
    /** List of IPv4 addresses assigned to VMI */
   28: optional list<string> fixed_ip4_list;
    /** List of IPv6 addresses assigned to VMI */
   29: optional list<string> fixed_ip6_list;

   /** UUID of VMI's VN */
   37: optional string vn_uuid;
   /** Transmit VLAN tag for packets over this VMI */
   38: optional u16 tx_vlan;
   /** Recieve VLAN tag for packets over this VMI */
   39: optional u16 rx_vlan;
   /** Parent interface name */
   40: optional string parent_interface;
   /** Vhostuser mode */
   49: optional byte vhostuser_mode;
   /** shows whether interface port mirror is enabled or not*/
   50: optional bool port_mirror_enabled;
}

/**
 * @description: Uve for virtual-machine-interface object
 * @type: uve
 * @object: virtual-machine-interface
 */
uve sandesh UveVMInterfaceAgentTrace {
    /** Virtual Machine interface details */
    1: UveVMInterfaceAgent data;
}

/**
 * Structure definition for holding details of single endpoint along with its
 * statistics
 */
struct SecurityPolicyFlowStats {
    /** Name of application */
    1: string app;
    /** Name of Tier */
    2: string tier;
    /** Name of site */
    3: string site;
    /** Name of deployment */
    4: string deployment;
    /** semi-colon separated list of labels */
    22: string labels;
    /** semi-colon separated list of custom_tags */
    23: string custom_tags;
    /** Remote Application ID */
    5:  string remote_app_id;
    /** Remote Tier ID */
    6:  string remote_tier_id;
    /** Remote Site ID */
    7:  string remote_site_id;
    /** Remote deployment ID */
    8:  string remote_deployment_id;
    /** semi-colon separated list of remote label ids */
    24: string remote_label_ids;
    /** semi-colon separated list of remote custom_tag ids */
    25: string remote_custom_tag_ids;
    /** Remote prefix when app/tier/site/deployment is missing */
    9:  string remote_prefix;
    /** Remote Virtual network name*/
    10:  string remote_vn;
    /** Local Virtual network name*/
    11:  string local_vn;
    /** Number of sessions added since previous send*/
    12:  u64    added;
    /** Number of sessions deleted since previous send*/
    13:  u64    deleted;
    /** Number of sessions currently active*/
    14: u64    active;
    /** Incoming statistics in bytes */
    16: u64    in_bytes;
    /** Outgoing statistics in bytes */
    17: u64    out_bytes;
    /** Incoming statistics in packets */
    18: u64    in_pkts;
    /** Outgoing statistics in packets */
    19: u64    out_pkts;
    /** Action */
    20: string action;
}

/**
 * Structure definition for holding details of list of endpoints
 */
struct EndpointStats {
    /** Name of the virtual machine instance to which this VMI belongs */
    1: string workload;
    /** @display_name:Endpoint statistics for client sessions */
    2: list<SecurityPolicyFlowStats> client (tags=".app,.tier,.site,.deployment,.local_vn,.labels,.custom_tags,workload")
    /** @display_name:Endpoint statistics for server sessions */
    3: list<SecurityPolicyFlowStats> server (tags=".app,.tier,.site,.deployment,.local_vn,.labels,.custom_tags,workload")
}

/**
 * @description: Object log for Endpoint Security Stats
 * @type: objectlog
 * @object: virtual-machine-interface
 */
objectlog sandesh EndpointSecurityStats {
    /** Name of Virtual Machine Interface */
    1: string name (key="ObjectVMITable");

    /** The key of this map is Security Policy name and rule-uuid */
    /** @display_name:Security Policy Endpoint Statistics*/
    2: map<string, EndpointStats> eps (tags=".__key")
}

/**
 * Structure definition for holding virtual-machine-interface name and tags
 */
struct VMITags {
    /** Name of Virtual Machine Interface */
    1: string  name (key="ObjectVMITable")
    /** Value 'true' indicates VMI is removed. Holds value of 'false' otherwise*/
    2: optional bool deleted
    /** Name of Application */
    3: optional string app;
    /** Name of Tier */
    4: optional string tier;
    /** Name of site */
    5: optional string site;
    /** Name of deployment */
    6: optional string deployment;
    /** semi-colon separated list of labels */
    7: optional list<string> labels;
    /** semi-colon separated list of custom_tags */
    8: optional list<string> custom_tags;
}

/**
 * @description: Uve for virtual-machine-interface tags
 * @type: uve
 * @object: virtual-machine-interface
 */
uve sandesh UVEVMITags {
    /** Virtual Machine interface details */
    1: VMITags data;
}

/**
 * Structure definition for holding virtual-machine-interface statistics
 */
struct VMIStats {
    /** Name of Virtual Machine Interface */
    1: string  name (key="ObjectVMITable")
    /** Value 'true' indicates VMI is removed. Holds value of 'false' otherwise*/
    2: optional bool deleted
    /** Name of the virtual machine instance to which this VMI belongs */
    3: string vm_name;
    /** UUID of Virtual machine to which the VMI belongs */
    4: string vm_uuid;
    /** Name of virtual-network to which this VMI belongs */
    5: string virtual_network;
    /** Bitmap of port numbers that packets on this VMI have used */
    6: optional port_bmap.PortBucketBitmap port_bucket_bmap;
    /** List of Aggregate Floating IP statistics of all Floating IPs associated
     * with VMI
     */
    7: optional list<VmFloatingIPStats> fip_agg_stats;
    /** Floating IP statistics of all Floating IPs on VMI since previous send.*/
    /** @display_name:Virtual Machine Floating IP Statistics */
    8: optional list<VmFloatingIPStats> fip_diff_stats (tags=".virtual_network,.ip_address", uve_type=".virtual_network:virtual_network")
    /** Statistics of VMI. Contains aggregate statistics */
    9: optional VmInterfaceStats raw_if_stats (metric="agg", tags="vm_name,vm_uuid", uve_type="vm_uuid:virtual_machine")
    /** @display_name:Interface Flow Setup Statistics*/
    10: optional vrouter.VrouterFlowRate flow_rate (tags="virtual_network",uve_type="virtual_network:virtual_network")
    /** Ingress direction bandwidth in bits per second */
    11: optional u64 in_bw_usage;
    /** Egress direction bandwidth in bits per second */
    12: optional u64 out_bw_usage;
    /** Interface drop statistics */
    13: optional vrouter.AgentDropStats raw_drop_stats (metric="agg", tags="virtual_network",uve_type="virtual_network:virtual_network")
    /** @display_name:VMI ACL Rule Statistics */
    14: optional list<SgAclRuleStats> sg_rule_stats (tags=".rule");
    /** Firewall policy rules along with its policy set name */
    15: optional list<string> policy_rules;
}

/**
 * @description: Uve for virtual-machine-interface statistics
 * @type: uve
 * @object: virtual-machine-interface
 */
uve sandesh UVEVMIStats {
    /** Virtual Machine interface details */
    1: VMIStats data;
}
