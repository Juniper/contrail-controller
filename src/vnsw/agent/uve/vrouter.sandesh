/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

/**
 * This UVE provides information associated with a vRouter such as
 *
 * virtual networks present on this vRouter,
 * virtual machines spawned on the server of this vRouter,
 * statistics of the traffic flowing through this vRouter
 *
 */
include "base/sandesh/cpuinfo.sandesh"
include "base/sandesh/process_info.sandesh"
include "sandesh/library/common/derived_stats_results.sandesh"
include "vnsw/agent/oper/agent.sandesh"

/**
 * Sandesh definition for agent's xen server config
 */
struct AgentXenConfig {
    1: string            xen_ll_port;
    2: string            xen_ll_ip;
    3: i32               xen_ll_prefix_len;
}

/**
 * Sandesh definition for agent's vmware server config
 */
struct AgentVmwareConfig {
    1: string            vmware_port;
}

/**
 * Sandesh definition for agent's vgw config
 */
struct AgentVgwConfig {
    1: string            interface_name;
    2: string            vrf_name;
    3: list<string>      ip_blocks_list; 
    4: optional list<string> route_list; 
}

/**
 * Sandesh definition for agent's vhost config
 */
struct AgentVhostConfig {
    1: string    name;
    2: string    ip;
    3: i32       ip_prefix_len;
    4: string    gateway;
}

/**
 * Sandesh definition for agent's vmware xmpp peer
 */
struct AgentXmppPeer {
    1: string        ip (aggtype="listkey")
    2: bool          status;
    3: u64           setup_time;
    4: bool          primary;
}

/**
 * Sandesh definition for agent interface
 */
struct AgentInterface {
    1: string name (aggtype="listkey")
    2: string mac_address;
}

/**
 * Sandesh definition for agent
 */
struct VrouterAgent {  // Agent info
    1: string name (key="ObjectVRouter")
    2: optional bool                deleted
    3: optional list<string> connected_networks; 
    4: optional list<string> interface_list; 
    5: optional list<string> virtual_machine_list; 
    6: optional list<AgentXmppPeer> xmpp_peer_list;
    7: optional string collector;
    8: optional list<string> self_ip_list;
    9: optional string build_info;
   10: optional list<string> core_files_list; 
   11: optional list<string> error_intf_list; 
   12: optional list<AgentInterface> phy_if;
   13: optional AgentInterface vhost_if;
   14: optional i32 collector_port;
   15: optional string log_file;
   16: optional string config_file;
   17: optional bool  log_local;
   18: optional string log_level;
   19: optional string log_category;
   20: optional i32 sandesh_http_port;
   21: optional list<string> dns_servers;
   22: optional AgentVhostConfig vhost_cfg;
   23: optional string eth_name;
   24: optional string tunnel_type;
   25: optional string hypervisor;
   26: optional AgentXenConfig xen_cfg;
   27: optional string ds_addr;
   28: optional i32 ds_xs_instances;
   29: optional string control_ip; 
   30: optional list<string> no_config_intf_list;
   31: optional u16 total_interface_count;
   32: optional u16 down_interface_count;
   33: optional AgentVmwareConfig vmware_cfg;
   34: optional list<string> dns_server_list_cfg;
   35: optional list<string> control_node_list_cfg;
   36: optional string hostname_cfg; 
   37: optional u16 flow_cache_timeout_cfg;
   38: optional u32 ll_max_system_flows_cfg;
   39: optional u32 ll_max_vm_flows_cfg;
   40: optional u32 max_vm_flows_cfg;
   41: optional list<AgentVgwConfig> gateway_cfg_list;
   42: optional bool headless_mode_cfg;
   43: optional list<string> collector_server_list_cfg;
   44: optional bool log_flow;
   45: optional list<string> tsn_prouter_list; 
   46: optional list<string> tor_prouter_list;
   47: optional list<string> embedded_prouter_list;
   48: optional string mode;
   49: optional list<string> unmanaged_if_list;
   50: optional u32 vn_count; //being sent for UI dashboard optimization
   51: optional string platform;
   52: optional agent.VrouterObjectLimits vr_limits;
}

/**
 * @description: uve for vrouter agent
 * @object: Agent
 */
uve sandesh UveVrouterAgent {
    1: VrouterAgent data;
}

/**
 ** Sandesh definition for agent xmpp connection
 */
struct AgentXmppStats {
    2: u16 reconnects;
    3: u64 in_msgs;
    4: u64 out_msgs;
}

/**
 * Structure definition for Drop Statistics at phy-if, vhost or VMI level
 */
struct VrouterDropStats {
    1:  optional u64 discard
    2:  optional u64 pull
    3:  optional u64 invalid_if
    4:  optional u64 invalid_arp
    5:  optional u64 trap_no_if
    6:  optional u64 nowhere_to_go
    7:  optional u64 flow_queue_limit_exceeded
    8:  optional u64 flow_no_memory
    9:  optional u64 flow_invalid_protocol
    10: optional u64 flow_nat_no_rflow
    11: optional u64 flow_action_drop
    12: optional u64 flow_action_invalid
    13: optional u64 flow_unusable
    14: optional u64 flow_table_full
    15: optional u64 interface_tx_discard
    16: optional u64 interface_drop
    17: optional u64 duplicated
    18: optional u64 push
    19: optional u64 ttl_exceeded
    20: optional u64 invalid_nh
    21: optional u64 invalid_label
    22: optional u64 invalid_protocol
    23: optional u64 interface_rx_discard
    24: optional u64 invalid_mcast_source
    25: optional u64 head_alloc_fail
    26: optional u64 pcow_fail
    27: optional u64 mcast_clone_fail
    28: optional u64 mcast_df_bit
    29: optional u64 no_memory
    30: optional u64 rewrite_fail
    31: optional u64 misc
    32: optional u64 invalid_packet
    33: optional u64 cksum_err
    34: optional u64 no_fmd
    35: optional u64 invalid_vnid
    36: optional u64 frag_err
    37: optional u64 invalid_source
    38: optional u64 l2_no_route
    39: optional u64 fragment_queue_fail
    40: optional u64 vlan_fwd_tx
    41: optional u64 vlan_fwd_enq
    42: optional u64 drop_new_flow
    43: optional u64 flow_evict
    44: optional u64 trap_original
    /** Drop packet count */
    45: optional u64 drop_pkts
}

/**
 * Structure definition for vrouter host interface statistics
 */
struct AgentIfStats {
    1: string name (aggtype="listkey")
    2: u64 in_pkts;
    3: u64 in_bytes; 
    4: u64 out_pkts; 
    5: u64 out_bytes; 
    6: i32 speed;
    7: i32 duplexity;
}

struct PhyIfStats {
    2: u64 in_pkts;
    3: u64 in_bytes;
    4: u64 out_pkts;
    5: u64 out_bytes;
}

struct PhyIfInfo {
    6: i32 speed;
    7: i32 duplexity;
}

/**
 * Sandesh definition for agent vhost interface bandwidth
 */
struct AgentIfBandwidth {
    1: string name (aggtype="listkey")
    2: u64 in_bandwidth_usage;
    3: u64 out_bandwidth_usage;
}

/**
 * Sandesh definition for vrouter flow rate
 */
struct VrouterFlowRate {
    1: optional u32 added_flows;
    2: optional u32 max_flow_adds_per_second;
    3: optional u32 min_flow_adds_per_second;
    4: optional u32 deleted_flows;
    5: optional u32 max_flow_deletes_per_second;
    6: optional u32 min_flow_deletes_per_second;
    7: optional u32 active_flows; //'dial' type. So no diff. Always aggregate
}

/**
 * Sandesh definition for vrouter
 */
struct VrouterStatsAgent {  // Agent stats
    1: string name (key="ObjectVRouter")
    2: optional bool                deleted

       //traffic stats
    3: optional u64 in_tpkts; 
    4: optional u64 in_bytes; 
    5: optional u64 out_tpkts;
    6: optional u64 out_bytes; 

        //Process stats
    12: optional cpuinfo.CpuLoadInfo cpu_info;

        //Nexthop stats
    14: optional u32 nexthops; 

        //Flow stats
    15: optional u64 exception_packets; 
    16: optional u64 exception_packets_dropped; 
    17: optional u64 exception_packets_no_route; 
    18: optional u64 exception_packets_denied; 
    19: optional u64 exception_packets_allowed; 
    20: optional u64 total_flows; 
    22: optional u64 aged_flows; 
    23: optional u64 aged_flows_dp; 
    24: optional u64 active_flows_dp; 
    47: optional u64 flow_export_disable_drops; /* Number of flow samples dropped because of disable of flow exports */ 
    48: optional u64 flow_export_sampling_drops; /* Number of flow samples dropped after subjecting them to sampling algorithm */
    49: optional u64 flow_export_drops; /* Number of flows which are never exported */

        //Dataplane stats
    25: optional u64 in_kernel_ipc_msgs; 
    26: optional u64 out_kernel_ipc_msgs; 
    27: optional u64 hash_collisions_dp; 
    28: optional u64 packets_denied_dp; 
    29: optional u64 packets_no_route_dp; 
    30: optional u64 packets_no_mpls_dp; 
    31: optional u64 packets_no_flow_dp; 
    32: optional u64 uptime;
    33: optional map<string, PhyIfInfo> phy_if_info

    /** Statistics for vhost interface */
    76: optional AgentIfStats raw_vhost_stats (metric="agg", hidden="yes")
    /** @display_name:Vrouter vhost Interface Traffic Statistics*/
    77: optional AgentIfStats vhost_stats (stats="raw_vhost_stats:DSNon0:", tags="")

    78: optional VrouterDropStats raw_vhost_drop_stats (metric="agg", hidden="yes")
    /** @display_name:Vrouter vhost Interface Drop Statistics*/
    79: optional VrouterDropStats vhost_drop_stats (stats="raw_vhost_drop_stats:DSNon0:", tags="")
    80: optional VrouterDropStats vhost_drop_stats_1h (stats="raw_vhost_drop_stats:DSSum:3600")

    /** Bandwidth of physical interface in bps for last 5 minutes */
    36: optional list<AgentIfBandwidth> phy_if_5min_usage; 
    38: optional list<u32>   udp_sport_bitmap;
    39: optional list<u32>   udp_dport_bitmap;
    40: optional list<u32>   tcp_sport_bitmap;
    41: optional list<u32>   tcp_dport_bitmap;

    /** List of drop reasons with packet count for each drop reason */
    42: optional VrouterDropStats raw_drop_stats (metric="agg", hidden="yes")
    /** @display_name:Vrouter Packet drop Statistics*/
    60: optional VrouterDropStats drop_stats (stats="raw_drop_stats:DSNon0:", tags="")
    /** List of drop reasons with packet count for each drop reason for past 1 hour*/
    61: optional VrouterDropStats drop_stats_1h  (stats="raw_drop_stats:DSSum:3600")

    43: optional double total_in_bandwidth_utilization;
    44: optional double total_out_bandwidth_utilization;

    /** @display_name:Vrouter Flow Setup Statistics*/
    45: optional VrouterFlowRate flow_rate (tags="")
    65: optional derived_stats_results.AnomalyResult added_flows_ewm
                     (stats="flow_rate.added_flows:DSAnomaly:EWM:0.1")
    66: optional derived_stats_results.AnomalyResult deleted_flows_ewm
                     (stats="flow_rate.deleted_flows:DSAnomaly:EWM:0.1")
    67: optional derived_stats_results.AnomalyResult active_flows_ewm
                     (stats="flow_rate.active_flows:DSAnomaly:EWM:0.1")

    /** @display_name:Physical Interface ingress bandwidth in bps*/
    50: optional map<string,u64> phy_band_in_bps (tags="name:.__key")
    /** @display_name:Physical Interface egress bandwidth in bps*/
    51: optional map<string,u64> phy_band_out_bps (tags="name:.__key")
    /** Anomaly Detection for ingress bandwidth of physical interface using
     * Exponentially Weighed Mean
     */
    52: optional map<string,derived_stats_results.EWMResult> in_bps_ewm
                     (mstats="phy_band_in_bps:DSEWM:0.1")
    53: optional map<string,derived_stats_results.EWMResult> out_bps_ewm
                     (mstats="phy_band_out_bps:DSEWM:0.1")

    /** @display_name:Physical Interface Flow Setup Statistics*/
    68: optional map<string, VrouterFlowRate> phy_flow_rate  (tags="name:.__key")
    69: optional map<string, derived_stats_results.AnomalyResult> phy_added_flows_ewm
                     (mstats="phy_flow_rate.added_flows:DSAnomaly:EWM:0.1")
    70: optional map<string, derived_stats_results.AnomalyResult> phy_deleted_flows_ewm
                     (mstats="phy_flow_rate.deleted_flows:DSAnomaly:EWM:0.1")
    71: optional map<string, derived_stats_results.AnomalyResult> phy_active_flows_ewm
                     (mstats="phy_flow_rate.active_flows:DSAnomaly:EWM:0.1")

    72: optional map<string, PhyIfStats> raw_phy_if_stats (metric="agg", hidden="yes")
    /** @display_name:Vrouter Physical Interface Traffic Statistics*/
    73: optional map<string, PhyIfStats> phy_if_stats (mstats="raw_phy_if_stats:DSNon0:", tags="name:.__key")
    74: optional map<string, derived_stats_results.AnomalyResult> in_pkts_ewm
                     (mstats="raw_phy_if_stats.in_pkts:DSAnomaly:EWM:0.1")
    75: optional map<string, derived_stats_results.AnomalyResult> out_pkts_ewm
                     (mstats="raw_phy_if_stats.out_pkts:DSAnomaly:EWM:0.1")

    81: optional map<string, VrouterDropStats> raw_phy_if_drop_stats (metric="agg", hidden="yes")
    /** @display_name:Vrouter Physical Interface Drop Statistics*/
    82: optional map<string, VrouterDropStats> phy_if_drop_stats (mstats="raw_phy_if_drop_stats:DSNon0:", tags="")
    83: optional map<string, VrouterDropStats> phy_if_drop_stats_1h (mstats="raw_phy_if_drop_stats:DSSum:3600")
}

/**
 * Vrouter statistics uve
 */
uve sandesh VrouterStats {
    1: VrouterStatsAgent data;
}

/**
 * Sandesh definition for vrouter cpu usage
 */
struct VrouterCpuInfo {
    1: u32                            mem_virt
    2: double                         cpu_share
    3: u32                            used_sys_mem
    4: double                         one_min_cpuload
    5: u32                            mem_res
}

/**
 * Sandesh definition for compute node cpu stats
 */
struct ComputeCpuState {
    1: string                         name (key="ObjectVRouter")
    2: optional bool                  deleted
    /** @display_name:Compute CPU Information*/
    3: optional list<VrouterCpuInfo>  cpu_info (tags=".mem_virt,.cpu_share,.mem_res", aggtype="union")
}

/**
 * @description: uve for compute node cpu stats
 * @severity: DEBUG
 */
uve sandesh ComputeCpuStateTrace {
    1: ComputeCpuState data
}

/**
 * Sandesh definition for VRF routing table size on vrouter
 */
struct RouteTableSize {
    1: u32 inet4_unicast;
    2: u32 inet4_multicast;
    3: u32 evpn;
    4: u32 bridge;
    5: u32 inet6_unicast;
}

/**
 * Sandesh definition for vrouter control information
 */
struct VrouterControlStats {
    1: string        name (key="ObjectVRouter")
    2: optional bool deleted

    /** @display_name:Vrouter XMPP Statistics*/
    3: optional map<string, AgentXmppStats> raw_xmpp_stats (metric="agg", hidden="yes")
    4: optional map<string, AgentXmppStats> xmpp_stats (mstats="raw_xmpp_stats:DSChange:")

    /** @display_name:Vrouter IFMAP Parse Error Statistics*/
    5: optional map<string, u64> raw_ifmap_stats (metric="agg", hidden="yes")
    6: optional map<string, u64> ifmap_stats
                     (mstats="raw_ifmap_stats:DSNon0:")
    7: optional map<string, u64> ifmap_stats_1h
                     (mstats="raw_ifmap_stats:DSSum:3600")

    8: optional map<string, RouteTableSize> raw_rt_table_size (metric="agg", hidden="yes")
    9: optional map<string, RouteTableSize> rt_table_size (mstats="raw_rt_table_size:DSChange:")
}

/**
 * Vrouter control statistics uve
 */
uve sandesh VrouterControlStatsTrace {
    1: VrouterControlStats data;
}
