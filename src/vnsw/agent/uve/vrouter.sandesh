/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

/**
 * This UVE provides information associated with a vRouter such as
 *
 * virtual networks present on this vRouter,
 * virtual machines spawned on the server of this vRouter,
 * statistics of the traffic flowing through this vRouter
 *
 */
include "base/sandesh/cpuinfo.sandesh"
include "base/sandesh/process_info.sandesh"
include "sandesh/library/common/derived_stats_results.sandesh"
include "vnsw/agent/oper/agent.sandesh"

/**
 * Structure definition for holding details for xen hypervisor type
 */
struct AgentXenConfig {
    /** port number for xen hypervisor type*/
    1: string            xen_ll_port;
    /** IPv4 address for xen hypervisor type*/
    2: string            xen_ll_ip;
    /** Prefix len for xen hypervisor type*/
    3: i32               xen_ll_prefix_len;
}

/**
 * Structure definition for holding details for vmware hypervisor type
 */
struct AgentVmwareConfig {
    /** Port number */
    1: string            vmware_port;
}

/**
 * Structure definition for holding details of virtual gateway configuration
 */
struct AgentVgwConfig {
    /** Name of the gateway interface */
    1: string            interface_name;
    /** Name of the routing instance */
    2: string            vrf_name;
    /** List of subnets for virtual gateway */
    3: list<string>      ip_blocks_list; 
    /** List of routes for virtual gateway */
    4: optional list<string> route_list; 
}

/**
 * Structure definition for holding vhost interface details
 */
struct AgentVhostConfig {
    /** Name of the vhost interface */
    1: string    name;
    /** IPv4 address of vhost interface*/
    2: string    ip;
    /** Prefix len of vhost interface*/
    3: i32       ip_prefix_len;
    /** Gateway configuration */
    4: string    gateway;
}

/**
 * Structure definition for holding XMPP peer details
 */
struct AgentXmppPeer {
    /** IPv4 address of XMPP peer */
    1: string        ip (aggtype="listkey")
    /** Contains 'true' if the XMPP peer is in READY state*/
    2: bool          status;
    /** XMPP channel setup time in UTC as microseconds*/
    3: u64           setup_time;
    /** Contains 'true' if this is active XMPP peer */
    4: bool          primary;
}

/**
 * Structure definition for holding interface details
 */
struct AgentInterface {
    /** Name of the interface */
    1: string name (aggtype="listkey")
    /** Hardware address of the interface */
    2: string mac_address;
}

/**
 * Sandesh definition for count of Agent objects
 */
struct VrouterAgentObjectCount {
    1: u16 active
}

/**
 * Structure definition for vrouter-agent information
 */
struct VrouterAgent {
    /** Name of the agent */
    1: string name (key="ObjectVRouter")
    /** Value 'true' indicates vrouter is removed. Holds value of 'false'
     * otherwise
     */
    2: optional bool                deleted
    /** List of virtual-network names part of this vrouter */
    3: optional list<string> connected_networks;
    /** List of configuration names of virtual-machine-interface part of this
     * vrouter */
    4: optional list<string> interface_list;
    /** List of names of virtual-machine part of this vrouter */
    5: optional list<string> virtual_machine_list;
    /** List of XMPP peers associated with this vrouter */
    6: optional list<AgentXmppPeer> xmpp_peer_list;
    8: optional list<string> self_ip_list;
    /** Build information for vrouter */
    9: optional string build_info;
   /** List of configuration names of virtual-machine-interfaces which are not
    * active in agent
    */
   11: optional list<string> error_intf_list; 
   /** Details of physical interfaces associated with this vrouter */
   12: optional list<AgentInterface> phy_if;
   /** Details of vrouter host interface associated with this vrouter */
   13: optional AgentInterface vhost_if;
   /** Name of log file as specified in confgiration file */
   15: optional string log_file;
   /** Name of the Agent configuration */
   16: optional string config_file;
   /** Local logging configuration as specified in confgiration file. 'true'
    * indicates local logging is enabled
    */
   17: optional bool  log_local;
   /** Logging severity level as specified in confgiration file*/
   18: optional string log_level;
   /** Logging category as specified in confgiration file*/
   19: optional string log_category;
   /** Agent introspect as specified in confgiration file*/
   20: optional i32 sandesh_http_port;
   /** List of DNS servers from oper DB */
   21: optional list<string> dns_servers;
   /** Host interface configuration as specified in confgiration file*/
   22: optional AgentVhostConfig vhost_cfg;
   /** Physical interface name as specified in confgiration file*/
   23: optional string eth_name;
   /** Encapsulation type for tunnel as specified in confgiration file*/
   24: optional string tunnel_type;
   /** Hypervisor type as specified in confgiration file*/
   25: optional string hypervisor;
   /** Details of additional configuration when hypervisor type is xen*/
   26: optional AgentXenConfig xen_cfg;
   /** Discovery server details as specified in confgiration file*/
   27: optional string ds_addr;
   /** Number of control nodes as specified in confgiration file*/
   28: optional i32 ds_xs_instances;
   /** control IP as specified in confgiration file. It is used by web-ui to
    * to connect to agent introspect.
    */
   29: optional string control_ip; 
   /** List of UUIDs of virtual-machine-interfaces for which configuration is
    * not received yet.
    */
   30: optional list<string> no_config_intf_list;
   /** Count of total number of virtual-machine-interfaces that are part of
    * this vrouter
    */
   /** @display_name:Vrouter Agent VMI count */
   31: optional VrouterAgentObjectCount vmi_count (tags="")
   /** Count of total number of virtual-machine-interfaces that are part of
    * this vrouter and that are in INACTIVE state
    */
   32: optional u16 down_interface_count;
   /** Additional configuration details when hypervisor type is configured as
    * vmware
    */
   33: optional AgentVmwareConfig vmware_cfg;
   /** List of DNS servers as specified in confgiration file*/
   34: optional list<string> dns_server_list_cfg;
   /** List of control-nodes as specified in confgiration file*/
   35: optional list<string> control_node_list_cfg;
   /** Hostname configuration as specified in configuration file*/
   36: optional string hostname_cfg; 
   /** Aging time of flow records in seconds as specified in configuration file*/
   37: optional u16 flow_cache_timeout_cfg;
   /** Maximum Link-local flows permitted as specified in configuration file*/
   38: optional u32 ll_max_system_flows_cfg;
   /** Maximum Link-local flows permitted per VM as specified in configuration
    * file*/
   39: optional u32 ll_max_vm_flows_cfg;
   /** Maximum flows permitted per VM as specified in configuration file*/
   40: optional u32 max_vm_flows_cfg;
   /** List of virtual gateway configuration as specified in configuration file*/
   41: optional list<AgentVgwConfig> gateway_cfg_list;
   /** Will have value of 'true' if headless mode is configured. Will have value
    * of false otherwise*/
   42: optional bool headless_mode_cfg;
   /** List of collectors as specified in configuration file*/
   43: optional list<string> collector_server_list_cfg;
   /** Flow logging configuration as specified in configuration file*/
   44: optional bool log_flow;
   /** Sent from TSN Agent. Indicates list of prouters associated with this
    * Agent
    */
   45: optional list<string> tsn_prouter_list; 
   /** Sent from Tor Agent. Indicates list of prouters associated with this
    * Agent
    */
   46: optional list<string> tor_prouter_list;
   /** Sent from Embedded Agent. Indicates list of prouters associated with this
    * Agent
    */
   47: optional list<string> embedded_prouter_list;
   /** Agent mode as specified in configuration file. It indicates as whether
    * the agent is TSN agent, Tor agent or Embedded agent
    */
   48: optional string mode;
   /** Sent only from TSN Agent. It indicates list of configuration names of
    virtual-machine-interface that are not managed by this TSN*/
   49: optional list<string> unmanaged_if_list;
   /** Count of total number of virtual-networks part of this vrouter*/
   50: optional u32 vn_count; //being sent for UI dashboard optimization
   /** It indicates the platform on which agent runs. It indicates whether
    * vrouter runs on host or NIC or in DPDK mode
    */
   51: optional string platform;
   /** Maximum entries supported in each type of object*/
   52: optional agent.VrouterObjectLimits vr_limits;
   /** @display_name:Vrouter Agent VM count */
   53: optional VrouterAgentObjectCount vm_count (tags="")
   /** shows whether currently BGPaaS is enabled or not */
   54: optional bool bgpaas_enabled;
   /** shows whether currently port mirror is enabled or not*/
   55: optional bool port_mirror_enabled;
}

/**
 * @description: Uve for vrouter agent
 * @type: uve
 * @object: vrouter
 */
uve sandesh UveVrouterAgent {
    1: VrouterAgent data;
}

/**
 * Structure definition for Agent's XMPP connection statistics
 */
struct AgentXmppStats {
    2: u16 reconnects;
    3: u64 in_msgs;
    4: u64 out_msgs;
}

/**
 * Structure definition for Drop Statistics at vrouter, phy-if, vhost or
 * VMI level
 */
struct AgentDropStats {
    1:  optional u64   ds_discard;
    2:  optional u64   ds_pull;
    3:  optional u64   ds_invalid_if;
    6:  optional u64   ds_invalid_arp;
    7:  optional u64   ds_trap_no_if;
    8:  optional u64   ds_nowhere_to_go;
    9:  optional u64   ds_flow_queue_limit_exceeded;
    10: optional u64   ds_flow_no_memory;
    11: optional u64   ds_flow_invalid_protocol;
    12: optional u64   ds_flow_nat_no_rflow;
    13: optional u64   ds_flow_action_drop;
    14: optional u64   ds_flow_action_invalid;
    15: optional u64   ds_flow_unusable;
    16: optional u64   ds_flow_table_full;
    17: optional u64   ds_interface_tx_discard;
    18: optional u64   ds_interface_drop;
    19: optional u64   ds_duplicated;
    20: optional u64   ds_push;
    21: optional u64   ds_ttl_exceeded;
    22: optional u64   ds_invalid_nh;
    23: optional u64   ds_invalid_label;
    24: optional u64   ds_invalid_protocol;
    25: optional u64   ds_interface_rx_discard;
    26: optional u64   ds_invalid_mcast_source;
    27: optional u64   ds_head_alloc_fail;
    29: optional u64   ds_pcow_fail;
    31: optional u64   ds_mcast_clone_fail;
    33: optional u64   ds_rewrite_fail;
    34: optional u64   ds_misc;
    35: optional u64   ds_invalid_packet;
    36: optional u64   ds_cksum_err;
    38: optional u64   ds_no_fmd;
    40: optional u64   ds_invalid_vnid;
    41: optional u64   ds_frag_err;
    42: optional u64   ds_invalid_source;
    43: optional u64   ds_mcast_df_bit;
    46: optional u64   ds_l2_no_route;
    48: optional u64   ds_vlan_fwd_tx;
    49: optional u64   ds_vlan_fwd_enq;
    50: optional u64   ds_drop_new_flow
    51: optional u64   ds_flow_evict
    52: optional u64   ds_trap_original
    53: optional u64   ds_no_memory
    54: optional u64   ds_fragment_queue_fail
    /** Drop packet count */
    55: optional u64   ds_drop_pkts
}
/**
 * Structure definition for vrouter host interface statistics
 */
struct AgentIfStats {
    /** Name of host interface */
    1: string name (aggtype="listkey")
    /** Ingress packet count */
    2: u64 in_pkts;
    /** Ingress bytes count */
    3: u64 in_bytes; 
    /** Egress packet count */
    4: u64 out_pkts; 
    /** Egress bytes count */
    5: u64 out_bytes; 
    /** Speed of interface in mbps */
    6: i32 speed;
    /** Duplexity of interface */
    7: i32 duplexity;
}

/**
 * Structure definition for Physical interface statistics
 */
struct PhyIfStats {
    /** Ingress packet count */
    2: u64 in_pkts;
    /** Ingress bytes count */
    3: u64 in_bytes;
    /** Egress packet count */
    4: u64 out_pkts;
    /** Egress bytes count */
    5: u64 out_bytes;
}

/**
 * Structure definition for Physical interface details
 */
struct PhyIfInfo {
    /** Speed of interface in mbps */
    6: i32 speed;
    /** Duplexity of interface */
    7: i32 duplexity;
}

/**
 * Structure definition for interface bandwidth
 */
struct AgentIfBandwidth {
    /** Name of the interface */
    1: string name (aggtype="listkey")
    /** Ingress bandwidth in bps */
    2: u64 in_bandwidth_usage;
    /** Egress bandwidth in bps */
    3: u64 out_bandwidth_usage;
}

/**
 * Structure definition for vrouter flow setup and teardown statistics
 */
struct VrouterFlowRate {
    /** Count of flows added since previous send */
    1: optional u32 added_flows;
    /** Count of maximum flows added since previous send */
    2: optional u32 max_flow_adds_per_second;
    /** Count of minimum flows added since previous send */
    3: optional u32 min_flow_adds_per_second;
    /** Count of flows deleted since previous send */
    4: optional u32 deleted_flows;
    /** Count of maximum flows deleted since previous send */
    5: optional u32 max_flow_deletes_per_second;
    /** Count of minimum flows deleted since previous send */
    6: optional u32 min_flow_deletes_per_second;
    /** Count of active flows */
    7: optional u32 active_flows; //'dial' type. So no diff. Always aggregate
    /** Count of hold flows */
    8: optional u32 hold_flows;
}

/**
 * Structure definition for vrouter statistics
 */
struct VrouterStatsAgent {
    /** Name of the agent */
    1: string name (key="ObjectVRouter")
    /** Value 'true' indicates vrouter is removed. Holds value of 'false'
     * otherwise
     */
    2: optional bool                deleted
    /** Ingress packets count */
    3: optional u64 in_tpkts; 
    /** Ingress bytes count */
    4: optional u64 in_bytes; 
    /** Egress packets count */
    5: optional u64 out_tpkts;
    /** Egress bytes count */
    6: optional u64 out_bytes; 

    /** CPU and memory statistics for process and system */
    12: optional cpuinfo.CpuLoadInfo cpu_info;

    /** Number of packets trapped to agent */
    15: optional u64 exception_packets; 
    /** Count of dropped packets which were trapped to agent */
    16: optional u64 exception_packets_dropped; 
    /** Count of allowed packets which were trapped to agent */
    19: optional u64 exception_packets_allowed; 
    /** Count of flows created in agent */
    20: optional u64 total_flows; 
    /** Count of flows aged in agent */
    22: optional u64 aged_flows;

    /** Time at which agent process was started. This is UTC time in
     * microseconds
     */
    32: optional u64 uptime;
    /** Physical interface speed and duplexity information */
    33: optional map<string, PhyIfInfo> phy_if_info

    /** Statistics for vhost interface */
    76: optional AgentIfStats raw_vhost_stats (metric="agg", hidden="yes")
    /** @display_name:Vrouter vhost Interface Traffic Statistics*/
    77: optional AgentIfStats vhost_stats (stats="raw_vhost_stats:DSNon0:", tags="")

    78: optional AgentDropStats raw_vhost_drop_stats (metric="agg", hidden="yes")
    /** @display_name:Vrouter vhost Interface Drop Statistics*/
    79: optional AgentDropStats vhost_drop_stats (stats="raw_vhost_drop_stats:DSNon0:", tags="")
    80: optional AgentDropStats vhost_drop_stats_1h (stats="raw_vhost_drop_stats:DSSum:3600")

    /** Bandwidth of physical interface in bps for last 5 minutes */
    36: optional list<AgentIfBandwidth> phy_if_5min_usage; 
    /** Bitmap of UDP source port numbers that packets on this vrouter have
     * used
     */
    38: optional list<u32>   udp_sport_bitmap;
    /** Bitmap of UDP destination port numbers that packets on this vrouter have
     * used
     */
    39: optional list<u32>   udp_dport_bitmap;
    /** Bitmap of TCP source port numbers that packets on this vrouter have
     * used */
    40: optional list<u32>   tcp_sport_bitmap;
    /** Bitmap of TCP destination port numbers that packets on this vrouter have
     * used
     */
    41: optional list<u32>   tcp_dport_bitmap;

    /** List of drop reasons with packet count for each drop reason */
    42: optional AgentDropStats raw_drop_stats (metric="agg", hidden="yes")
    /** @display_name:Vrouter Packet drop Statistics*/
    60: optional AgentDropStats drop_stats (stats="raw_drop_stats:DSNon0:", tags="")
    /** List of drop reasons with packet count for each drop reason for past 1 hour*/
    61: optional AgentDropStats drop_stats_1h  (stats="raw_drop_stats:DSSum:3600")

    /** Ingress bandwidth of physical interface where the value is obtained by
     * dividing the bandwidth computed in bps by speed of the physical interface
     */
    43: optional double total_in_bandwidth_utilization;
    /** Egress bandwidth of physical interface where the value is obtained by
     * dividing the bandwidth computed in bps by speed of the physical interface
     */
    44: optional double total_out_bandwidth_utilization;

    /** @display_name:Vrouter Flow Setup and teardown Statistics*/
    45: optional VrouterFlowRate flow_rate (tags="")
    /** Anomaly Detection for added flows count using Exponentially
     * Weighed Mean
     */
    65: optional derived_stats_results.AnomalyResult added_flows_ewm
                     (stats="flow_rate.added_flows:DSAnomaly:EWM:0.1")
    /** Anomaly Detection for deleted flows count using Exponentially
     * Weighed Mean
     */
    66: optional derived_stats_results.AnomalyResult deleted_flows_ewm
                     (stats="flow_rate.deleted_flows:DSAnomaly:EWM:0.1")
    /** Anomaly Detection for active flows count using Exponentially
     * Weighed Mean
     */
    67: optional derived_stats_results.AnomalyResult active_flows_ewm
                     (stats="flow_rate.active_flows:DSAnomaly:EWM:0.1")

    /** @display_name:Physical Interface ingress bandwidth in bps*/
    50: optional map<string,u64> phy_band_in_bps (tags="name:.__key")
    /** @display_name:Physical Interface egress bandwidth in bps*/
    51: optional map<string,u64> phy_band_out_bps (tags="name:.__key")
    /** Anomaly Detection for ingress bandwidth of physical interface using
     * Exponentially Weighed Mean
     */
    52: optional map<string,derived_stats_results.EWMResult> in_bps_ewm
                     (mstats="phy_band_in_bps:DSEWM:0.1")
    /** Anomaly Detection for egress bandwidth of physical interface using
     * Exponentially Weighed Mean
     */
    53: optional map<string,derived_stats_results.EWMResult> out_bps_ewm
                     (mstats="phy_band_out_bps:DSEWM:0.1")

    /** @display_name:Physical Interface Flow Setup and teardown Statistics*/
    68: optional map<string, VrouterFlowRate> phy_flow_rate  (tags="name:.__key")
    /** Anomaly Detection for added flows count of physical interface using
     * Exponentially Weighed Mean$
     */
    69: optional map<string, derived_stats_results.AnomalyResult> phy_added_flows_ewm
                     (mstats="phy_flow_rate.added_flows:DSAnomaly:EWM:0.1")
    /** Anomaly Detection for deleted flows count of physical interface using
     * Exponentially Weighed Mean$
     */
    70: optional map<string, derived_stats_results.AnomalyResult> phy_deleted_flows_ewm
                     (mstats="phy_flow_rate.deleted_flows:DSAnomaly:EWM:0.1")
    /** Anomaly Detection for active flows count of physical interface using
     * Exponentially Weighed Mean$
     */
    71: optional map<string, derived_stats_results.AnomalyResult> phy_active_flows_ewm
                     (mstats="phy_flow_rate.active_flows:DSAnomaly:EWM:0.1")
    /** Statistics for physical interface */
    72: optional map<string, PhyIfStats> raw_phy_if_stats (metric="agg", hidden="yes")
    /** @display_name:Vrouter Physical Interface Traffic Statistics*/
    73: optional map<string, PhyIfStats> phy_if_stats (mstats="raw_phy_if_stats:DSNon0:", tags="name:.__key")
    /** Anomaly Detection for Ingress packet count of physical interface using
     * Exponentially Weighed Mean$
     */
    74: optional map<string, derived_stats_results.AnomalyResult> in_pkts_ewm
                     (mstats="raw_phy_if_stats.in_pkts:DSAnomaly:EWM:0.1")
    /** Anomaly Detection for Egress packet count of physical interface using
     * Exponentially Weighed Mean$
     */
    75: optional map<string, derived_stats_results.AnomalyResult> out_pkts_ewm
                     (mstats="raw_phy_if_stats.out_pkts:DSAnomaly:EWM:0.1")

    81: optional map<string, AgentDropStats> raw_phy_if_drop_stats (metric="agg", hidden="yes")
    /** @display_name:Vrouter Physical Interface Drop Statistics*/
    82: optional map<string, AgentDropStats> phy_if_drop_stats (mstats="raw_phy_if_drop_stats:DSNon0:", tags="")
    83: optional map<string, AgentDropStats> phy_if_drop_stats_1h (mstats="raw_phy_if_drop_stats:DSSum:3600")
}

/**
 * @description: Uve for vrouter statistics
 * @type: uve
 * @object: vrouter
 */
uve sandesh VrouterStats {
    /** Vrouter statistics */
    1: VrouterStatsAgent data;
}

/**
 * Structure definition for vrouter node cpu and memory information
 */
struct VrouterCpuInfo {
    /* Virtual memory of agent process in kB */
    1: u32                            mem_virt
    /* Cpu Share of agent process as percentage */
    2: double                         cpu_share
    /** Used system memory of vrouter node in kB */
    3: u32                            used_sys_mem
    4: double                         one_min_cpuload
    /** Resident Set Size of Agent process in kB */
    5: u32                            mem_res
}

/**
 * Structure definition for compute node cpu and memory statistics
 */
struct ComputeCpuState {
    /** Name of the agent */
    1: string                         name (key="ObjectVRouter")
    /** Value 'true' indicates vrouter is removed. Holds value of 'false'
     * otherwise
     */
    2: optional bool                  deleted
    /** @display_name:Compute CPU and memory Information */
    3: optional list<VrouterCpuInfo>  cpu_info (tags=".mem_virt,.cpu_share,.mem_res", aggtype="union")
}

/**
 * @description: Uve for compute node CPU and memory statistics
 * @type: uve
 * @object: vrouter
 */
uve sandesh ComputeCpuStateTrace {
    /* Compute node CPU and memory information */
    1: ComputeCpuState data
}

/**
 * Structure definition for holding sizes of all routing tables of a given
 * routing-instance
 */
struct RouteTableSize {
    /** IPv4 Unicast route table size */
    1: u32 inet4_unicast;
    /** IPv4 Multicast route table size */
    2: u32 inet4_multicast;
    /** EVPN route table size */
    3: u32 evpn;
    /** Bridge route table size */
    4: u32 bridge;
    /** IPv6 unicast route table size */
    5: u32 inet6_unicast;
}

/**
 * Structure definition for holding vrouter control statistics
 */
struct VrouterControlStats {
    /** Name of the agent sending this UVE */
    1: string        name (key="ObjectVRouter")
    /** Value 'true' indicates vrouter is removed. Holds value of 'false'
     * otherwise
     */
    2: optional bool deleted

    /** @display_name:Vrouter Agent XMPP Statistics*/
    3: optional map<string, AgentXmppStats> raw_xmpp_stats (metric="agg", hidden="yes")
    /** XMPP statistics */
    4: optional map<string, AgentXmppStats> xmpp_stats (mstats="raw_xmpp_stats:DSChange:")

    /** @display_name:Vrouter Agent IFMAP Parse Error Statistics*/
    5: optional map<string, u64> raw_ifmap_stats (metric="agg", hidden="yes")
    /** IFMAP parse error statistics */
    6: optional map<string, u64> ifmap_stats
                     (mstats="raw_ifmap_stats:DSNon0:")
    /** IFMAP parse error statistics for last 1 hour */
    7: optional map<string, u64> ifmap_stats_1h
                     (mstats="raw_ifmap_stats:DSSum:3600")

    /** List of routing-instances along with the sizes of each of its tables */
    8: optional map<string, RouteTableSize> raw_rt_table_size (metric="agg", hidden="yes")
    /** List of routing-instances along with the sizes of each of its tables */
    9: optional map<string, RouteTableSize> rt_table_size (mstats="raw_rt_table_size:DSChange:")
}

/**
 * @description: Uve for vrouter control statistics
 * @type: uve
 * @object: vrouter
 */
uve sandesh VrouterControlStatsTrace {
    /** Vrouter Control statistics */
    1: VrouterControlStats data;
}
