#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

# -*- mode: python; -*-

import sys
Import('AgentEnv')
env = AgentEnv.Clone()

# Generate the sandesh UVE source files
vrouter_pkg = env.SandeshGenPy('vrouter.sandesh', 'vrouter/', False)
virtual_machine_pkg = env.SandeshGenPy('virtual_machine.sandesh', 'vrouter/sandesh/', False)
virtual_network_pkg = env.SandeshGenPy('virtual_network.sandesh', 'vrouter/sandesh/', False)
cpuinfo_pkg = env.SandeshGenPy('#controller/src/base/sandesh/cpuinfo.sandesh', 'vrouter/vrouter/', False)
conn_info_pkg = env.SandeshGenPy('#controller/src/base/sandesh/connection_info.sandesh', 'vrouter/vrouter/', False)
port_bmap_pkg = env.SandeshGenPy('port_bmap.sandesh', 'vrouter/sandesh/virtual_machine/', False)
flow_pkg = env.SandeshGenPy('#controller/src/sandesh/common/flow.sandesh', 'vrouter/sandesh/', False)
env.Depends(cpuinfo_pkg, vrouter_pkg)
env.Depends(conn_info_pkg, vrouter_pkg)
env.Depends(port_bmap_pkg, virtual_machine_pkg)

setup_sources = [
           'setup.py',
           'MANIFEST.in',
          ]

setup_sources_rules = []
for file in setup_sources:
    setup_sources_rules.append(env.Install("", "#controller/src/vnsw/agent/uve/" + file))

vrouter_sources = [
        'cpuinfo.py',
       ]

vrouter_sources_rules = []
for file in vrouter_sources:
    vrouter_sources_rules.append(env.Install('vrouter', '#controller/src/vnsw/agent/uve/' + file))

sandesh_init_rules = []
sandesh_init_rules.append(env.Install('vrouter', env['TOP'] + '/vnsw/agent/uve/vrouter/vrouter/__init__.py'))
sandesh_init_rules.append(env.Install('vrouter/sandesh', env['TOP'] + '/vnsw/agent/uve/vrouter/vrouter/__init__.py'))
env.Depends(sandesh_init_rules, vrouter_pkg)

rel_path = Dir('vrouter').path
def BuildInfoAction(target, source, env):
    env.GenerateBuildInfoPyCode(path=rel_path)
    
build_info_rules = [env.Command(target='buildinfo.py', source = None, action=BuildInfoAction)]

sdist_depends = []
sdist_depends.extend(setup_sources_rules)
sdist_depends.extend(vrouter_sources_rules)
sdist_depends.extend(vrouter_pkg)
sdist_depends.extend(cpuinfo_pkg)
sdist_depends.extend(conn_info_pkg)
sdist_depends.extend(virtual_machine_pkg)
sdist_depends.extend(virtual_network_pkg)
sdist_depends.extend(port_bmap_pkg)
sdist_depends.extend(sandesh_init_rules)
sdist_depends.extend(build_info_rules)
sdist_depends.extend(flow_pkg)
sdist_gen = env.Command('dist', 'setup.py', 'python setup.py sdist', chdir=1)

env.Depends(sdist_gen, sdist_depends)
env.Default(sdist_gen)
env.Alias("vrouter:node_mgr", sdist_gen)

# Generate the C++ source files
SandeshGenFiles  = env.SandeshGenCpp('port_bmap.sandesh')
SandeshGenFiles += env.SandeshGenCpp('vrouter.sandesh')
SandeshGenFiles += env.SandeshGenCpp('virtual_machine.sandesh')
SandeshGenFiles += env.SandeshGenCpp('virtual_network.sandesh')
SandeshGenFiles += env.SandeshGenCpp('acl.sandesh')
SandeshGenFiles += env.SandeshGenCpp('stats_interval.sandesh')

SandeshGenSrcs = env.ExtractCpp(SandeshGenFiles)
SandeshGenObjs = env.Object(SandeshGenSrcs)

libagentuve = env.Library('agentuve',
                         SandeshGenObjs +
                         ['agent_stats_collector.cc',
                          'agent_stats_sandesh_context.cc',
                          'drop_stats_io_context.cc',
                          'flow_stats_collector.cc',
                          'l4_port_bitmap.cc',
                          'interface_stats_io_context.cc',
                          'agent_uve.cc',
                          'vm_uve_entry.cc',
                          'vm_uve_table.cc',
                          'vm_stat.cc',
                          'vn_uve_entry.cc',
                          'vn_uve_table.cc',
                          'vrf_stats_io_context.cc',
                          'vrouter_stats_collector.cc',
                          'vrouter_uve_entry.cc',
                          ])

Import('BuildEnv')
mockEnv = BuildEnv.Clone()

def MapBuildDir(list):
    return map(lambda x: Dir('../../../' + x).abspath, list)

mockEnv.Prepend(LIBS=[
    'sandeshflow',
    'sandeshvns',
    'sandesh',
    'http',
    'http_parser',
    'connection_info',
    'io',
    'sandesh',
    'base',
    'boost_program_options',
    'curl',
    'pugixml',
     'rt'
    ])

if sys.platform != 'darwin':
    mockEnv.Append(LIBS = ['rt'])

libpath = MapBuildDir(
    [
     'base',
     'io',
    ])
mockEnv.Append(LIBPATH=libpath)
mockgen = mockEnv.Program('mock_generator',
                          ['mock_generator.cc'])
mockEnv.Alias("vrouter:mock_gen", mockgen)

env.SConscript('test/SConscript', exports='AgentEnv', duplicate=0)
