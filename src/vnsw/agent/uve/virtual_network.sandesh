/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

struct UveTunnelNhStats {
    1:  i64                 udp_tunnels; //used for mirroring
    2:  i64                 mpls_over_udp_tunnels;
    3:  i64                 mpls_over_gre_tunnels;
    4:  i64                 vxlan_tunnels;
}

struct UveMulticastNhStats {
    1:  i64                 source_replication_forwards; //evpn_composites
    2:  i64                 edge_replication_forwards; //fabric_composites
    3:  i64                 local_vm_l3_forwards; //encap_composites
    4:  i64                 total_multicast_forwards; //l2_mcast_composites
}

struct UveNhStats {
    1:  i64                    discards;
    2:  i64                    resolves;
    3:  i64                    l3_receives;
    4:  i64                    l2_receives;
    5:  i64                    local_vm_l3_forwards; //encaps
    6:  i64                    local_vm_l2_forwards; //l2_encaps
    7:  i64                    vrf_translates;
    8:  i64                    ecmp_forwards; //ecmp_composites
    9:  UveTunnelNhStats       tunnel_nh_stats;
    10: UveMulticastNhStats    comp_nh_stats;
}

struct UveOffloadStats {
    1: i64                 gro;
}

struct UveArpResponses {
    1: i64 proxies;
    2: i64 stitches;
    3: i64 floods;
}

struct UveVmiStats {
    1: UveArpResponses stats;
}

struct UvePhyIntfStats {
    1: UveArpResponses stats;
}

struct UveArpStats {
    1: UveVmiStats             from_vm_interface;
    2: UvePhyIntfStats         from_physical_interface;
}

struct UveVrfStats {
    1:  string                 name (aggtype="listkey")
    2:  i64                    diag_packet_count;
    3:  i64                    unknown_unicast_floods;
    4:  UveArpStats            arp_packet_counts;
    5:  UveOffloadStats        offload_packet_counts;
    6:  UveNhStats             nh_packet_counts;
}

struct InterVnStats {
    1: string                               other_vn; 
    2: string                               vrouter;
    3: u64                                  in_tpkts;
    4: u64                                  in_bytes;
    5: u64                                  out_tpkts;
    6: u64                                  out_bytes;    
}

struct UveInterVnStats {
    1: string                               other_vn (aggtype="listkey")
    2: i64                                  tpkts;
    3: i64                                  bytes;
}


// This is the structure sent by an application to the Collector to represent
// all or part of the Data Plane state of the UVE on this app instance.
//
struct UveVirtualNetworkAgent {
    1: string                              name (key="ObjectVNTable")
    2: optional bool                       deleted
    3: optional i32                        total_acl_rules; 
    4: optional list<string>               interface_list (aggtype="union")
    9: optional list<UveInterVnStats>      in_stats  (aggtype="append")
    10: optional list<UveInterVnStats>     out_stats (aggtype="append")
    11: optional list<string>              virtualmachine_list (aggtype="union")
    12: optional string                    acl;
    13: optional string                    mirror_acl;
    14: optional i32                       flow_count;
    15: optional i32                       associated_fip_count (aggtype="sum")
    16: optional list<u32>                 udp_sport_bitmap;
    17: optional list<u32>                 udp_dport_bitmap;
    18: optional list<u32>                 tcp_sport_bitmap;
    19: optional list<u32>                 tcp_dport_bitmap;
    20: optional u64                       in_bandwidth_usage (aggtype="sum")
    21: optional u64                       out_bandwidth_usage (aggtype="sum")
    22: optional list<UveVrfStats>         vrf_stats_list (aggtype="append")
    23: optional list<InterVnStats>        vn_stats (tags=".other_vn,.vrouter")
    24: optional u32                       ingress_flow_count (aggtype="sum")
    25: optional u32                       egress_flow_count (aggtype="sum")
}

uve sandesh UveVirtualNetworkAgentTrace {
    1: UveVirtualNetworkAgent               data;
}

