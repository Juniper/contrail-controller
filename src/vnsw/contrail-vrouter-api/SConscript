# -*- mode: python; -*-

#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

import os

Import('BuildEnv')
env = BuildEnv.Clone()

sources = [
    'MANIFEST.in',
    'requirements.txt',
    'setup.py',
    'test-requirements.txt',
    'contrail_vrouter_api/__init__.py',
    'contrail_vrouter_api/vrouter_api.py',
    'contrail_vrouter_api/tests/__init__.py',
    'contrail_vrouter_api/tests/instance_server.py',
    'contrail_vrouter_api/tests/test_vrouter_api.py',
    'contrail_vrouter_api/tests/test_vrouter_api_connection.py',
    ]

sources += env.ThriftGenPy(
    '#controller/src/vnsw/agent/openstack/instance_service.thrift',
    'contrail_vrouter_api')

cd_cmd = 'cd ' + Dir('.').path + ' && '
sdist_gen = env.Command('dist/contrail-vrouter-api-1.0.tar.gz',
                        sources,
                        cd_cmd + 'python setup.py sdist')

env.Alias('controller/src/vnsw/contrail_vrouter_api:sdist', sdist_gen)

test_sources = sources
packages = [
]

def BuildPyTestSetup(env, target, source):
    file = open(target[0].abspath, 'w')
    file.write("[easy_install]\nfind_links =")
    for pkg in source:
        dependency = env.File(pkg)
        file.write(" %s" % os.path.dirname(dependency.abspath))
    file.write("\n")
    file.close()
    return

def GeneratePyTestSetup(env, targets, source):
    """
    Generate a setup.cfg file that contains a list of directories
    where dependent packages can be found. The fact that package directory
    list is being given as a source automatically adds them as dependencies.
    """
    target = env.File('setup.cfg')
    return env.Command(target=target, source=source, action=BuildPyTestSetup);

env.Append(BUILDERS = {'PythonTestSetup': GeneratePyTestSetup})
test_sources += env.PythonTestSetup(source=packages)

test = env.Command(None, test_sources,
                   cd_cmd + 'python setup.py test')


env.Alias('controller/src/vnsw/contrail_vrouter_api:test', test)

if 'install' in BUILD_TARGETS:
    install_cmd = env.Command(None, sources,
                              cd_cmd + 'python setup.py install %s' %
                              env['PYTHON_INSTALL_OPT'])
    env.Alias('install', install_cmd)
