/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */

/*
 * vns.sandesh
 *
 * VNS Definitions
 */

// Service names
const string SERVICE_TOR_AGENT = "contrail-tor-agent"
const string SERVICE_VROUTER_AGENT = "contrail-vrouter-agent"
const string SERVICE_CONTROL_NODE = "contrail-control"
const string SERVICE_DNSD = "contrail-dns"
const string SERVICE_NAMED = "contrail-named"
const string SERVICE_API_SERVER = "contrail-api"
const string SERVICE_API_SERVER_0 = "contrail-api:0"
const string SERVICE_SCHEMA_TRANSFORMER = "contrail-schema"
const string SERVICE_SVC_MONITOR = "contrail-svc-monitor"
const string SERVICE_DEVICE_MANAGER = "contrail-device-manager"
const string SERVICE_COLLECTOR = "contrail-collector"
const string SERVICE_QUERY_ENGINE = "contrail-query-engine"
const string SERVICE_OPSERVER = "contrail-analytics-api"
const string SERVICE_ALARM_GENERATOR = "contrail-alarm-gen"
const string SERVICE_ALARM_GENERATOR_0 = "contrail-alarm-gen:0"
const string SERVICE_SNMP_COLLECTOR = "contrail-snmp-collector"
const string SERVICE_TOPOLOGY = "contrail-topology"
const string SERVICE_DISCOVERY = "contrail-discovery"
const string SERVICE_DISCOVERY_0 = "contrail-discovery:0"
const string SERVICE_STORAGE_STATS_MGR = "contrail-storage-stats"
const string SERVICE_IPMI_STATS_MGR = "contrail-ipmi-stats"
const string SERVICE_INVENTORY_AGENT = "contrail-inventory-agent"
const string SERVICE_CONTRAIL_DATABASE = "contrail-database"
const string SERVICE_KUBE_MANAGER = "contrail-kube-manager"
const string SERVICE_MESOS_MANAGER = "contrail-mesos-manager"
const string SERVICE_IFMAP_SERVER = "ifmap"
const string SERVICE_KAFKA = "kafka"
const string SERVICE_IRONIC_NOTIF_MANAGER = "ironic-notification-manager"
const string SERVICE_FABRIC_ANSIBLE = "contrail-fabric-ansible"

// NodeMgr names
const string SERVICE_COMPUTE_NODE_MGR = "contrail-vrouter-nodemgr"
const string SERVICE_CONTROL_NODE_MGR = "contrail-control-nodemgr"
const string SERVICE_ANALYTICS_NODE_MGR = "contrail-analytics-nodemgr"
const string SERVICE_CONFIG_NODE_MGR = "contrail-config-nodemgr"
const string SERVICE_DATABASE_NODE_MGR = "contrail-database-nodemgr"

// Supervisor names
const string SERVICE_ANALYTICS_SUPERVISOR = "supervisor-analytics"
const string SERVICE_CONTROL_SUPERVISOR = "supervisor-control"
const string SERVICE_CONFIG_SUPERVISOR = "supervisor-config"
const string SERVICE_COMPUTE_SUPERVISOR = "supervisor-vrouter"
const string SERVICE_DATABASE_SUPERVISOR = "supervisor-database"
const string SERVICE_WEBUI_SUPERVISOR = "supervisor-webui"
const string SERVICE_SUPPORT_SUPERVISOR = "supervisor-support-service"

// Http Server (Introspect) Ports
const u16 HttpPortConfigNodemgr = 8100
const u16 HttpPortControlNodemgr = 8101
const u16 HttpPortVRouterNodemgr = 8102
const u16 HttpPortDatabaseNodemgr = 8103
const u16 HttpPortAnalyticsNodemgr = 8104
const u16 HttpPortStorageStatsmgr = 8105
const u16 HttpPortIpmiStatsmgr = 8106
const u16 HttpPortInventorymgr = 8107
const u16 HttpPortKubeManager = 8108
const u16 HttpPortMesosManager = 8109
const u16 HttpPortIronicNotifManager = 8110
const u16 HttpPortFabricAnsible = 8111

const u16 HttpPortControl = 8083
const u16 HttpPortApiServer = 8084
const u16 HttpPortAgent = 8085
const u16 HttpPortSchemaTransformer = 8087
const u16 HttpPortSvcMonitor = 8088
const u16 HttpPortDeviceManager = 8096
const u16 HttpPortCollector = 8089
const u16 HttpPortOpserver = 8090
const u16 HttpPortQueryEngine = 8091
const u16 HttpPortDns = 8092
const u16 HttpPortAlarmGenerator = 5995
const u16 HttpPortSnmpCollector = 5920
const u16 HttpPortTopology = 5921
const u16 HttpPortDiscovery = 5997

// Supervisord control ports
const u16 AnalyticsSupervisorPort = 9002
const u16 ControlSupervisorPort = 9003
const u16 ConfigSupervisorPort = 9004
const u16 VRouterSupervisorPort = 9005
const u16 DatabaseSupervisorPort = 9007
const u16 WebuiSupervisorPort = 9008
const u16 SupportServiceSupervisorPort = 9011

// Daemon ports
const u16 DnsServerPort = 53
const u16 ControlBgpPort = 179
const u16 ControlXmppPort = 5269
const u16 DiscoveryServerPort = 5998
const u16 RedisQueryPort = 6379
const u16 RedisUvePort = 6379
const u16 RedisWebuiPort = 6383
const u16 KeystonePort = 35357
const u16 WebConsolePort = 8080
const u16 OpServerPort = 8081
const u16 ApiServerPort = 8082
const u16 CollectorPort = 8086
const u16 CollectorProtobufPort = 3333
const u16 CollectorStructuredSyslogPort = 3514
const u16 DnsXmppPort = 8093
const u16 DnsRndcPort = 8094
const u16 ApiServerOpenPort = 8095
const u16 AnalyzerUdpPort = 8099
const u16 PortIpcVrouterAgentPort = 9091
const u16 MetadataProxyVrouterAgentPort = 8097   // TCP
const u16 VrouterAgentMirrorClientUdpPort = 8097 // UDP
const u16 VrouterAgentDnsClientUdpPort = 8098    // UDP
const u16 ContrailDnsClientUdpPort = 8092        // UDP
const u16 OpServerAdminPort = 8181

const map<string, u16> ServiceHttpPortMap = {
    SERVICE_VROUTER_AGENT : HttpPortAgent,
    SERVICE_CONTROL_NODE : HttpPortControl,
    SERVICE_COLLECTOR : HttpPortCollector,
    SERVICE_QUERY_ENGINE : HttpPortQueryEngine,
    SERVICE_OPSERVER : HttpPortOpserver,
    SERVICE_DNSD : HttpPortDns,
    SERVICE_API_SERVER : HttpPortApiServer,
    SERVICE_API_SERVER_0 : HttpPortApiServer,
    SERVICE_SCHEMA_TRANSFORMER : HttpPortSchemaTransformer,
    SERVICE_SVC_MONITOR : HttpPortSvcMonitor,
    SERVICE_DEVICE_MANAGER : HttpPortDeviceManager,
    SERVICE_CONFIG_NODE_MGR : HttpPortConfigNodemgr,
    SERVICE_ANALYTICS_NODE_MGR : HttpPortAnalyticsNodemgr,
    SERVICE_COMPUTE_NODE_MGR : HttpPortVRouterNodemgr,
    SERVICE_CONTROL_NODE_MGR : HttpPortControlNodemgr,
    SERVICE_DATABASE_NODE_MGR : HttpPortDatabaseNodemgr,
    SERVICE_STORAGE_STATS_MGR : HttpPortStorageStatsmgr,
    SERVICE_IPMI_STATS_MGR : HttpPortIpmiStatsmgr,
    SERVICE_INVENTORY_AGENT: HttpPortInventorymgr,
    SERVICE_ALARM_GENERATOR: HttpPortAlarmGenerator,
    SERVICE_ALARM_GENERATOR_0: HttpPortAlarmGenerator,
    SERVICE_SNMP_COLLECTOR : HttpPortSnmpCollector,
    SERVICE_TOPOLOGY : HttpPortTopology,
    SERVICE_DISCOVERY : HttpPortDiscovery
    SERVICE_DISCOVERY_0 : HttpPortDiscovery
    SERVICE_KUBE_MANAGER: HttpPortKubeManager,
    SERVICE_MESOS_MANAGER: HttpPortMesosManager,
    SERVICE_IRONIC_NOTIF_MANAGER: HttpPortIronicNotifManager,
    SERVICE_FABRIC_ANSIBLE: HttpPortFabricAnsible,
}

const list<string> NodeUVEImplementedServices = [
    SERVICE_TOR_AGENT,
    SERVICE_VROUTER_AGENT,
    SERVICE_CONTROL_NODE,
    SERVICE_COLLECTOR,
    SERVICE_QUERY_ENGINE,
    SERVICE_OPSERVER,
    SERVICE_API_SERVER,
    SERVICE_API_SERVER_0,
    SERVICE_SCHEMA_TRANSFORMER,
    SERVICE_SVC_MONITOR,
    SERVICE_DEVICE_MANAGER,
    SERVICE_ALARM_GENERATOR,
    SERVICE_ALARM_GENERATOR_0,
    SERVICE_SNMP_COLLECTOR,
    SERVICE_DATABASE_NODE_MGR,
    SERVICE_CONFIG_NODE_MGR,
    SERVICE_ANALYTICS_NODE_MGR,
    SERVICE_COMPUTE_NODE_MGR,
    SERVICE_CONTROL_NODE_MGR,
    SERVICE_DATABASE_NODE_MGR,
    SERVICE_TOPOLOGY,
    SERVICE_DISCOVERY,
    SERVICE_DISCOVERY_0,
    SERVICE_KUBE_MANAGER,
    SERVICE_MESOS_MANAGER,
]

const list<string> BackupImplementedServices = [
    SERVICE_SCHEMA_TRANSFORMER,
    SERVICE_SVC_MONITOR,
    SERVICE_DEVICE_MANAGER,
    SERVICE_KUBE_MANAGER,
]

const string ContrailKeystoneAuthConfigurationFile = '/etc/contrail/contrail-keystone-auth.conf'
const string ContrailDatabaseConfigurationFile = '/etc/contrail/contrail-database.conf'

const map<string, list<string> > ServicesDefaultConfigurationFiles = {
    SERVICE_VROUTER_AGENT : ['/etc/contrail/contrail-vrouter-agent.conf'],
    SERVICE_CONTROL_NODE : ['/etc/contrail/contrail-control.conf'],
    SERVICE_COLLECTOR : ['/etc/contrail/contrail-collector.conf',
                         ContrailKeystoneAuthConfigurationFile,
                         ContrailDatabaseConfigurationFile]
    SERVICE_QUERY_ENGINE : ['/etc/contrail/contrail-query-engine.conf',
                            ContrailDatabaseConfigurationFile],
    SERVICE_OPSERVER : ['/etc/contrail/contrail-analytics-api.conf',
                        ContrailKeystoneAuthConfigurationFile,
                        ContrailDatabaseConfigurationFile]
    SERVICE_ALARM_GENERATOR : ['/etc/contrail/contrail-alarm-gen.conf',
                               ContrailKeystoneAuthConfigurationFile]
    SERVICE_ALARM_GENERATOR_0 : ['/etc/contrail/contrail-alarm-gen.conf',
                                 ContrailKeystoneAuthConfigurationFile]
    SERVICE_SNMP_COLLECTOR : ['/etc/contrail/contrail-snmp-collector.conf',
                              ContrailKeystoneAuthConfigurationFile]
    SERVICE_TOPOLOGY : ['/etc/contrail/contrail-topology.conf',
                        ContrailKeystoneAuthConfigurationFile],
    SERVICE_API_SERVER : ['/etc/contrail/contrail-api.conf'],
    SERVICE_API_SERVER_0 : ['/etc/contrail/contrail-api.conf'],
    SERVICE_DISCOVERY : ['/etc/contrail/contrail-discovery.conf'],
    SERVICE_DISCOVERY_0 : ['/etc/contrail/contrail-discovery.conf'],
    SERVICE_SCHEMA_TRANSFORMER : ['/etc/contrail/contrail-schema.conf'],
    SERVICE_SVC_MONITOR : ['/etc/contrail/contrail-svc-monitor.conf'],
    SERVICE_DEVICE_MANAGER : ['/etc/contrail/contrail-device-manager.conf'],
    SERVICE_DNSD : ['/etc/contrail/dns.conf'],
    SERVICE_KUBE_MANAGER : ['/etc/contrail/contrail-kubernetes.conf'],
    SERVICE_MESOS_MANAGER : ['/etc/contrail/contrail-mesos.conf'],
}

enum Module {
    CONTROL_NODE,
    VROUTER_AGENT,
    API_SERVER,
    SCHEMA_TRANSFORMER,
    OPSERVER,
    COLLECTOR,
    QUERY_ENGINE,
    SVC_MONITOR,
    DEVICE_MANAGER,
    DNS,
    DISCOVERY_SERVICE,
    IFMAP_SERVER,
    XMPP_SERVER,
    ANALYTICS_NODE_MGR,
    CONTROL_NODE_MGR,
    CONFIG_NODE_MGR,
    DATABASE_NODE_MGR,
    WEBUI_NODE_MGR,
    COMPUTE_NODE_MGR,
    STORAGE_STATS_MGR,
    IPMI_STATS_MGR,
    CONTRAIL_SNMP_COLLECTOR,
    CONTRAIL_TOPOLOGY,
    INVENTORY_AGENT,
    ALARM_GENERATOR,
    TOR_AGENT,
    CONTRAIL_BROADVIEW,
    KUBE_MANAGER,
    MESOS_MANAGER,
    MAX_MODULE,
    IRONIC_NOTIF_MANAGER,
    FABRIC_ANSIBLE,
}

enum VrouterAgentType {
    VROUTER_AGENT_TOR,
    VROUTER_AGENT_TSN,
    VROUTER_AGENT_EMBEDDED
}

const map<byte, string> VrouterAgentTypeMap = {
    VrouterAgentType.VROUTER_AGENT_TOR     : 'TOR',
    VrouterAgentType.VROUTER_AGENT_TSN     : 'TSN',
    VrouterAgentType.VROUTER_AGENT_EMBEDDED: 'VROUTER'
}

enum VrouterAgentPlatformType {
    VROUTER_AGENT_ON_NIC,
    VROUTER_AGENT_ON_HOST_DPDK,
    VROUTER_AGENT_ON_WINDOWS,
    VROUTER_AGENT_ON_HOST
}

const map<byte, string> VrouterAgentPlatformTypeMap = {
    VrouterAgentPlatformType.VROUTER_AGENT_ON_NIC        : 'NIC',
    VrouterAgentPlatformType.VROUTER_AGENT_ON_HOST_DPDK  : 'HOST_DPDK',
    VrouterAgentPlatformType.VROUTER_AGENT_ON_WINDOWS    : 'WINDOWS',
    VrouterAgentPlatformType.VROUTER_AGENT_ON_HOST       : 'HOST'
}

enum VrouterAgentVmState {
    VROUTER_AGENT_VM_ACTIVE,
    VROUTER_AGENT_VM_PAUSED,
    VROUTER_AGENT_VM_SHUTDOWN,
    VROUTER_AGENT_VM_UNKNOWN
}

const map<byte, string> VrouterAgentVmStateMap = {
    VrouterAgentVmState.VROUTER_AGENT_VM_ACTIVE     : 'ACTIVE',
    VrouterAgentVmState.VROUTER_AGENT_VM_PAUSED     : 'PAUSED',
    VrouterAgentVmState.VROUTER_AGENT_VM_SHUTDOWN   : 'SHUT OFF',
    VrouterAgentVmState.VROUTER_AGENT_VM_UNKNOWN    : 'UNKNOWN'
}

enum VrouterAgentGatewayMode {
    VCPE,
    SERVER,
    NONE
}

const map<byte, string> VrouterAgentGatewayModeMap = {
    VrouterAgentGatewayMode.VCPE   : 'VCPE',
    VrouterAgentGatewayMode.SERVER : 'SERVER',
    VrouterAgentGatewayMode.NONE   : 'NONE'
}

const string MODULE_CONTROL_NODE_NAME = SERVICE_CONTROL_NODE
const string MODULE_VROUTER_AGENT_NAME = SERVICE_VROUTER_AGENT
const string MODULE_API_SERVER_NAME = SERVICE_API_SERVER
const string MODULE_SCHEMA_TRANSFORMER_NAME = SERVICE_SCHEMA_TRANSFORMER
const string MODULE_OPSERVER_NAME = SERVICE_OPSERVER
const string MODULE_ALARM_GENERATOR_NAME = SERVICE_ALARM_GENERATOR
const string MODULE_COLLECTOR_NAME = SERVICE_COLLECTOR
const string MODULE_QUERY_ENGINE_NAME = SERVICE_QUERY_ENGINE
const string MODULE_SVC_MONITOR_NAME = SERVICE_SVC_MONITOR
const string MODULE_DEVICE_MANAGER_NAME = SERVICE_DEVICE_MANAGER
const string MODULE_DNS_NAME = SERVICE_DNSD
const string MODULE_DISCOVERY_SERVICE_NAME = SERVICE_DISCOVERY
const string MODULE_IFMAP_SERVER_NAME = "IfmapServer"
const string MODULE_XMPP_SERVER_NAME = "XmppServer"
const string MODULE_ANALYTICS_NODE_MGR_NAME = SERVICE_ANALYTICS_NODE_MGR
const string MODULE_CONTROL_NODE_MGR_NAME = SERVICE_CONTROL_NODE_MGR
const string MODULE_CONFIG_NODE_MGR_NAME = SERVICE_CONFIG_NODE_MGR
const string MODULE_DATABASE_NODE_MGR_NAME = SERVICE_DATABASE_NODE_MGR
const string MODULE_WEBUI_NODE_MGR_NAME = "Contrail-WebUI-Nodemgr"
const string MODULE_COMPUTE_NODE_MGR_NAME = SERVICE_COMPUTE_NODE_MGR
const string MODULE_STORAGE_STATS_MGR_NAME = "Storage-Stats-mgr"
const string MODULE_IPMI_STATS_MGR_NAME = "Ipmi-Stats-mgr"
const string MODULE_CONTRAIL_SNMP_COLLECTOR_NAME = SERVICE_SNMP_COLLECTOR
const string MODULE_CONTRAIL_TOPOLOGY_NAME = SERVICE_TOPOLOGY
const string MODULE_SERVER_INVENTORY_AGENT_NAME = "InventoryAgent"
const string MODULE_TOR_AGENT_NAME = "contrail-tor-agent"
const string MODULE_CONTRAIL_BROADVIEW_NAME = "contrail-broadview"
const string MODULE_KUBE_MANAGER_NAME = SERVICE_KUBE_MANAGER
const string MODULE_MESOS_MANAGER_NAME = SERVICE_MESOS_MANAGER
const string MODULE_IRONIC_NOTIF_MANAGER_NAME = SERVICE_IRONIC_NOTIF_MANAGER
const string MODULE_FABRIC_ANSIBLE_NAME = "FabricAnsible"

const map<Module, string> ModuleNames = {
    Module.CONTROL_NODE       : MODULE_CONTROL_NODE_NAME,
    Module.VROUTER_AGENT      : MODULE_VROUTER_AGENT_NAME,
    Module.API_SERVER         : MODULE_API_SERVER_NAME,
    Module.SCHEMA_TRANSFORMER : MODULE_SCHEMA_TRANSFORMER_NAME,
    Module.OPSERVER           : MODULE_OPSERVER_NAME,
    Module.COLLECTOR          : MODULE_COLLECTOR_NAME,
    Module.QUERY_ENGINE       : MODULE_QUERY_ENGINE_NAME,
    Module.SVC_MONITOR        : MODULE_SVC_MONITOR_NAME,
    Module.DEVICE_MANAGER     : MODULE_DEVICE_MANAGER_NAME,
    Module.DNS                : MODULE_DNS_NAME,
    Module.DISCOVERY_SERVICE  : MODULE_DISCOVERY_SERVICE_NAME,
    Module.IFMAP_SERVER       : MODULE_IFMAP_SERVER_NAME,
    Module.XMPP_SERVER        : MODULE_XMPP_SERVER_NAME,
    Module.ANALYTICS_NODE_MGR : MODULE_ANALYTICS_NODE_MGR_NAME,
    Module.CONTROL_NODE_MGR   : MODULE_CONTROL_NODE_MGR_NAME,
    Module.CONFIG_NODE_MGR    : MODULE_CONFIG_NODE_MGR_NAME,
    Module.DATABASE_NODE_MGR  : MODULE_DATABASE_NODE_MGR_NAME,
    Module.WEBUI_NODE_MGR     : MODULE_WEBUI_NODE_MGR_NAME,
    Module.COMPUTE_NODE_MGR   : MODULE_COMPUTE_NODE_MGR_NAME,
    Module.STORAGE_STATS_MGR  : MODULE_STORAGE_STATS_MGR_NAME,
    Module.IPMI_STATS_MGR     : MODULE_IPMI_STATS_MGR_NAME,
    Module.CONTRAIL_SNMP_COLLECTOR  : MODULE_CONTRAIL_SNMP_COLLECTOR_NAME,
    Module.CONTRAIL_TOPOLOGY  : MODULE_CONTRAIL_TOPOLOGY_NAME,
    Module.INVENTORY_AGENT    : MODULE_SERVER_INVENTORY_AGENT_NAME,
    Module.ALARM_GENERATOR    : MODULE_ALARM_GENERATOR_NAME,
    Module.TOR_AGENT          : MODULE_TOR_AGENT_NAME,
    Module.CONTRAIL_BROADVIEW : MODULE_CONTRAIL_BROADVIEW_NAME,
    Module.KUBE_MANAGER       : MODULE_KUBE_MANAGER_NAME,
    Module.MESOS_MANAGER      : MODULE_MESOS_MANAGER_NAME,
    Module.IRONIC_NOTIF_MANAGER    : MODULE_IRONIC_NOTIF_MANAGER_NAME,
    Module.FABRIC_ANSIBLE    : MODULE_FABRIC_ANSIBLE_NAME,
}

const map<string, Module> ModuleIds = {
    MODULE_CONTROL_NODE_NAME           : Module.CONTROL_NODE,
    MODULE_VROUTER_AGENT_NAME          : Module.VROUTER_AGENT,
    MODULE_API_SERVER_NAME             : Module.API_SERVER,
    MODULE_SCHEMA_TRANSFORMER_NAME     : Module.SCHEMA_TRANSFORMER,
    MODULE_OPSERVER_NAME               : Module.OPSERVER,
    MODULE_ALARM_GENERATOR_NAME        : Module.ALARM_GENERATOR,
    MODULE_COLLECTOR_NAME              : Module.COLLECTOR,
    MODULE_QUERY_ENGINE_NAME           : Module.QUERY_ENGINE,
    MODULE_SVC_MONITOR_NAME            : Module.SVC_MONITOR,
    MODULE_DEVICE_MANAGER_NAME         : Module.DEVICE_MANAGER,
    MODULE_DNS_NAME                    : Module.DNS,
    MODULE_DISCOVERY_SERVICE_NAME      : Module.DISCOVERY_SERVICE
    MODULE_IFMAP_SERVER_NAME           : Module.IFMAP_SERVER,
    MODULE_XMPP_SERVER_NAME            : Module.XMPP_SERVER,
    MODULE_ANALYTICS_NODE_MGR_NAME     : Module.ANALYTICS_NODE_MGR,
    MODULE_CONTROL_NODE_MGR_NAME       : Module.CONTROL_NODE_MGR,
    MODULE_CONFIG_NODE_MGR_NAME        : Module.CONFIG_NODE_MGR,
    MODULE_DATABASE_NODE_MGR_NAME      : Module.DATABASE_NODE_MGR,
    MODULE_WEBUI_NODE_MGR_NAME         : Module.WEBUI_NODE_MGR,
    MODULE_COMPUTE_NODE_MGR_NAME       : Module.COMPUTE_NODE_MGR,
    MODULE_STORAGE_STATS_MGR_NAME      : Module.STORAGE_STATS_MGR,
    MODULE_IPMI_STATS_MGR_NAME         : Module.IPMI_STATS_MGR,
    MODULE_CONTRAIL_SNMP_COLLECTOR_NAME  : Module.CONTRAIL_SNMP_COLLECTOR,
    MODULE_CONTRAIL_TOPOLOGY_NAME      : Module.CONTRAIL_TOPOLOGY,
    MODULE_SERVER_INVENTORY_AGENT_NAME : Module.INVENTORY_AGENT,
    MODULE_TOR_AGENT_NAME              : Module.TOR_AGENT
    MODULE_CONTRAIL_BROADVIEW_NAME     : Module.CONTRAIL_BROADVIEW,
    MODULE_KUBE_MANAGER_NAME           : Module.KUBE_MANAGER,
    MODULE_MESOS_MANAGER_NAME          : Module.MESOS_MANAGER,
    MODULE_IRONIC_NOTIF_MANAGER_NAME   : Module.IRONIC_NOTIF_MANAGER,
    MODULE_FABRIC_ANSIBLE_NAME         : Module.FABRIC_ANSIBLE,
}


// Supervisor names
enum NodeType {
    INVALID,
    CONFIG,
    CONTROL,
    ANALYTICS,
    COMPUTE,
    WEBUI,
    DATABASE,
    OPENSTACK,
    SERVERMGR,
    KUBERNETESMGR,
}

const map<NodeType, string> UVENodeTypeNames = {
    NodeType.INVALID         : "Invalid",
    NodeType.CONFIG          : "config-node",
    NodeType.CONTROL         : "control-node",
    NodeType.ANALYTICS       : "analytics-node",
    NodeType.COMPUTE         : "vrouter",
    NodeType.DATABASE        : "database-node",
    NodeType.KUBERNETESMGR   : "kubernetes-manager-node",
}

const map<NodeType, string> NodeTypeNames = {
    NodeType.INVALID         : "Invalid",
    NodeType.CONFIG          : "Config",
    NodeType.CONTROL         : "Control",
    NodeType.ANALYTICS       : "Analytics",
    NodeType.COMPUTE         : "Compute",
    NodeType.WEBUI           : "WebUI",
    NodeType.DATABASE        : "Database",
    NodeType.OPENSTACK       : "OpenStack",
    NodeType.SERVERMGR       : "ServerMgr",
    NodeType.KUBERNETESMGR   : "KubernetesMgr",
}

const map<NodeType, string> NodeManagerNodeTypeNames = {
    NodeType.ANALYTICS : 'contrail-analytics',
    NodeType.CONFIG    : 'contrail-config',
    NodeType.DATABASE  : 'contrail-database',
    NodeType.CONTROL   : 'contrail-control',
    NodeType.COMPUTE   : 'contrail-vrouter',
}

const map <NodeType, list<string> > NodeType2ServicesNamesMap = {
    NodeType.CONFIG : [ SERVICE_CONFIG_NODE_MGR,
                        SERVICE_API_SERVER,
                        SERVICE_SCHEMA_TRANSFORMER,
                        SERVICE_SVC_MONITOR,
                        SERVICE_DEVICE_MANAGER,
                        SERVICE_DISCOVERY,
                        SERVICE_IFMAP_SERVER,
                      ],
    NodeType.CONTROL : [ SERVICE_CONTROL_NODE_MGR,
                         SERVICE_CONTROL_NODE,
                         SERVICE_DNSD,
                         SERVICE_NAMED,
                       ],
    NodeType.ANALYTICS : [ SERVICE_ANALYTICS_NODE_MGR,
                           SERVICE_COLLECTOR,
                           SERVICE_QUERY_ENGINE,
                           SERVICE_OPSERVER,
                           SERVICE_ALARM_GENERATOR,
                           SERVICE_SNMP_COLLECTOR,
                           SERVICE_TOPOLOGY,
                         ],
    NodeType.DATABASE : [ SERVICE_DATABASE_NODE_MGR,
                          SERVICE_CONTRAIL_DATABASE,
                          SERVICE_KAFKA,
                        ],
    NodeType.COMPUTE : [ SERVICE_COMPUTE_NODE_MGR,
                         SERVICE_VROUTER_AGENT,
                       ],
    NodeType.KUBERNETESMGR : [ SERVICE_KUBE_MANAGER,
                       ],
}

const map <Module, NodeType> Module2NodeType = {
    Module.CONTROL_NODE       : NodeType.CONTROL,
    Module.VROUTER_AGENT      : NodeType.COMPUTE,
    Module.API_SERVER         : NodeType.CONFIG,
    Module.SCHEMA_TRANSFORMER : NodeType.CONFIG,
    Module.OPSERVER           : NodeType.ANALYTICS,
    Module.ALARM_GENERATOR    : NodeType.ANALYTICS,
    Module.COLLECTOR          : NodeType.ANALYTICS,
    Module.QUERY_ENGINE       : NodeType.ANALYTICS,
    Module.SVC_MONITOR        : NodeType.CONFIG,
    Module.DEVICE_MANAGER     : NodeType.CONFIG,
    Module.DNS                : NodeType.CONTROL,
    Module.DISCOVERY_SERVICE  : NodeType.CONFIG,
    Module.IFMAP_SERVER       : NodeType.CONFIG,
    Module.XMPP_SERVER        : NodeType.CONTROL,
    Module.ANALYTICS_NODE_MGR : NodeType.ANALYTICS,
    Module.CONTROL_NODE_MGR   : NodeType.CONTROL,
    Module.CONFIG_NODE_MGR    : NodeType.CONFIG,
    Module.DATABASE_NODE_MGR  : NodeType.DATABASE,
    Module.WEBUI_NODE_MGR     : NodeType.WEBUI,
    Module.COMPUTE_NODE_MGR   : NodeType.COMPUTE,
    Module.STORAGE_STATS_MGR  : NodeType.COMPUTE,
    Module.IPMI_STATS_MGR     : NodeType.SERVERMGR,
    Module.CONTRAIL_SNMP_COLLECTOR : NodeType.ANALYTICS,
    Module.CONTRAIL_TOPOLOGY  : NodeType.ANALYTICS,
    Module.INVENTORY_AGENT    : NodeType.COMPUTE,
    Module.TOR_AGENT          : NodeType.COMPUTE,
    Module.CONTRAIL_BROADVIEW : NodeType.ANALYTICS,
    Module.KUBE_MANAGER       : NodeType.KUBERNETESMGR,
    Module.MESOS_MANAGER      : NodeType.CONFIG,
    Module.FABRIC_ANSIBLE    : NodeType.CONFIG,
    Module.IRONIC_NOTIF_MANAGER    : NodeType.CONFIG,
}

const string INSTANCE_ID_DEFAULT = "0"

enum Category {
    DEFAULT,
    XMPP,
    BGP,
    BGP_CONFIG,
    BGP_PEER,
    IFMAP,
    IFMAP_AGENT,
    IFMAP_PEER,
    IFMAP_STATE_MACHINE,
    IFMAP_XMPP,
    TCP,
    ROUTING_INSTANCE,
    VROUTER,
    DISCOVERY,
    DNSAGENT,
    DISCOVERYCLIENT,
    UDP,
    CONFIG_CLIENT,
}

const map<Category, string> CategoryNames = {
    Category.DEFAULT                     : "",
    Category.XMPP                        : "XMPP",
    Category.BGP                         : "BGP",
    Category.BGP_CONFIG                  : "BGPConfig",
    Category.BGP_PEER                    : "BGPPeer",
    Category.IFMAP                       : "IFMap",
    Category.IFMAP_AGENT                 : "IFMapAgent",
    Category.IFMAP_PEER                  : "IFMapPeer",
    Category.IFMAP_STATE_MACHINE         : "IFMapStateMachine",
    Category.IFMAP_XMPP                  : "IFMapXMPP",
    Category.TCP                         : "TCP",
    Category.ROUTING_INSTANCE            : "RoutingInstance"
    Category.VROUTER                     : "VRouter",
    Category.DISCOVERY                   : "Discovery",
    Category.DNSAGENT                    : "DnsAgent",
    Category.DISCOVERYCLIENT             : "DiscoveryClient",
    Category.UDP                         : "UDP",
    Category.CONFIG_CLIENT               : "ConfigClientManager",
}

const map<Module, list<Category>> ModuleCategoryMap = {
    Module.CONTROL_NODE       : [Category.DEFAULT,
                                 Category.XMPP,
                                 Category.BGP,
                                 Category.BGP_CONFIG,
                                 Category.BGP_PEER,
                                 Category.IFMAP,
                                 Category.IFMAP_PEER,
                                 Category.IFMAP_STATE_MACHINE,
                                 Category.IFMAP_XMPP,
                                 Category.TCP,
                                 Category.ROUTING_INSTANCE,
                                 Category.CONFIG_CLIENT,
                                ],
    Module.VROUTER_AGENT      : [Category.DEFAULT,
                                 Category.XMPP,
                                 Category.IFMAP_AGENT,
                                 Category.TCP,
                                 Category.VROUTER,
                                ],
    Module.API_SERVER         : [Category.DEFAULT,
                                ],
    Module.SCHEMA_TRANSFORMER : [Category.DEFAULT,
                                ],
    Module.OPSERVER           : [Category.DEFAULT,
                                ],
    Module.COLLECTOR          : [Category.DEFAULT,
                                 Category.TCP,
                                ],
    Module.QUERY_ENGINE       : [Category.DEFAULT,
                                ],
    Module.SVC_MONITOR        : [Category.DEFAULT,
                                ],
    Module.DEVICE_MANAGER        : [Category.DEFAULT,
                                ],
    Module.DNS                : [Category.DEFAULT,
                                 Category.DNSAGENT,
                                ],
    Module.DISCOVERY_SERVICE  : [Category.DEFAULT,
                                 Category.DISCOVERY,
                                ],
    Module.CONTRAIL_SNMP_COLLECTOR : [Category.DEFAULT,
                                ],
    Module.CONTRAIL_TOPOLOGY  : [Category.DEFAULT,
                                ],
    Module.CONTRAIL_BROADVIEW : [Category.DEFAULT,
                                ],
    Module.KUBE_MANAGER       : [Category.DEFAULT,
                                ],
    Module.MESOS_MANAGER      : [Category.DEFAULT,
                                ],
}

const string COLLECTOR_DISCOVERY_SERVICE_NAME = "Collector"
const string API_SERVER_DISCOVERY_SERVICE_NAME = "ApiServer"
const string ANALYTICS_API_SERVER_DISCOVERY_SERVICE_NAME = "OpServer"
const string ALARM_GENERATOR_SERVICE_NAME = "AlarmGenerator"
const string IFMAP_SERVER_DISCOVERY_SERVICE_NAME = "IfmapServer"
const string XMPP_SERVER_DISCOVERY_SERVICE_NAME = "xmpp-server"
const string DNS_SERVER_DISCOVERY_SERVICE_NAME = "dns-server"

// Cassandra Keyspace Names
const string SVC_MONITOR_KEYSPACE_NAME = "svc_monitor_keyspace"
const string SCHEMA_KEYSPACE_NAME = "to_bgp_keyspace"
const string API_SERVER_KEYSPACE_NAME = "config_db_uuid"
const string DISCOVERY_SERVER_KEYSPACE_NAME = "DISCOVERY_SERVER"
const string USERAGENT_KEYSPACE_NAME = "useragent"
const string DEVICE_MANAGER_KEYSPACE_NAME = "dm_keyspace"
const string KUBE_MANAGER_KEYSPACE_NAME = "kube_manager_keyspace"
const string MESOS_MANAGER_KEYSPACE_NAME = "mesos_manager_keyspace"

const list<string> RepairNeededKeyspaces = [
    API_SERVER_KEYSPACE_NAME,
    SCHEMA_KEYSPACE_NAME,
    SVC_MONITOR_KEYSPACE_NAME,
    DISCOVERY_SERVER_KEYSPACE_NAME,
    USERAGENT_KEYSPACE_NAME,
    DEVICE_MANAGER_KEYSPACE_NAME,
]

// Set to default of 10 days
const u32 CASSANDRA_DEFAULT_GC_GRACE_SECONDS = 864000

// Define the threadpool names
const string READSTAGE = "ReadStage"
const string MUTATIONSTAGE = "MutationStage"
const string MEMTABLEFLUSHWRITER = "MemtableFlushWriter"
const string NATIVETRANSPORTREQUESTS = "Native-Transport-Requests"
const string COMPACTIONEXECUTOR = "CompactionExecutor"
const list<string> ThreadPoolNames = [
    READSTAGE,
    MUTATIONSTAGE,
    MEMTABLEFLUSHWRITER,
    NATIVETRANSPORTREQUESTS,
    COMPACTIONEXECUTOR,
]

const string CLOUD_ADMIN_ROLE = "admin"

const string AAA_MODE_NO_AUTH = "no-auth"
const string AAA_MODE_CLOUD_ADMIN = "cloud-admin"
const string AAA_MODE_RBAC = "rbac"

const list <string> APIAAAModes = [
    AAA_MODE_NO_AUTH,
    AAA_MODE_CLOUD_ADMIN,
    AAA_MODE_RBAC,
]

// Pre-defined Tag Type
enum TagTypeEnum {
    LABEL,
    APPLICATION,
    TIER,
    DEPLOYMENT,
    SITE,
}

// Mapping Tag Type ID to Name
const map<TagTypeEnum, string> TagTypeIdToName = {
    //ID to
    TagTypeEnum.LABEL: "label",
    TagTypeEnum.APPLICATION: "application",
    TagTypeEnum.TIER: "tier",
    TagTypeEnum.DEPLOYMENT: "deployment",
    TagTypeEnum.SITE: "site",
}

// Mapping Tag Type Name to ID
const map<string, TagTypeEnum> TagTypeNameToId = {
    "label": TagTypeEnum.LABEL,
    "application": TagTypeEnum.APPLICATION,
    "tier": TagTypeEnum.TIER,
    "deployment": TagTypeEnum.DEPLOYMENT,
    "site": TagTypeEnum.SITE,
}

// Tag Type authorized to NOT be unique on an object
const list<string> TAG_TYPE_NOT_UNIQUE_PER_OBJECT = [
    "label", //TagTypeIdToName[TagTypeEnum.LABEL],
]

// Match Tag Types to use by default
const list<TagTypeEnum> DEFAULT_MATCH_TAG_TYPE = [
    TagTypeEnum.APPLICATION,
]

const list<string> TAG_TYPE_AUTHORIZED_ON_ADDRESS_GROUP = [
    "label", //TagTypeIdToName[TagTypeEnum.LABEL],
]

// Security Draft constants
const string POLICY_MANAGEMENT_NAME_FOR_SECURITY_DRAFT = "draft-policy-management"
// Order here is important
const list<string> SECURITY_OBJECT_TYPES = [
    'application_policy_set',
    'firewall_policy',
    'firewall_rule',
    'service_group',
    'address_group',
]