/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */
 
/* 
 * flow.sandesh
 *
 * Flow sandesh definitions
 */

struct Sessioninfo {
    1: optional i64 sampled_tx_bytes;
    2: optional i64 sampled_tx_pkts;
    3: optional i64 sampled_rx_bytes;
    4: optional i64 sampled_rx_pkts;
    5: optional i64 logged_tx_bytes;
    6: optional i64 logged_tx_pkts;
    7: optional i64 logged_rx_bytes;
    8: optional i64 logged_rx_pkts;
    9: optional uuid_t forward_flow_uuid;
   10: optional uuid_t reverse_flow_uuid;
   11: optional i16 local_tcp_flags;
   12: optional i16 reverse_tcp_flags;
   13: optional string vm;
   14: optional i64 setup_time;
   15: optional i64 teardown_time;
   16: optional string action;
   17: optional string reverse_action;
   18: optional uuid_t sg_rule_uuid;
   19: optional uuid_t reverse_sg_rule_uuid;
   20: optional ipaddr other_vrouter_ip;
   21: optional uuid_t nw_ace_uuid;
   22: optional uuid_t reverse_nw_ace_uuid;
   23: optional u16 underlay_proto;
   24: optional u16 underlay_source_port;
   25: optional u16 reverse_underlay_source_port;
   26: optional string drop_reason;
   27: optional string reverse_drop_reason;
}

struct SessionIpPort {
    1: ipaddr ip;
    2: u16    port;
}

/**
 * @description:This structure contains a map of all the remote
 * session end points connected to this session. key uniquely
 * identifies the remote session end point and value is the
 * traffic info, security info, to that end point
 */
struct SessionAggInfo {
    1: optional i64 sampled_tx_bytes;
    2: optional i64 sampled_tx_pkts;
    3: optional i64 sampled_rx_bytes;
    4: optional i64 sampled_rx_pkts;
    5: optional i64 logged_tx_bytes;
    6: optional i64 logged_tx_pkts;
    7: optional i64 logged_rx_bytes;
    8: optional i64 logged_rx_pkts;
    9: map<SessionIpPort, Sessioninfo> sessionMap;
}

struct SessionIpPortProtocol {
    1: ipaddr ip;
    2: u16    port;
    3: u16    protocol;
}

/**
 * @description: This structure contains a map of all the sessions for the given
 * vmi. key uniquely identifies the local session endpoint (keyed by
 * server_port-protocol-local_ip) and value is the aggregated values for the
 * session and map of all the remote session endpoints.
 */
struct SessionEndpoint {
    1: uuid_t vmi;
    2: string vn;
    3: optional string deployment;
    4: optional string tier
    5: optional string application;
    6: optional string site;
    7: optional set<string> labels;
    8: optional string remote_deployment;
    9: optional string remote_tier;
    10: optional string remote_application;
    11: optional string remote_site;
    12: optional set<string> remote_labels;
    13: string remote_vn;
    14: byte is_client_session;
    15: byte is_si;
    16: optional string remote_prefix;
    17: ipaddr vrouter_ip;
    18: map<SessionIpPortProtocol, SessionAggInfo> sess_agg_info;
}

flowlog sandesh SessionEndpointObject {
    1: list<SessionEndpoint> session_data;
}

struct FlowLogData {
    1: string             flowuuid;
    2: byte               direction_ing;
    3: string    sourcevn;
    4: ipaddr    sourceip;
    5: string    destvn;
    6: ipaddr    destip;
    7: byte      protocol;
    8: i16       sport;
    9: i16       dport;
    11: optional u16      tcp_flags;
    12: optional string    vm;
    16: optional string    reverse_uuid;
    17: optional i64       setup_time;
    18: optional i64       teardown_time;
  
    23: optional i64       bytes;
    24: optional i64       packets;
    26: optional i64       diff_bytes;
    27: optional i64       diff_packets;
    28: optional string    action;
    29: optional string    sg_rule_uuid;
    30: optional string    nw_ace_uuid;
    31: optional string    vrouter_ip;
    32: optional string    other_vrouter_ip;
    33: optional u16       underlay_proto;
    34: optional u16       underlay_source_port;
    35: optional string    vmi_uuid;
    36: optional string    drop_reason;
    37: optional bool      forward_flow;
}

flowlog sandesh FlowLogDataObject {
    1: list<FlowLogData>       flowdata;
}
