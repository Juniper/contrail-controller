/*
 * Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
 */
 
/* 
 * flow.sandesh
 *
 * Flow sandesh definitions
 */

const string IP       = "ip";
const string PORT     = "port";
const string PROTOCOL = "protocol";
const string LOCAL_IP       = "local_ip";
const string SERVICE_PORT     = "service_port";

const map<string, bool> SessionFlowInfoField2Type = {
    "sampled_bytes" : 1,
    "sampled_pkts"  : 1,
    "logged_bytes"  : 1,
    "logged_pkts"   : 1,
    "flow_uuid"     : 0,
    "tcp_flags"     : 1,
    "setup_time"    : 1,
    "teardown_time" : 1,
    "teardown_bytes": 1,
    "teardown_pkts" : 1,
    "action"        : 0,
    "sg_rule_uuid"  : 0,
    "nw_ace_uuid"   : 0,
    "underlay_source_port" : 1,
    "drop_reason"   : 1,
    "vm"            : 0,
    "other_vrouter_ip"     : 0,
    "underlay_proto": 1,
}

struct SessionFlowInfo {
    1: optional i64 sampled_bytes;
    2: optional i64 sampled_pkts;
    3: optional i64 logged_bytes;
    4: optional i64 logged_pkts;
    5: optional ct_uuid_t flow_uuid;
    6: optional i16 tcp_flags;
    7: optional i64 setup_time;
    8: optional i64 teardown_time;
    9: optional i64 teardown_bytes;
   10: optional i64 teardown_pkts;
   11: optional string action;
   12: optional ct_uuid_t sg_rule_uuid;
   13: optional ct_uuid_t nw_ace_uuid;
   14: optional u16 underlay_source_port;
   15: optional string drop_reason;
}

struct SessionInfo {
    1: SessionFlowInfo forward_flow_info;
    2: SessionFlowInfo reverse_flow_info;
    3: optional string vm;
    4: optional ipaddr other_vrouter_ip;
    5: optional u16 underlay_proto;
}

struct SessionIpPort {
    1: ipaddr ip;
    2: u16    port;
}

/**
 * @description:This structure contains a map of all the remote
 * session end points connected to this session. key uniquely
 * identifies the remote session end point and value is the
 * traffic info, security info, to that end point
 */
struct SessionAggInfo {
    1: optional i64 sampled_forward_bytes;
    2: optional i64 sampled_forward_pkts;
    3: optional i64 sampled_reverse_bytes;
    4: optional i64 sampled_reverse_pkts;
    5: optional i64 logged_forward_bytes;
    6: optional i64 logged_forward_pkts;
    7: optional i64 logged_reverse_bytes;
    8: optional i64 logged_reverse_pkts;
    9: map<SessionIpPort, SessionInfo> sessionMap;
}

struct SessionIpPortProtocol {
    1: ipaddr local_ip;
    2: u16    service_port;
    3: u16    protocol;
}

/**
 * @description: This structure contains a map of all the sessions for the given
 * vmi. key uniquely identifies the local session endpoint (keyed by
 * server_port-protocol-local_ip) and value is the aggregated values for the
 * session and map of all the remote session endpoints.
 */
struct SessionEndpoint {
    1: string vmi;
    2: string vn;
    3: optional string deployment;
    4: optional string tier
    5: optional string application;
    6: optional string site;
    7: optional set<string> labels;
    20: optional set<string> custom_tags;
    8: optional string remote_deployment;
    9: optional string remote_tier;
    10: optional string remote_application;
    11: optional string remote_site;
    12: optional set<string> remote_labels;
    21: optional set<string> remote_custom_tags;
    13: optional string security_policy_rule;
    14: string remote_vn;
    15: byte is_client_session;
    16: byte is_si;
    17: optional string remote_prefix;
    18: ipaddr vrouter_ip;
    19: map<SessionIpPortProtocol, SessionAggInfo> sess_agg_info;
}

sessionlog sandesh SessionEndpointObject {
    1: list<SessionEndpoint> session_data;
}
